<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 1.7                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2007                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the Affero General Public License Version 1,    |
 | March 2002.                                                        |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the Affero General Public License for more details.            |
 |                                                                    |
 | You should have received a copy of the Affero General Public       |
 | License along with this program; if not, contact the Social Source |
 | Foundation at info[AT]civicrm[DOT]org.  If you have questions      |
 | about the Affero General Public License or the licensing  of       |
 | of CiviCRM, see the Social Source Foundation CiviCRM license FAQ   |
 | http://www.civicrm.org/licensing/                                  |
 +--------------------------------------------------------------------+
*/

/**
 * This class handles all REST client requests.
 *
 * @package CRM
 * @author Donald A. Lobo <lobo@civicrm.org>
 * @copyright CiviCRM LLC (c) 2004-2007
 * $Id$
 *
 */

class CRM_Utils_REST
{
    /**
     * Number of seconds we should let a soap process idle
     * @static
     */
    static $rest_timeout = 0;
    
    /**
     * Cache the actual UF Class
     */
    public $ufClass;

    /**
     * Class constructor.  This caches the real user framework class locally,
     * so we can use it for authentication and validation.
     *
     * @param  string $uf       The userframework class
     */
    public function __construct() {
        // any external program which call SoapServer is responsible for
        // creating and attaching the session
        $args = func_get_args( );
        $this->ufClass = array_shift( $args );
    }

    /**
     * Simple ping function to test for liveness.
     *
     * @param string $var   The string to be echoed
     * @return string       $var
     * @access public
     */
    public function ping($var) {
        $session =& CRM_Core_Session::singleton();
        $key = $session->get('key');
        $session->set( 'key', $var );
        return self::simple( array( 'message' => "PONG: $var ($key)" ) );
    }


    /**
     * Verify a REST key
     *
     * @param string $key   The soap key generated by authenticate()
     * @return none
     * @access public
     */
    public function verify($key) {
        $session =& CRM_Core_Session::singleton();

        $rest_key = $session->get('rest_key');
        
        if ( $key !== sha1($rest_key) ) {
            return false;
        }
        
        $t = time();
        if ( self::$rest_timeout && 
             $t > ($session->get('rest_time') + self::$rest_timeout)) {
            return false;
        }
        
        /* otherwise, we're ok.  update the timestamp */
        $session->set('rest_time', $t);
        return true;
    }
    
    /**
     * Authentication wrapper to the UF Class
     *
     * @param string $name      Login name
     * @param string $pass      Password
     * @return string           The REST Client key
     * @access public
     * @static
     */
    public function authenticate($name, $pass) {
        eval ('$result =& CRM_Utils_System_Drupal::authenticate($name, $pass);');

        if (empty($result)) {
            return self::error( ts( 'Could not authenticate user, invalid name / password' ) );
        }
        
        $session =& CRM_Core_Session::singleton();
        $session->set('rest_key', $result[2]);
        $session->set('rest_time', time());
        
        return self::simple( array( 'key' => sha1( $result[2] ) ) );
    }

    function error( $message = 'Unknown Error' ) {
        $values =
            array( 'error_message' => $message,
                   'is_error'      => 1 );
        return $values;
    }

    function simple( $params ) {
        $values  = array( 'is_error' => 0 );
        $values += $params;
        return $params;
    }

    function run( &$config ) {

        $q = $_GET['q'];
        $args = explode( '/', $q );
        if ( $args[0] != 'civicrm' ) {
            return self::error( ts( 'Unknown function invocation' ) );
        }

        require_once 'CRM/Utils/Request.php';

        $store = null;
        if ( $args[1] == 'login' ) {
            $name = CRM_Utils_Request::retrieve( 'name', 'String', $store, false, 'GET' );
            $pass = CRM_Utils_Request::retrieve( 'pass', 'String', $store, false, 'GET' );
            if ( empty( $name ) ||
                 empty( $pass ) ) {
                return self::error( ts( 'Invalid name and password' ) );
            }
            return self::authenticate( $name, $pass );
        } else {
            $key = CRM_Utils_Request::retrieve( 'key', 'String', $store, false, 'GET' );
            if ( ! self::verify( $key ) ) {
                return self::error( ts( 'session keys do not match, please re-auth' ) );
            }
        }

        $params =& self::buildParamList( );

        switch ( $args[1] ) {
        
        case 'contact':
            return self::contact( $config, $args, $params );

        default:
            return self::error( ts( 'Unknown function invocation' ) );
        }

    }

    function &buildParamList( ) {
        $params = array( );

        $skipVars = array( 'q'   => 1,
                           'key' => 1 );

        foreach ( $_GET as $n => $v ) {
            if ( ! array_key_exists( $n, $skipVars ) ) {
                $params[$n] = $v;
            }
        }

        return $params;
    }

    function contact( &$config, &$args, &$params ) {
        switch ( $args[2] ) {
        case 'add':
        case 'get':
        case 'delete':
        case 'search':
            require_once 'api/v2/Contact.php';
            $fnName = "civicrm_contact_{$args[2]}";
            return $fnName( $params );

        default:
            return self::error( ts( 'Unknown function called' ) );
        }
    }

}

?>