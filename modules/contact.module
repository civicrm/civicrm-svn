<?php
/**
 +----------------------------------------------------------------------+
 | CiviCRM version 1.0                                                  |
 +----------------------------------------------------------------------+
 | Copyright (c) 2005 Donald A. Lobo                                    |
 +----------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                      |
 |                                                                      |
 | CiviCRM is free software; you can redistribute it and/or modify it   |
 | under the terms of the Affero General Public License Version 1,      |
 | March 2002.                                                          |
 |                                                                      |
 | CiviCRM is distributed in the hope that it will be useful, but       |
 | WITHOUT ANY WARRANTY; without even the implied warranty of           |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                 |
 | See the Affero General Public License for more details at            |
 | http://www.affero.org/oagpl.html                                     |
 |                                                                      |
 | A copy of the Affero General Public License has been been            |
 | distributed along with this program (affero_gpl.txt)                 |
 +----------------------------------------------------------------------+
*/

/**
 * Drupal module file.
 *
 * @package CRM
 * @author Donald A. Lobo <lobo@yahoo.com>
 * @copyright Donald A. Lobo 01/15/2005
 * $Id$
 *
 */


//echo "including contact.module... <br />";

include_once 'config.inc.php';

require_once 'CRM/Action.php';
require_once 'CRM/Form.php';
require_once 'CRM/Utils.php';

require_once 'CRM/Contact/Wrapper.php';

require_once 'CRM/Selector/Controller.php';
require_once 'CRM/Contact/Selector/Individual.php';



/**
 * @file
 * This is an example outlining how a module can be used to display a
 * custom page at a given URL.
 */

/**
 * Implementation of hook_help().
 *
 * Throughout Drupal, hook_help() is used to display help text at the top of
 * pages. Some other parts of Drupal pages get explanatory text from these hooks
 * as well. We use it here to provide a description of the module on the
 * module administration page. This example also illustrates how to add help
 * text to the pages your module defines.
 */
function contact_help($section)
{
    switch ($section) {
    case 'admin/modules#description':
        // This description is shown in the listing at admin/modules.
        return t('CRM module v0.1');
    }
}

/**
 * Implementation of hook_perm().
 *
 * Since the access to our new custom pages will be granted based on
 * special permissions, we need to define what those permissions are here.
 * This ensures that they are available to enable on the user role
 * administration pages.
 */
function contact_perm() 
{
    return array('view contact', 'edit contact', 'administer contact');
}

/**
 * Implementation of hook_block().
 * This hook both declares to Drupal what blocks are provided by the module, and
 * generates the contents of the blocks themselves.
 */

function contact_block($op='list', $delta='0')
{
    // The $op parameter determines what piece of information is being requested.
    global $user;
    if ($user->uid) {
        $menu_arr = contact_menu(true);
        if ($op == 'list') {
            // If $op is "list", we just need to return a list of block descriptions. This
            // is used to provide a list of possible blocks to the administrator.
            $block[0]['info'] = 'CRM Block';
            $block[1]['info'] = 'CRM Quick Add Contact Block';
            $block[2]['info'] = 'CRM Search Block';
            return $block;
        } else {
            // If $op is "view", then we need to generate the block for display purposes.
            // The $delta parameter tells us which block is being requested.
            switch ($delta) {
                //Case 2 builds the content of quick search block.
            case 2:
                // The content of the block is generated by calling a function.
                $content = contact_qsearch();
                // The subject is displayed at the top of the block.
                $block['subject'] = "<span class='crm_blocktitle'>CRM Contact Search</span>";
                //Content of the block which is generated by calling the function.
                $block['content'] = $content;
                break;   
                //Case 1 builds the content of quick add block.
            case 1: 
                $content = contact_miniadd(); 
                $block['subject'] = "<span class='crm_blocktitle'>CRM Quick Add Contact</span>";
                $block['content'] = $content;
                break;   
            case 0:
                //Case 0 builds the content of shortcuts block.
                if (is_array($menu_arr)){
                    $content .= "<div id='crm-shortcuts'>";
                    foreach ($menu_arr as $menu_key => $menu_value) {
                        //shortcut for add contact for Individual.
                        if ($menu_value['path'] == "crm/contact/add") {
                            $content.="<a href=".$menu_value['path'].">".$menu_value['title']."</a><br>";
                        }
                        //shortcut for add contact for Household.
                        if ($menu_value['path'] == "crm/contact/add_house") {
                            $content.="<a href=".$menu_value['path'].">".$menu_value['title']."</a><br>";
                        }
                        //shortcut for add contact for contact Search.
                        if ($menu_value['path'] == "crm/contact/search") {
                            $content.="<a href=".$menu_value['path'].">".$menu_value['title']."</a><br>";
                        }
                        //shortcut for add contact for Listing thecontact.                        
                        if ($menu_value['path'] == "crm/contact/list") {
                            $content.="<a href=".$menu_value['path'].">".$menu_value['title']."</a><br>";
                        }                    
                    }
                    $content .= "</div>";
                } else {
                    $content.="!!!";
                }
                $block['subject'] = "<span class='crm_blocktitle'>CRM Shortcuts</span>";
                $block['content'] = $content;
                break;
            }
            return $block;
        }
    }
}

/**
 * Implementation of hook_menu().
 *
 * You must implement hook_menu() to emit items to place in the main menu.
 * This is a required step for modules wishing to display their own pages,
 * because the process of creating the links also tells Drupal what
 * callback function to use for a given URL. The menu items returned
 * here provide this information to the menu system.
 *
 * With the below menu definitions, URLs will be interpreted as follows:
 *
 * If the user accesses http://example.com/?q=foo, then the menu system
 * will first look for a menu item with that path. In this case it will
 * find a match, and execute contact_foo().
 *
 */
function contact_menu($may_cache) 
{

    //    echo "contact.module - brk 20<br />";

    $items = array();
    
    // The $may_cache parameter is used to divide menu items into two parts. Those
    // returned when $may_cache is true must be consistently applicable for the
    // current user at all times; the others may change or be defined at only
    // certain paths. Most modules will have excusively cacheable menu items.
    
    if ($may_cache) {
        // This is the minimum information you can provide for a menu item.
        $items[] = array(
                         'path'  => 'admin/contact',
                         'title' => t('Contact'),
                         'callback' => 'contact_admin_invoke',
                         'access' => user_access('administer contact')
                         );
        
        $items[] = array(
                         'path'  => 'admin/contact/configure',
                         'title' => t('Configure Contact'),
                         'type'   => MENU_DEFAULT_LOCAL_TASK
                         );
        
        $items[] = array(
                         'path'  => 'admin/contact/settings',
                         'title' => t('Contact Settings'),
                         'type'   => MENU_LOCAL_TASK
                         );
        
        $items[] = array(
                         'path'  => 'crm',
                         'title' => t('Contact Management'),
                         'callback' => 'contact_invoke',
                         'access' => user_access('view contact'),
                         'type'   => MENU_CALLBACK
                         );
        
        $items[] = array(
                         'path'  => 'crm/contact',
                         'title' => t('Contact'),
                         'access' => user_access('view contact'),
                         'type'   => MENU_NORMAL_ITEM
                         );
        
        $items[] = array(
                         'path'  => 'crm/contact/list',
                         'title' => t('List Contact'),
                         'type'   => MENU_NORMAL_ITEM,
                         'weight' => 0
                         );
        
        $items[] = array(
                         'path'  => 'crm/contact/add',
                         'title' => t('Add Contact'),
                         'type'   => MENU_NORMAL_ITEM,
                         'weight' => 1
                         );
        
        $items[] = array(
                         'path'  => 'crm/contact/add_house',
                         'title' => t('Add Household'),
                         'type'   => MENU_NORMAL_ITEM,
                         'weight' => 3
                         );
        
        $items[] = array(
                         'path'  => 'crm/contact/add_org',
                         'title' => t('Add Organization'),
                         'type'   => MENU_NORMAL_ITEM,
                         'weight' => 4
                         );
        
        
        $items[] = array(
                         'path'  => 'crm/contact/add/basic',
                         'title' => t('Basic Information'),
                         'type'   => MENU_DEFAULT_LOCAL_TASK
                         );
        
        $items[] = array(
                         'path'  => 'crm/contact/add/rr',
                         'title' => t('Relationships and Roles'),
                         'type'   => MENU_LOCAL_TASK,
                         'weight' => 1
                         );
        
        $items[] = array(
                         'path'  => 'crm/contact/search',
                         'title' => t('Search Contact'),
                         'type'   => MENU_NORMAL_ITEM,
                         'weight' => 2
                         );
        
        $items[] = array(
                         'path'  => 'crm/communicate',
                         'title' => t('Communicate'),
                         'access' => user_access('view contact'),
                         'type'   => MENU_NORMAL_ITEM
                         );
    }
    if ( arg(0) == 'crm' && arg(1) == 'contact' && is_numeric( arg(2) ) ) {
        $cid = arg(2);
        if ( $cid ) {
            $items[] = array(
                             'path'  => 'crm/contact/' . arg(2),
                             'title' => t('View Contact'),
                             'type'   => MENU_CALLBACK
                             );
            
            $items[] = array(
                             'path'  => 'crm/contact/' . arg(2) . '/view',
                             'title' => t('View Contact'),
                             'type'   => MENU_DEFAULT_LOCAL_TASK,
                             );
            
            $items[] = array(
                             'path'  => 'crm/contact/' . arg(2) . '/edit',
                             'title' => t('Edit Contact'),
                             'type'   => MENU_LOCAL_TASK,
                             );
            
            $items[] = array(
                             'path'  => 'crm/contact/' . arg(2) . '/delete',
                             'title' => t('Delete Contact'),
                             'type'   => MENU_LOCAL_TASK,
                             );
        }
    }
    return $items;
}

function contact_init() 
{

    // menu_rebuild();
    
    $config = CRM_Config::singleton();
    CRM_DAO::init($config->dsn, $config->daoDebug);
    
    $factoryClass = 'CRM_Contact_DAO_Factory';
    CRM_Utils::import($factoryClass);
    
    CRM_DAO::setFactory(new $factoryClass());
}

/**
 * Implementation of hook_validate().
 * Experimenting w/ input validation models. Setting error for both top of page and inline displays.
 * Will replace this w/ logic which loops on array of form field defs in next iteration.
 */
function contact_validate(&$contact) 
{
    if (isset($contact['first_name']) && !strlen($contact['first_name'])) {
        form_set_error('first_name', t('First Name is required.'));
    }
    if (!strlen($contact['first_name'])) {
        $error['first_name'] = '<div class="error">';
        $error['first_name'] .= t('First Name field can not be blank.');
        $error['first_name'] .= '</div>';
    }
    if (isset($contact['last_name']) && !strlen($contact['last_name'])) {
        form_set_error('last_name', t('Last Name is required.'));
    }
    if (!strlen($contact['last_name'])) {
        $error['last_name'] = '<div class="error">';
        $error['last_name'] .= t('Last Name field can not be blank.');
        $error['last_name'] .= '</div>';
    }
    return $error;
}

/**
 * Menu callback; dispacthes control to the appropriate operation handler
 */
function contact_admin_invoke($operation) 
{
    $content = "the contact administrator invoked $operation";
    print theme('page', $content);
}

function contact_invoke($operation) 
{
    $content = "";
    
    // check for add
    if (arg(2) == 'add' && (arg(3) == 'basic' || arg(3) == NULL)) {
        $content .= contact_add();
    }
    
    // add household
    if (arg(2) == 'add_house') {
        $content .= contact_add_house();
    }

    // add organisation
    if (arg(2) == 'add_org') {
        $content .= contact_add_org();
    }

    // quick add contact
    if (arg(2) == 'qadd') {
        $content .= contact_miniadd();
    }

    // quick search contact
    if (arg(2) == 'qsearch') {
        $content .= contact_qsearch();
    }
    
    // list
    if (arg(2) == 'list') {
        $content .= contact_list(arg(3));
    }

    // edit
    if (arg(2) == 'edit') {
        if(is_numeric(arg(3))) {
            $content .= contact_edit(arg(3));
        } else {
            $content .= 'Please select a valid contact id to edit - ' . arg(3) . ' is not a valid contact id';
        }
    }
    
    if (arg(2) == 'view') {
        if(is_numeric(arg(3))) {
            $content .= contact_view(arg(3));
        } else {
            $content .= 'Please select a valid contact id to view - ' . arg(3) . ' is not a valid contact id';
        }
    }
    
    // search
    if (arg(2) == 'search') {
        $content .= contact_query();
    }
        
    // delete
    if (arg(2) == 'delete') {
        if(is_numeric(arg(3))) {
            $content .= contact_delete(arg(3));
        } else {
            $content .= 'Please select a valid contact id to edit - ' . arg(3) . ' is not a valid contact id';
        }
    }
    
    print theme('page', $content);
    
} // end of function contact_invoke


function contact_load($queryArgs) 
{
}

/**
 *
 * contact_miniadd()
 *
 * adds the contact (Individual) to db. 
 *
 */

function contact_add() 
{
    $contact = new CRM_Contact_Wrapper();
    $contact->run('CRM_Contact_Form_Individual', 'Contact Individual Page', CRM_Form::MODE_ADD, 'crm/contact/add?reset=1', 0);
    return $contact->getContent();
} // end of function contact_add

/**
 *
 * contact_add_house()
 *
 * adds the contact (Household) to db. 
 *
 */

function contact_add_house() 
{
    $contact = new CRM_Contact_Wrapper();
    $contact->run('CRM_Contact_Form_Household', 'Contact Household Page', CRM_Form::MODE_ADD, 'crm/contact/add?reset=1', 0);
    return $contact->getContent();
} // end of function contact_add_house

/**
 *
 * contact_add_org()
 *
 * adds the contact (Organization) to db.  
 *
 */

function contact_add_org() 
{
    $contact = new CRM_Contact_Wrapper();
    $contact->run('CRM_Contact_Form_Organization', 'Contact Organization Page', CRM_Form::MODE_ADD, 'crm/contact/add?reset=1', 0);
    return $contact->getContent();
} // end of function contact_add_org

/**
 *
 * contacts_list()
 *
 * lists all contacts from db.
 *
 */

/*function contact_list($id=0) 
{
    $contact = new CRM_Contact_Individual();
    $contact->run(CRM_Form::MODE_VIEW, 0);
    return $contact->getContent();
} // end of function contact_list
*/

function contact_list($id=0) 
{
    $contact = new CRM_Contact_Selector_Individual();
    $controller = new CRM_Selector_Controller($contact , null, null, CRM_Action::VIEW);
    $controller->run( );
    return $controller->getContent();   
} // end of function contact_list



/*
 *
 * contact_query()
 *
 * queries contacts from db.
 * the query string can use the "%" pattern recognition
 * character of sql
 *
 */
function contact_query() 
{
    $contact = new CRM_Contact_Wrapper();
    $contact->run('CRM_Contact_Form_Search', 'Search Contacts', CRM_Form::MODE_NONE, 'crm/contact/list?reset=1', 0);
    return $contact->getContent();
} // end of function contact_query

/**
 *
 * contact_edit
 *
 */
function contact_edit($id) 
{
    $contact = new CRM_Contact_Contact();
    $contact->run(CRM_Form::MODE_UPDATE, $id);
    return $contact->getContent();
} // end of function contact_edit


/**
 *
 * contact_view
 *
 */
function contact_view($id) 
{
    // echo "IN CONTACT VIEW: $id<p>";
    // flush();
    $contact = new CRM_Contact_Contact();
    $contact->run(CRM_Form::MODE_VIEW, $id);
    return $contact->getContent();
} // end of function contact_view


/**
 *
 * contact_delete()
 *
 * lists all contacts from db.
 *
 */
function contact_delete($id) 
{
    $contact = new CRM_Contact_Contact();
    $contact->run(CRM_Form::MODE_DELETE, $id);
    return $contact->getContent();
} // end of function contact_delete

/**
 *
 * contact_miniadd()
 *
 * adds the contact (Individual) to db using quick add block. 
 *
 */

function contact_miniadd(){
    $contact = new CRM_Contact_Wrapper();
    $contact->run('CRM_Contact_Form_Individual', 'Contact Individual Page', CRM_Form::MODE_ADD_MINI, 'crm/contact/add?reset=1', 0);
    return $contact->getContent();
    
}

/**
 *
 * contact_miniadd()
 *
 * searches the contact (Individual) to db using quick search block. 
 *
 */

function contact_qsearch(){
    $contact = new CRM_Contact_Wrapper();
    $contact->run('CRM_Contact_Form_Search', 'Contact Search Page', CRM_Form::MODE_SEARCH_MINI, 'crm/contact/search?reset=1', 0);
    return $contact->getContent();
}

?>