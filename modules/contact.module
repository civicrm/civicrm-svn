<?php
/**
 +----------------------------------------------------------------------+
 | CiviCRM version 1.0                                                  |
 +----------------------------------------------------------------------+
 | Copyright (c) 2005 Donald A. Lobo                                    |
 +----------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                      |
 |                                                                      |
 | CiviCRM is free software; you can redistribute it and/or modify it   |
 | under the terms of the Affero General Public License Version 1,      |
 | March 2002.                                                          |
 |                                                                      |
 | CiviCRM is distributed in the hope that it will be useful, but       |
 | WITHOUT ANY WARRANTY; without even the implied warranty of           |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                 |
 | See the Affero General Public License for more details at            |
 | http://www.affero.org/oagpl.html                                     |
 |                                                                      |
 | A copy of the Affero General Public License has been been            |
 | distributed along with this program (affero_gpl.txt)                 |
 +----------------------------------------------------------------------+
*/

/**
 * Drupal module file.
 *
 * @package CRM
 * @author Donald A. Lobo <lobo@yahoo.com>
 * @copyright Donald A. Lobo 01/15/2005
 * $Id$
 *
 */


include_once 'config.inc.php';

require_once 'PEAR.php';

require_once 'CRM/Action.php';
require_once 'CRM/Form.php';
require_once 'CRM/Block.php';

require_once 'CRM/Contact/Wrapper.php';
require_once 'CRM/Selector/Controller.php';

// only used for debugging purposes - remove in production system
require_once 'CRM/Error.php';


/**
 * Provides a link to the CSS stylesheet associated with this module.
 *
 * @return a &lt;style&gt; tag that indicates what file browsers should import
 */
function crm_html_head() {
  return '<style type="text/css">@import url(crm/css/civicrm.css);</style>';
}

/**
 * @file
 * This is an example outlining how a module can be used to display a
 * custom page at a given URL.
 */

/**
 * Implementation of hook_help().
 *
 * Throughout Drupal, hook_help() is used to display help text at the top of
 * pages. Some other parts of Drupal pages get explanatory text from these hooks
 * as well. We use it here to provide a description of the module on the
 * module administration page. This example also illustrates how to add help
 * text to the pages your module defines.
 */
function contact_help($section)
{
    switch ($section) {
    case 'admin/modules#description':
        // This description is shown in the listing at admin/modules.
        return t('CRM module v0.1');
    }
}

/**
 * Implementation of hook_perm().
 *
 * Since the access to our new custom pages will be granted based on
 * special permissions, we need to define what those permissions are here.
 * This ensures that they are available to enable on the user role
 * administration pages.
 */
function contact_perm() 
{
    return array('view contact', 'edit contact', 'administer contact');
}

/**
 * Implementation of hook_block().
 * This hook both declares to Drupal what blocks are provided by the module, and
 * generates the contents of the blocks themselves.
 */

function contact_block($op='list', $delta='0')
{
   
    // The $op parameter determines what piece of information is being requested.
    global $user;
    if ($user->uid) {
        $menu_arr = contact_menu(true);
        if ($op == 'list') {
            return CRM_Block::getInfo( );
        } else {
            // If $op is "view", then we need to generate the block for display purposes.
            // The $delta parameter tells us which block is being requested.
            switch ($delta) {

            case 2:
                //Case 2 builds the content of quick search block.
                return CRM_Block::getContent ( 2 );
                
            case 1: 
                //Case 1 builds the content of quick add block.
                return CRM_Block::getContent ( 1 );
                   
            case 0:
                //Case 0 builds the content of shortcuts block.
                $content .= "<div id='crm-shortcuts'>";
                static $shortCuts = array( array( 'path'  => 'crm/contact/add',
                                                  'qs'    => '&c_type=Individual&reset=1',
                                                  'title' => 'New Individual' ), 
                                           array( 'path'  => 'crm/contact/add',
                                                  'qs'    => '&c_type=Organization&reset=1',
                                                  'title' => 'New Organization' ),
                                           array( 'path'  => 'crm/contact/add',
                                                  'qs'    => '&c_type=Household&reset=1',
                                                  'title' => 'New Household' ),
                                           array( 'path'  => 'crm/group/add',
                                                  'qs'    => '&reset=1',
                                                  'title' => 'New Group' ));
                                                  
                foreach ( $shortCuts as &$short ) {
                    $content .= '<a href="' . $short['path'] . $short['qs'] . '">' . $short['title'] . '</a><br>';
                }

                $content .= "</div>";
                $block['subject'] = "<span class='crm_blocktitle'>CRM Shortcuts</span>";
                $block['content'] = $content;
                break;
            }
            return $block;
        }
    }
}

/**
 * Implementation of hook_menu().
 *
 * You must implement hook_menu() to emit items to place in the main menu.
 * This is a required step for modules wishing to display their own pages,
 * because the process of creating the links also tells Drupal what
 * callback function to use for a given URL. The menu items returned
 * here provide this information to the menu system.
 *
 * With the below menu definitions, URLs will be interpreted as follows:
 *
 * If the user accesses http://example.com/?q=foo, then the menu system
 * will first look for a menu item with that path. In this case it will
 * find a match, and execute contact_foo().
 *
 */
function contact_menu($may_cache) 
{
    $items = array();
    
    // The $may_cache parameter is used to divide menu items into two parts. Those
    // returned when $may_cache is true must be consistently applicable for the
    // current user at all times; the others may change or be defined at only
    // certain paths. Most modules will have excusively cacheable menu items.
    
    if ($may_cache) {
        // This is the minimum information you can provide for a menu item.
        $items[] = array(
                         'path'  => 'admin/contact',
                         'title' => t('Contact'),
                         'callback' => 'contact_admin_invoke',
                         'access' => user_access('administer contact')
                         );
        
        $items[] = array(
                         'path'  => 'admin/contact/configure',
                         'title' => t('Configure Contact'),
                         'type'   => MENU_DEFAULT_LOCAL_TASK
                         );
        
        $items[] = array(
                         'path'  => 'admin/contact/settings',
                         'title' => t('Contact Settings'),
                         'type'   => MENU_LOCAL_TASK
                         );
        
        $items[] = array(
                         'path'  => 'crm',
                         'title' => t('Contact Management'),
                         'callback' => 'crm_invoke',
                         'access' => user_access('view contact'),
                         'type'   => MENU_IS_ROOT | MENU_VISIBLE_IN_TREE | MENU_CALLBACK,
                         'pid'    => 0,
                         );
        
        $items[] = array(
                         'path'  => 'crm/contact',
                         'title' => t('Contact'),
                         'callback' => 'contact_invoke',
                         'access' => user_access('view contact'),
                         'type'   => MENU_NORMAL_ITEM
                         );
        
        $items[] = array(
                         'path'  => 'crm/contact/search',
                         'title' => t('Browse Contacts'),
                         'type'   => MENU_NORMAL_ITEM,
                         'weight' => 0
                         );
        
       $items[] = array(
                         'path'  => 'crm/contact/add',
                         'title' => t('Add Contact'),
                         'type'   => MENU_CALLBACK,
                         'weight' => 1
                         );    
        
        $items[] = array(
                         'path'  => 'crm/contact/view',
                         'title' => t('View Contact'),
                         'type'   => MENU_CALLBACK
                         );

         $items[] = array(
                         'path'  => 'crm/contact/view/basic',
                         'title' => t('Contact Info'),
                         'type'   => MENU_DEFAULT_LOCAL_TASK,
                         'weight' => 0
                        );

        $items[] = array(
                         'path'  => 'crm/contact/view/rels',
                         'title' => t('Relationships'),
                         'type'   => MENU_LOCAL_TASK,
                         'weight' => 1
                         );
        
        $items[] = array(
                         'path'  => 'crm/contact/view/groups',
                         'title' => t('Groups'),
                         'type'   => MENU_LOCAL_TASK,
                         'weight' => 2
                         );
        
        $items[] = array(
                         'path'  => 'crm/groups',
                         'title' => t('Manage Groups'),
                         'type'   => MENU_NORMAL_ITEM,
                         'weight' => 1
                         );
        
        $items[] = array(
                         'path'  => 'crm/import',
                         'title' => t('Import Contacts'),
                         'type'   => MENU_NORMAL_ITEM,
                         'weight' => 2
                         );
        
     }

   return $items;
}

function contact_init() 
{
    // menu_rebuild();
    $config = CRM_Config::singleton();
    CRM_DAO::init($config->dsn, $config->daoDebug);
    
    $factoryClass = 'CRM_Contact_DAO_Factory';
    
    CRM_DAO::setFactory(new $factoryClass());

    // Add module-specific stylesheet to page header
    drupal_set_html_head(crm_html_head());

    // set error handling
    PEAR::setErrorHandling(PEAR_ERROR_CALLBACK, array('CRM_Error', 'callback'));
}


/**
 * Menu callbacks; dispatches control to the appropriate handler
 */
function contact_admin_invoke() 
{
    $content = "the contact administrator invoked $operation";
    print theme('page', $content);
}

function crm_invoke()
{
    $content = "";
}

function contact_invoke() 
{
    $content = "";

    // check for add
    if (arg(2) == 'add') {
        $content .= contact_form( CRM_Form::MODE_ADD );
    }
    

    // edit contact
    if (arg(2) == 'edit') {
        $content .= contact_form( CRM_Form::MODE_UPDATE );
    }
    

    // view individual
    if (arg(2) == 'view') {
        $content .= contact_form( CRM_Form::MODE_VIEW );
    }
    
    // search
    if (arg(2) == 'search') {
        $content .= contact_query();
    }
        
    // delete
    if (arg(2) == 'delete') {
        if(is_numeric(arg(3))) {
            $content .= contact_delete(arg(3));
        } else {
            $content .= 'Please select a valid contact id to edit - ' . arg(3) . ' is not a valid contact id';
        }
    }
    
    print theme('page', $content);
    
} // end of function contact_invoke


function contact_load($queryArgs) 
{
}

/**
 * This function is used to load form for add/edit/view contacts (all types)
 *
 * @return this returns the form and or display content
 */
function contact_form( $mode )
{
    $contact = new CRM_Contact_Wrapper();
    $contact->run('CRM_Contact_Form_Contact', 'Contact Page', $mode, 'contact/add?reset=1', NULL);
    return $contact->getContent();
}

/*
 *
 * queries contacts from db.
 * the query string can use the "%" pattern recognition
 * character of sql
 *
 * @return this returns the display content
 */
function contact_query() 
{
    $contact = new CRM_Contact_Wrapper();
    $contact->run('CRM_Contact_Form_Search', 'Search Contacts', CRM_Form::MODE_SEARCH, 'contact/search?reset=1', 0);
    return $contact->getContent();
} // end of function contact_query


/**
 *
 * contact_delete()
 *
 * lists all contacts from db.
 *
 */
function contact_delete($id) 
{
    $contact = new CRM_Contact_Contact();
    $contact->run(CRM_Form::MODE_DELETE, $id);
    return $contact->getContent();
} // end of function contact_delete

?>