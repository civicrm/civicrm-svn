<?php
/**
 +----------------------------------------------------------------------+
 | CiviCRM version 1.0                                                  |
 +----------------------------------------------------------------------+
 | Copyright (c) 2005 Donald A. Lobo                                    |
 +----------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                      |
 |                                                                      |
 | CiviCRM is free software; you can redistribute it and/or modify it   |
 | under the terms of the Affero General Public License Version 1,      |
 | March 2002.                                                          |
 |                                                                      |
 | CiviCRM is distributed in the hope that it will be useful, but       |
 | WITHOUT ANY WARRANTY; without even the implied warranty of           |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                 |
 | See the Affero General Public License for more details at            |
 | http://www.affero.org/oagpl.html                                     |
 |                                                                      |
 | A copy of the Affero General Public License has been been            |
 | distributed along with this program (affero_gpl.txt)                 |
 +----------------------------------------------------------------------+
*/

/**
 * Drupal module file.
 *
 * @package CRM
 * @author Donald A. Lobo <lobo@yahoo.com>
 * @copyright Donald A. Lobo 01/15/2005
 * $Id$
 *
 */


include_once 'config.inc.php';

require_once 'PEAR.php';

require_once 'CRM/Action.php';
require_once 'CRM/Form.php';
require_once 'CRM/Block.php';
require_once 'CRM/Wrapper.php';

require_once 'CRM/Contact/Page/View.php';
require_once 'CRM/Selector/Controller.php';

// only used for debugging purposes - remove in production system
require_once 'CRM/Error.php';


/**
 * Provides a link to the CSS stylesheet associated with this module.
 *
 * @return a &lt;style&gt; tag that indicates what file browsers should import
 */
function civicrm_html_head() {
  return '<style type="text/css">@import url(crm/css/civicrm.css);</style>';
}

/**
 * @file
 * This is an example outlining how a module can be used to display a
 * custom page at a given URL.
 */

/**
 * Implementation of hook_help().
 *
 * Throughout Drupal, hook_help() is used to display help text at the top of
 * pages. Some other parts of Drupal pages get explanatory text from these hooks
 * as well. We use it here to provide a description of the module on the
 * module administration page. This example also illustrates how to add help
 * text to the pages your module defines.
 */
function civicrm_help($section)
{
    switch ($section) {
    case 'admin/modules#description':
        // This description is shown in the listing at admin/modules.
        return t('CiviCRM module v0.1');
    }
}

/**
 * Implementation of hook_perm().
 *
 * Since the access to our new custom pages will be granted based on
 * special permissions, we need to define what those permissions are here.
 * This ensures that they are available to enable on the user role
 * administration pages.
 */
function civicrm_perm() 
{
    return array('view contact', 'edit contact', 'administer contact');
}

/**
 * Implementation of hook_block().
 * This hook both declares to Drupal what blocks are provided by the module, and
 * generates the contents of the blocks themselves.
 */

function civicrm_block($op='list', $delta='0')
{
   
    // The $op parameter determines what piece of information is being requested.
    global $user;
    if ($user->uid) {
        $menu_arr = civicrm_menu(true);
        if ($op == 'list') {
            return CRM_Block::getInfo( );
        } else {
            return CRM_Block::getContent ( $delta );
        }
    }
}

/**
 * Implementation of hook_menu().
 *
 * You must implement hook_menu() to emit items to place in the main menu.
 * This is a required step for modules wishing to display their own pages,
 * because the process of creating the links also tells Drupal what
 * callback function to use for a given URL. The menu items returned
 * here provide this information to the menu system.
 *
 * With the below menu definitions, URLs will be interpreted as follows:
 *
 * If the user accesses http://example.com/?q=foo, then the menu system
 * will first look for a menu item with that path. In this case it will
 * find a match, and execute civicrm_foo().
 *
 */
function civicrm_menu($may_cache) 
{
    $items = array();
    
    // The $may_cache parameter is used to divide menu items into two parts. Those
    // returned when $may_cache is true must be consistently applicable for the
    // current user at all times; the others may change or be defined at only
    // certain paths. Most modules will have excusively cacheable menu items.
    
    if ($may_cache) {
        // This is the minimum information you can provide for a menu item.
        $items[] = array(
                         'path'  => 'admin/contact',
                         'title' => t('Contact'),
                         'callback' => 'civicrm_admin_invoke',
                         'access' => user_access('administer contact')
                         );
        
        $items[] = array(
                         'path'  => 'admin/contact/configure',
                         'title' => t('Configure Contact'),
                         'type'   => MENU_DEFAULT_LOCAL_TASK
                         );
        
        $items[] = array(
                         'path'  => 'admin/contact/settings',
                         'title' => t('Contact Settings'),
                         'type'   => MENU_LOCAL_TASK
                         );
        
        $items[] = array(
                         'path'  => 'civicrm',
                         'title' => t('CiviCRM Navigation - DISABLE '),
                         'callback' => 'civicrm_invoke',
                         'access' => user_access('view contact'),
                         'type'   => MENU_IS_ROOT | MENU_CALLBACK,
                         'pid'    => 0,
                         );
        
        $items[] = array(
                         'path'  => 'civicrm/contact',
                         'title' => t('Contact'),
                         'callback' => 'civicrm_contact_invoke',
                         'access' => user_access('view contact'),
                         'type'   => MENU_CALLBACK
                         );

        $items[] = array(
                         'path'  => 'civicrm/contact/search',
                         'title' => t('Browse Contacts'),
                         'qs'    => 'reset=1',
                         'type'   => MENU_NORMAL_ITEM,
                         'weight' => 0
                         );
        
        $items[] = array(
                         'path'  => 'civicrm/contact/advanced_search',
                         'title' => t('Advanced Search'),
                         'type'   => MENU_CALLBACK | MENU_NORMAL_ITEM
                         //'type'   => MENU_CALLBACK
                         );

        $items[] = array(
                         'path'  => 'civicrm/contact/advanced_search/new',
                         'title' => t('New Search'),
                         'qs'    => 'reset=1',
                         //'type'   => MENU_NORMAL_ITEM,
                         'type'   => MENU_DEFAULT_LOCAL_TASK,
                         'weight' => 0
                         );

        $items[] = array(
                         'path'  => 'civicrm/contact/advanced_search/browse',
                         'title' => t('Browse Saved Search'),
                         'qs'    => 'reset=1',
                         //'type'   => MENU_NORMAL_ITEM,
                         'type'   => MENU_LOCAL_TASK,
                         'weight' => 1
                         );


       $items[] = array(
                         'path'  => 'civicrm/contact/addI',
                         'title' => t('New Individual'),
                         'qs'    => 'reset=1',
                         'type'  => MENU_CALLBACK,
                         'weight' => 1
                         );    
        
       $items[] = array(
                         'path'  => 'civicrm/contact/addO',
                         'title' => t('New Organization'),
                         'qs'     => 'reset=1',
                         'type'   => MENU_CALLBACK,
                         'weight' => 1
                         );    
        
       $items[] = array(
                         'path'  => 'civicrm/contact/addH',
                         'title' => t('New Household'),
                         'qs'     => 'reset=1',
                         'type'   => MENU_CALLBACK,
                         'weight' => 1
                         );    
        
       $items[] = array(
                         'path'  => 'civicrm/contact/edit',
                         'title' => t('Edit Contact'),
                         'type'   => MENU_CALLBACK,
                         'weight' => 1
                         );    
        
        $items[] = array(
                         'path'  => 'civicrm/contact/view',
                         'title' => t('View Contact'),
                         'type'   => MENU_CALLBACK
                         );

         $items[] = array(
                         'path'  => 'civicrm/contact/view/basic',
                         'title' => t('Contact Info'),
                         'type'   => MENU_DEFAULT_LOCAL_TASK,
                         'weight' => 0
                        );

        $items[] = array(
                         'path'  => 'civicrm/contact/view/rel',
                         'title' => t('Relationships'),
                         'type'   => MENU_LOCAL_TASK,
                         'weight' => 1
                         );
        
        $items[] = array(
                         'path'  => 'civicrm/contact/view/note',
                         'title' => t('Notes'),
                         'type'   => MENU_LOCAL_TASK,
                         'weight' => 3
                         );

        $items[] = array(
                         'path'  => 'civicrm/contact/view/group',
                         'title' => t('Groups'),
                         'type'   => MENU_LOCAL_TASK,
                         'weight' => 2
                         );
        
        $items[] = array(
                         'path'  => 'civicrm/contact/view/tag',
                         'title' => t('Tags'),
                         'type'   => MENU_LOCAL_TASK,
                         'weight' => 4
                         );

        $items[] = array(
                         'path'  => 'civicrm/group',
                         'title' => t('Manage Groups'),
                         'qs'     => 'reset=1',
                         'type'   => MENU_NORMAL_ITEM,
                         'weight' => 1
                         );
        
       $items[] = array(
                         'path'  => 'civicrm/import',
                         'title' => t('Import Contacts'),
                         'qs'     => 'reset=1',
                         'type'   => MENU_NORMAL_ITEM,
                         'weight' => 2
                         );

        $items[] = array(
                         'path'  => 'civicrm/extproperty',
                         'title' => t('Browse Extended Properties'),
                         'qs'     => 'reset=1',
                         'type'   => MENU_NORMAL_ITEM,
                         'weight' => 3
                         );
  
     }

   return $items;
}

function civicrm_init() 
{
    menu_rebuild();

    // Over-ride default breadcrumb for now since we want "Contact Mgmt" to link to contact browser and don't know how else to do it.
    $crm_top_breadcrumb = array('<a href="">Home</a>',
                                '<a href="' . CRM_System::url( 'civicrm/contact/search', 'reset=1' ) . '">Contact Management</a>');
    drupal_set_breadcrumb($crm_top_breadcrumb);

    $config = CRM_Config::singleton();
    CRM_DAO::init($config->dsn, $config->daoDebug);
    
    $factoryClass = 'CRM_Contact_DAO_Factory';
    
    CRM_DAO::setFactory(new $factoryClass());

    // Add module-specific stylesheet to page header
    drupal_set_html_head(civicrm_html_head());

    // set error handling
    PEAR::setErrorHandling(PEAR_ERROR_CALLBACK, array('CRM_Error', 'handle'));
}


/**
 * Menu callbacks; dispatches control to the appropriate handler
 */
function civicrm_admin_invoke() 
{
    $content = "the contact administrator invoked $operation";
    print theme('page', $content);
}

function civicrm_invoke()
{
    //  manage groups
    if (arg(1) == 'group') {
        if(arg(2) == 'edit' OR arg(2) == 'add') {
            $content = fetch_tpl( 'Group/Form/Edit.tpl');
        } else {
            civicrm_assign( 'name','dave');
            $content = fetch_tpl( 'Group/Group.tpl');
        }
        print theme('page', $content);
        return;
    }

    //  import wizard
    if (arg(1) == 'import') {
        $controller = new CRM_Import_Controller( 'Import Contacts' );
        $controller->run( );
        $content = $controller->getContent( );	
        print theme('page', $content);
        return;
    }
  
    //  import wizard
    if (arg(1) == 'extproperty') {
	    $wrapper = new CRM_Wrapper();
        if ( arg(2) == 'group' ) {
            $wrapper->run('CRM_ExtProperty_Form_Group', 'Extended Properties Group', 0,
                          CRM_System::url( 'civicrm/extproperty/group', 'reset=1' ) );
        } else {
            $wrapper->run('CRM_ExtProperty_Form_Field', 'Extended Property', 0,
                          CRM_System::url( 'civicrm/extproperty/group', 'reset=1' ) );
        }
        $content = $wrapper->getContent();
        print theme('page', $content);
    }
  
    drupal_goto( 'civicrm/contact/search', 'reset=1' );
}

function civicrm_contact_invoke() 
{

    $content = "";

    //  add contact
    if (arg(1)=='contact' && substr(arg(2),0,3) == 'add') {
        $content .= civicrm_form( CRM_Form::MODE_ADD );
    }

    // edit contact
    if (arg(1)=='contact' && arg(2) == 'edit') {
        $content .= civicrm_form( CRM_Form::MODE_UPDATE );
    }
 
    // view contact
    if (arg(1)=='contact' && arg(2) == 'view' && arg(3) == '') {
        $view = new CRM_Contact_Page_View( 'View Contact','',CRM_Contact_Page_View::MODE_NONE );
        $content .= $view->run( );
    }

    // view contact notes
    if (arg(2) == 'view' && arg(3) == 'note') {
        $view = new CRM_Contact_Page_View( 'View Contact','',CRM_Contact_Page_View::MODE_NOTE );
        $content .= $view->run( );
    }

    // view contact relationships
    if (arg(2) == 'view' && arg(3) == 'rel') {
        $view = new CRM_Contact_Page_View( 'View Contact','',CRM_Contact_Page_View::MODE_REL );
        $content .= $view->run( );
    }

    // view contact groups
    if (arg(2) == 'view' && arg(3) == 'group') {
        $view = new CRM_Contact_Page_View( 'View Contact','',CRM_Contact_Page_View::MODE_GROUP );
        $content .= $view->run( );
    }

    // view contact tags
    if (arg(2) == 'view' && arg(3) == 'tag') {
        $view = new CRM_Contact_Page_View( 'View Contact','',CRM_Contact_Page_View::MODE_TAG  );
        $content .= $view->run( );
    }

    // search
    if (arg(2) == 'search') {
        $content .= civicrm_query();
    }
        
    // advanced search
    if (arg(2) == 'advanced_search') {
        $content .= civicrm_advanced_search();
    }

    // delete
    if (arg(2) == 'delete') {
        if(is_numeric(arg(3))) {
            $content .= civicrm_delete(arg(3));
        } else {
            $content .= 'Please select a valid contact id to edit - ' . arg(3) . ' is not a valid contact id';
        }
    }
    print theme('page', $content);
    
} // end of function civicrm_invoke


function civicrm_load($queryArgs) 
{
}

/**
 * This function is used to load form for add/edit/view contacts (all types)
 *
 * @return this returns the form and or display content
 */
function civicrm_form( $mode )
{
    $wrapper = new CRM_Wrapper();
    $wrapper->run('CRM_Contact_Form_Edit', 'Contact Page', $mode,
                  CRM_System::url( 'civicrm/contact/add', 'reset=1' ) );
    return $wrapper->getContent();
}


/**
 * Temporary function to load static templates for prototyping
 */
function fetch_tpl( $tpl ) {
    $baseDir = 'CRM' . DIRECTORY_SEPARATOR;
    
    $fileName = $baseDir . $tpl;
    
    $config  = CRM_Config::singleton ();
    $template = SmartyTemplate::singleton($config->templateDir, $config->templateCompileDir);
    return $template->fetch( $fileName );

}

function civicrm_assign( $var, $value = null) {
        static $template = null;

        if ( ! isset( $template ) ) {
            $config  = CRM_Config::singleton ();
            $template = SmartyTemplate::singleton($config->templateDir, $config->templateCompileDir);
        }

        $template->assign($var, $value);
    }

/*
 *
 * queries contacts from db.
 * the query string can use the "%" pattern recognition
 * character of sql
 *
 * @return this returns the display content
 */
function civicrm_query() 
{
    $wrapper = new CRM_Wrapper();
    $wrapper->run('CRM_Contact_Form_Search', 'Search Contacts', CRM_Form::MODE_SEARCH,
                  CRM_System::url( 'civicrm/contact/search', 'reset=1' ) );
    return $wrapper->getContent();
} // end of function civicrm_query


/**
 * Create form for advanced search options.
 *
 * Advanced search options include <b>Groups, Categories, Addresses, Email.</b>
 *
 * @param None
 *
 * @return this returns the display content
 */
function civicrm_advanced_search() 
{
    
    CRM_Error::le_method();

    CRM_Error::debug_log_message("arg1 = " . arg(1));
    CRM_Error::debug_log_message("arg2 = " . arg(2));
    CRM_Error::debug_log_message("arg3 = " . arg(3));
    CRM_Error::debug_log_message("arg4 = " . arg(4));
    CRM_Error::debug_log_message("arg5 = " . arg(5));

    // browse all saved searches
    if (arg(3) == 'browse') {
        $savedSearchPage = new CRM_Contact_Page_SavedSearch('Browse Saved Search', '', CRM_Contact_Page_View::MODE_NONE);
        $content .= $savedSearchPage->run();

        CRM_Error::ll_method();
        return $content;
    }

    // this is for a new advanved search
    $wrapper = new CRM_Wrapper();
    $wrapper->run('CRM_Contact_Form_AdvancedSearch', 'Search Contacts', CRM_Form::MODE_SEARCH, CRM_System::url( 'civicrm/contact/advanced_search', 'reset=1' ));

    CRM_Error::ll_method();
    return $wrapper->getContent();

} // end of function civicrm_query



/**
 *
 * civicrm_delete()
 *
 * lists all contacts from db.
 *
 */
function civicrm_delete($id) 
{
} // end of function civicrm_delete

?>