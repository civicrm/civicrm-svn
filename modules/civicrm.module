<?php
/**
 +----------------------------------------------------------------------+
 | CiviCRM version 1.0                                                  |
 +----------------------------------------------------------------------+
 | Copyright (c) 2005 Donald A. Lobo                                    |
 +----------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                      |
 |                                                                      |
 | CiviCRM is free software; you can redistribute it and/or modify it   |
 | under the terms of the Affero General Public License Version 1,      |
 | March 2002.                                                          |
 |                                                                      |
 | CiviCRM is distributed in the hope that it will be useful, but       |
 | WITHOUT ANY WARRANTY; without even the implied warranty of           |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                 |
 | See the Affero General Public License for more details at            |
 | http://www.affero.org/oagpl.html                                     |
 |                                                                      |
 | A copy of the Affero General Public License has been been            |
 | distributed along with this program (affero_gpl.txt)                 |
 +----------------------------------------------------------------------+
*/

/**
 * Drupal module file.
 *
 * @package CRM
 * @author Donald A. Lobo <lobo@yahoo.com>
 * @copyright Donald A. Lobo 01/15/2005
 * $Id$
 *
 */

include_once 'config.inc.php';

function civicrm_require( ) {
    static $required = false;

    if ( $required ) {
        return;
    }
    $required = true;

    require_once 'PEAR.php';

    require_once 'CRM/Core/Action.php';
    require_once 'CRM/Core/Form.php';
    require_once 'CRM/Core/Block.php';
    require_once 'CRM/Core/Selector/Controller.php';
    require_once 'CRM/Core/DAO.php';
    require_once 'CRM/Core/PseudoConstant.php';
    require_once 'CRM/Core/Invoke.php';

    require_once 'CRM/Core/BAO/UFMatch.php';

    require_once 'CRM/Utils/Menu.php';
    require_once 'CRM/Utils/Wrapper.php';

    require_once 'CRM/Contact/Page/View.php';

    require_once 'CRM/Core/Error.php';
}

/**
 * Provides a link to the CSS stylesheet associated with this module.
 *
 * @return a &lt;style&gt; tag that indicates what file browsers should import
 */
function civicrm_html_head()
{
    $config =& CRM_Core_Config::singleton();
    return '<style type="text/css">@import url(' . $config->resourceBase . 'css/civicrm.css);</style>';
}

/**
 * @file
 * This is an example outlining how a module can be used to display a
 * custom page at a given URL.
 */

/**
 * Implementation of hook_help().
 *
 * Throughout Drupal, hook_help() is used to display help text at the top of
 * pages. Some other parts of Drupal pages get explanatory text from these hooks
 * as well. We use it here to provide a description of the module on the
 * module administration page. This example also illustrates how to add help
 * text to the pages your module defines.
 */
function civicrm_help($section)
{	
    // make sure the system is initialized
    civicrm_initialize( );

    switch ($section) {
    case 'admin/modules#description':
        // This description is shown in the listing at admin/modules.
        return ts('CiviCRM module DEV version');
    }
}

/**
 * Implementation of hook_perm().
 *
 * Since the access to our new custom pages will be granted based on
 * special permissions, we need to define what those permissions are here.
 * This ensures that they are available to enable on the user role
 * administration pages.
 */
function civicrm_perm()
{
    // make sure the system is initialized
    civicrm_initialize( );

    // static permissions
    $cPerm = array('add contacts', 'view all contacts', 'edit all contacts', 'edit groups', 'administer CiviCRM', 'access CiviCRM' );

    // dynamic permissions - access by group (title)
    $groups =& CRM_Core_PseudoConstant::allGroup();
    return $cPerm;    foreach ( $groups as $title ) {
        $cPerm[] = t('view ') . $title;
        $cPerm[] = t('edit ') . $title;
    }

}

/**
 * Implementation of hook_block().
 *
 * This hook both declares to Drupal what blocks are provided by the module, and
 * generates the contents of the blocks themselves.
 */

function civicrm_block($op='list', $delta='0')
{
    if ( ( arg(0) != 'civicrm' && arg(0) != 'admin' ) || ( ! user_access( 'access CiviCRM' ) ) ) {
        return;
    }

    // The $op parameter determines what piece of information is being requested.
    global $user;
    if ($user->uid) {
        $menu_arr = civicrm_menu(true);
        if ($op == 'list') {
            $block = CRM_Core_Block::getInfo();
        } else {
            $block = CRM_Core_Block::getContent ($delta);
        }
        return $block;
    }
}

/**
 * Implementation of hook_menu().
 *
 * You must implement hook_menu() to emit items to place in the main menu.
 * This is a required step for modules wishing to display their own pages,
 * because the process of creating the links also tells Drupal what
 * callback function to use for a given URL. The menu items returned
 * here provide this information to the menu system.
 *
 * With the below menu definitions, URLs will be interpreted as follows:
 *
 * If the user accesses http://example.com/?q=foo, then the menu system
 * will first look for a menu item with that path. In this case it will
 * find a match, and execute civicrm_foo().
 *
 */
function civicrm_menu($may_cache)
{
    if ( $may_cache ) {
        civicrm_require( );
        $items = CRM_Utils_Menu::items( );
        return $items;
    } else {
        return array( );
    }
}

/**
 * Initialize CivicRM. Call this function from other modules too if 
 * they use the CivicRM API.
 *
 */
function civicrm_initialize() {
    static $initialized = false;

    if ( $initialized ) {
        return;
    }

    $initialized = true;

    civicrm_require( );

    // this does pretty much all of the civicrm initialization
    $config =& CRM_Core_Config::singleton();

    // Add module-specific stylesheet to page header
    drupal_set_html_head(civicrm_html_head());

    if(arg(0) == 'civicrm') {
        // this is just for ease of use. once the code is solid, we no longer need this
        menu_rebuild();
    }
}

function civicrm_invoke()
{
    // make sure the system is initialized
    civicrm_initialize( );

    // synchronize the drupal uid with the contacts db
    global $user;
    CRM_Core_BAO_UFMatch::synchronize( $user, false, 'Drupal' );

    $args = explode( '/', $_GET['q'] );
    $ret  = CRM_Core_Invoke::invoke( $args );
    
    return $ret;
}

/**
 * User hook for civicrm module
 *
 * @param string $type     Type of operation being performed
 * @param array  $edit     The array of form values submitted by the user.
 * @param object $user     The user object on which the operation is being performed.
 * @param object $category The active category of user information being edited.
 *
 * @return mixed           depends on the operation being performed
 */
function civicrm_user( $type, &$edit, &$user, $category = NULL ) {
    // make sure the system is initialized
    civicrm_initialize( );

    switch ( $type ) {

    case 'load':
        return civicrm_load_data($user);

    case 'login':
        return CRM_Core_BAO_UFMatch::synchronize( $user, false, 'Drupal' );

    case 'register':
        return civicrm_register_data($edit, $user, $category, true);

    case 'insert':
        return civicrm_register_data($edit, $user, $category, false);

    case 'view':
        return civicrm_view_data($user);

    case 'update':
        return civicrm_form_data($edit, $user, $category, false);

    case 'form':
        return civicrm_form_data($edit, $user, $category, true);

    case 'validate':
        return civicrm_validate_data($edit, $user, $category);

    case 'categories':
        return civicrm_categories();
    }

}

function civicrm_categories( ) {
    $ufGroups =& CRM_Core_PseudoConstant::ufGroup( );

    $data = array( );
    foreach ( $ufGroups as $id => $title ) {
        $data[] = array( 'name'  => $title,
                         'title' => $title,
                         'weight' => 5 );
    }
    return $data;
}

function civicrm_load_data(&$user) {
}

function civicrm_register_data($edit, &$user, $category, $reset) {
    $output = array( );

    if ( $user->uid ) {
        CRM_Core_BAO_UFMatch::synchronize( $user, true, 'Drupal' );
    }

    $userID = CRM_Core_BAO_UFMatch::getContactId( $user->uid );
    if ( $userID ) {
        $html = CRM_Core_BAO_UFGroup::getEditHTML( $userID, '', CRM_Core_Action::UPDATE, false, $reset );
        if ( $html ) {
            $output[] = array( 'title' => 'CiviCRM Information', 'data' => $html, weight => 0 );
        }
    } else {
        $html = CRM_Core_BAO_UFGroup::getEditHTML( $userID, '', CRM_Core_Action::ADD, true, $reset );
        if ( $html ) {
            $output[] = array( 'title' => 'CiviCRM Information', 'data' => $html, weight => 0 );
        }
    }

    return $output;
}

function civicrm_form_data($edit, &$user, $category, $reset) {
    $output = array( );

    $userID = CRM_Core_BAO_UFMatch::getContactId( $user->uid );
    if ( $userID ) {
        // get all the data for this specific category
        $html = CRM_Core_BAO_UFGroup::getEditHTML( $userID, $category, null, false, $reset );
        if ( $html ) {
            $output[] = array( 'title' => $category, 'data' => $html, weight => 0 );
        }
    }
    
    return $output;
}

function civicrm_view_data($user ) {
    $ufGroups =& CRM_Core_PseudoConstant::ufGroup( );

    $data = array( );

    $userID = CRM_Core_BAO_UFMatch::getContactId( $user->uid );
    if ( $userID ) {
        foreach ( $ufGroups as $id => $title ) {
            $data[$title] = CRM_Core_BAO_UFGroup::getEditHTML( $userID, $title, CRM_Core_Action::VIEW, false, true );
        }
    }

    return $data;
}

function civicrm_validate_data($edit, &$user, $title) {
    $register = ( $title == 'account' ) ? true : false;

    $userID = CRM_Core_BAO_UFMatch::getContactId( $user->uid );
    if ( ! CRM_Core_BAO_UFGroup::isValid( $userID, $title, $register ) ) {
        form_set_error( 'error', 'Please correct the errors in the form fields below' );
    }

    return;
}

?>
