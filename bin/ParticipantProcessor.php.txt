<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 2.3                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2009                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007.                                       |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License along with this program; if not, contact CiviCRM LLC       |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/*
 * This file check and updates the status of all participant records.
 * 
 * EventParticipantion.php prior to running this script.
 */
require_once '../civicrm.config.php';
require_once 'CRM/Core/Config.php';

class CRM_EventParticipation 
{
    function __construct( ) 
    {
        $config =& CRM_Core_Config::singleton();
        
        //this does not return on failure
        require_once 'CRM/Utils/System.php';
        require_once 'CRM/Utils/Hook.php';
        
        CRM_Utils_System::authenticateScript( true );
        $config->cleanURL = 1;
    }
    
    public function updateParticipantStatus( $sendReminders = false )
    {
        $expiredParticipantCount = $waitingConfirmCount = 0;
        
        require_once 'CRM/Event/PseudoConstant.php';
        $participantRole = CRM_Event_PseudoConstant::participantRole( );
        $pendingStatuses = CRM_Event_PseudoConstant::participantStatus( null, "class = 'Pending'"  );
        $expiredStatuses = CRM_Event_PseudoConstant::participantStatus( null, "class = 'Negative'" );
        $waitingStatuses = CRM_Event_PseudoConstant::participantStatus( null, "class = 'Waiting'"  );
        
        //build the required status ids.
        $statusIds =  '(' . implode( ',', array_merge( array_keys( $pendingStatuses ), array_keys( $waitingStatuses ) ) ) . ')';
        
        //get all participant whoes status in class pending and waiting
        $query = "
   SELECT  participant.id as participant_id,
           participant.contact_id as contact_id,
           participant.event_id as event_id,
           participant.status_id as status_id,
           participant.register_date as register_date,
           participant.fee_amount as fee_amount,
           participant.role_id as role_id,
           participant.registered_by_id as registered_by_id,
           participant.is_test as is_test
     FROM  civicrm_participant participant
    WHERE  participant.status_id IN {$statusIds}
 ORDER BY  register_date";
        
        $dao =& CRM_Core_DAO::executeQuery( $query );
        
        $participantDetails = $contactIds = $eventIds = $expiredParticipantIds = $fullEvents = array( );
        while ( $dao->fetch( ) ) {
            $participantDetails[$dao->participant_id] = array( 'id'               => $dao->participant_id,
                                                               'role'             => $participantRole[$dao->role_id],
                                                               'is_test'          => $dao->is_test,
                                                               'event_id'         => $dao->event_id,
                                                               'status_id'        => $dao->status_id,
                                                               'fee_amount'       => $dao->fee_amount, 
                                                               'contact_id'       => $dao->contact_id,
                                                               'register_date'    => $dao->register_date,
                                                               'registered_by_id' => $dao->registered_by_id
                                                               );
            
            $eventIds[$dao->event_id]     = $dao->event_id;
            $contactIds[$dao->contact_id] = $dao->contact_id;
        }
        
        if ( !empty( $contactIds ) ) {
            // making all tokens available to templates.
            require_once 'CRM/Core/BAO/Domain.php';
            require_once 'CRM/Core/SelectValues.php';
            $domain =& CRM_Core_BAO_Domain::getDomain( );
            $tokens = array ( 'domain'  => array( 'name', 'phone', 'address', 'email'),
                              'contact' => CRM_Core_SelectValues::contactTokens( ));
            
            require_once 'CRM/Utils/Token.php';
            $domainValues = array( );
            foreach( $tokens['domain'] as $token ){ 
                $domainValues[$token] = CRM_Utils_Token::getDomainTokenReplacement( $token, $domain );
            }
            
            // get the contact details.
            require_once 'CRM/Mailing/BAO/Mailing.php';
            list( $contactDetails ) = CRM_Mailing_BAO_Mailing::getDetails( $contactIds, null, false, false );
            
            
            //get all events  detail that are required.
            $allEvents = array( );
            foreach ( $eventIds as $eventId ) {
                //retrieve event information
                require_once 'CRM/Event/BAO/Event.php';
                $eventParams = array( 'id' => $eventId );
                CRM_Event_BAO_Event::retrieve( $eventParams, $allEvents[$eventId] );
                
                //get the location info
                $locParams = array( 'entity_id' => $eventId ,'entity_table' => 'civicrm_event');
                require_once 'CRM/Core/BAO/Location.php';
                CRM_Core_BAO_Location::getValues( $locParams, $allEvents[$eventId], true );
            }
            
            foreach ( $participantDetails as $participantId => $values ) {
                
                // cron 1. handle registration expiration related stuff
                $expirationTime = CRM_Utils_Array::value( 'expiration_time', $allEvents[$values['event_id']] );
                if ( $expirationTime && array_key_exists( $values['status_id'], $pendingStatuses ) ) { 
                    
                    //get the expiration and registration pending time.
                    $expirationSeconds = $expirationTime * 3600;
                    $registrationPendingSeconds = CRM_Utils_Date::unixTime( $values['register_date'] );
                    
                    // expired registration since registration cross allow confirmation time.
                    if ( ( $expirationSeconds + $registrationPendingSeconds ) < time( ) ) {
                        //set status to expired.
                        $expiredId = array_search( 'Expired', $expiredStatuses );
                        CRM_Core_DAO::setFieldValue( 'CRM_Event_DAO_Participant', $participantId, 'status_id', $expiredId );
                        $expiredParticipantCount += 1;
                        
                        //send email to  primary as well as additional participants.
                        $this->sendMail( $participantId, $values, $allEvents, $contactDetails, $domainValues, true );
                        echo "<br />- status updated to: Expired<br />";
                    }
                    //status expiration stuff complete here.
                } else if ( array_key_exists( $values['status_id'], $waitingStatuses ) && 
                            !array_key_exists( $values['event_id'], $fullEvents ) ) {
                    
                    //cron 2 : handle moving participants from waitlist to event with pending status
                    //consider only primary participants.
                    
                    if ( $waitingStatuses[$values['status_id']] == 'On waitlist' && !$values['registered_by_id'] ) {
                        //check the target event having space.
                        require_once 'CRM/Event/BAO/Participant.php';
                        $eventOpenSpaces = CRM_Event_BAO_Participant::eventFull( $values['event_id'], true, false );
                        if ( $eventOpenSpaces && is_numeric( $eventOpenSpaces ) ||  ( $eventOpenSpaces === null ) ) {
                            //get the additional participant if any.
                            $additonalParticipants = CRM_Event_BAO_Participant::getAdditionalParticipantIds( $participantId ); 
                            $requiredSpaces = 1 + count( $additonalParticipants );
                            
                            //need to check as to see if event has enough speces
                            if ( ( $requiredSpaces <= $eventOpenSpaces ) || ( $eventOpenSpaces === null ) ) {
                                //hey time to move participant to event.
                                $updateStatusId = array_search( 'Pending from waitlist', $pendingStatuses );
                                CRM_Core_DAO::setFieldValue( 'CRM_Event_DAO_Participant', $participantId, 'status_id', $updateStatusId );
                                $waitingConfirmCount += 1;
                                
                                //need to send email with confirmation link.
                                //send email to only primary participants.
                                $this->sendMail( $participantId, $values, $allEvents, $contactDetails, $domainValues, false, true  );
                                echo "<br />- status updated to: Pending from waitlist<br />";
                            } else {
                                $fullEvents[$values['event_id']] = $allEvents[$values['event_id']]['title'];
                            }
                        } else {
                            //target event is full.
                            $fullEvents[$values['event_id']] = $allEvents[$values['event_id']]['title'];
                        }
                    }
                } //cron 2 ends.
            }
        }
        
        //give statuses of crons run.
        echo "<br />{$expiredParticipantCount} participant registration has been expired.";
        echo "<br /><br />{$waitingConfirmCount} participant registration has been changed to Pending from waitlist.<br />";
        if ( !empty( $fullEvents ) ) {
            foreach ( $fullEvents as $eventId => $title ) {
                echo "<br />Full Event : {$title}";
            }
        }
    }
    
    function sendMail( $participantId, &$values, &$allEvents, &$contactDetails, 
                       &$domainValues, $isExpiredMail = false, $isConfirmMail = false ) 
    {
        if ( !array_key_exists( $values['contact_id'], $contactDetails ) ) {
            return;
        }
        
        $contactId       = $values['contact_id'];
        $participantName = $contactDetails[$contactId]['display_name'];
        
        //assign contact value to templates.
        $template =& CRM_Core_Smarty::singleton( );
        $template->assign( 'contact', $contactDetails[$contactId] );
        
        //send emails.
        if ( $toEmail = CRM_Utils_Array::value( 'email', $contactDetails[$contactId] ) ) {
            
            //assign values to template.
            $template =& CRM_Core_Smarty::singleton( );
            
            // assign domain values to template
            $template->assign( 'domain', $domainValues );
            
            //assign participant values to templates.
            $template->assign( 'participant', $values );
            
            //assign event values to templates.
            $template->assign( 'event', $allEvents[$values['event_id']] );
            
            //is it paid event
            $template->assign( 'paidEvent', CRM_Utils_Array::value( 'is_monetary', $allEvents[$values['event_id']] ) );
            
            //is show location
            $template->assign( 'isShowLocation', CRM_Utils_Array::value( 'is_show_location', 
                                                                         $allEvents[$values['event_id']] ) );
            
            //is it primary participant.
            $template->assign( 'isAdditional', $values['registered_by_id'] );
            
            //is expiraed registration mail
            $template->assign( 'isExpired', $isExpiredMail );
            
            //is it confirm mail.
            $template->assign( 'isConfirm', $isConfirmMail );
            
            //calculate the checksum value.
            $checksumValue = null;
            if ( $isConfirmMail ) {
                require_once 'CRM/Utils/Date.php';
                require_once 'CRM/Contact/BAO/Contact/Utils.php';
                $checksumLife = 'inf';
                if ( $endDate = CRM_Utils_Array::value( 'end_date',  $allEvents[$values['event_id']] )  ) {
                    $checksumLife = (CRM_Utils_Date::unixTime( $endDate )-time())/(60*60);
                }
                $checksumValue = CRM_Contact_BAO_Contact_Utils::generateChecksum( $contactId, null, $checksumLife );
            }
            $template->assign( 'checksumValue', $checksumValue );
            
            //support different templates for both mails.
            if ( $isExpiredMail ) {
                $subject = $template->fetch( 'CRM/Event/Form/ParticipationExpiredSubject.tpl' );
                $message = $template->fetch( 'CRM/Event/Form/ParticipationExpiredMessage.tpl' );
            } else {
                $subject = $template->fetch( 'CRM/Event/Form/ParticipationConfirmSubject.tpl' );
                $message = $template->fetch( 'CRM/Event/Form/ParticipationConfirmMessage.tpl' );
            }
            
            //take a receipt from as event else domain.
            if ( CRM_Utils_Array::value('confirm_from_name', $allEvents[$values['event_id']] ) && 
                 CRM_Utils_Array::value('confirm_from_email', $allEvents[$values['event_id']] ) ) {
                $receiptFrom = '"' . $allEvents[$values['event_id']]['confirm_from_name'] . '" <' . $allEvents[$values['event_id']]['confirm_from_email'] . '>';
            } else {
                $receiptFrom = '"' . $domainValues['name'] . '" <' . $domainValues['email'] . '>';
            }
            
            //send mail to participant.
            require_once 'CRM/Utils/Mail.php';
            $mailSent = CRM_Utils_Mail::send( $receiptFrom,
                                              $participantName,
                                              $toEmail,
                                              $subject,
                                              $message,
                                              CRM_Utils_Array::value( 'cc_confirm', $allEvents[$values['event_id']] ), 
                                              CRM_Utils_Array::value( 'bcc_confirm', $allEvents[$values['event_id']] ) 
                                              );
            
            // 3. create activity record.
            if ( $mailSent ) {
                $now = date( 'YmdHis' );
                $activityType = 'Event Registration';
                $activityParams = array( 'subject'            => $subject,
                                         'source_contact_id'  => $contactId,
                                         'source_record_id'   => $participantId,
                                         'activity_type_id'   => CRM_Core_OptionGroup::getValue( 'activity_type',
                                                                                                 $activityType,
                                                                                                 'name' ),
                                         'activity_date_time' => CRM_Utils_Date::isoToMysql( $now ),
                                         'due_date_time'      => CRM_Utils_Date::isoToMysql( $values['register_date'] ),
                                         'is_test'            => $values['is_test'],
                                         'status_id'          => 2
                                         );
                
                require_once 'api/v2/Activity.php';
                if ( is_a( civicrm_activity_create( $activityParams ), 'CRM_Core_Error' ) ) {
                    CRM_Core_Error::fatal("Failed creating Activity for expiration mail");
                }
                
                //set message related to mail sent.
                if ( $isConfirmMail ) {
                    echo "<br />Confirmation Mail sent to: {$participantName} - {$toEmail}";
                } else if ( $isExpiredMail ) {
                    echo "<br />Expiration Mail sent to: {$participantName} - {$toEmail}";
                }
            }
        }//email stuff end here.
    }
    
}

$obj =& new CRM_EventParticipation( );
echo "Updating<br />";
$obj->updateParticipantStatus( );
echo "<br /><br />Participant records updated. (Done)";
?>
