<?php

/*
 +--------------------------------------------------------------------+
 | CiviCRM version 2.1                                               |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2008                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007.                                       |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License along with this program; if not, contact CiviCRM LLC       |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/*
 * This file checks and updates the status of all pledge records for a
 * given domain using the updatePledgePaymentStatus.
 * 
 * It takes the first argument as the domain-id if specified, otherwise takes the domain-id as 1.
 *
 * IMPORTANT: You must set a valid FROM email address on line 147 before and then save the file as
 * UpdatePledgeRecord.php prior to running this script.
 */
require_once '../civicrm.config.php';
require_once 'CRM/Core/Config.php';

class CRM_UpdatePledgeRecord 
{
    function __construct( ) 
    {
        $config =& CRM_Core_Config::singleton();

        // this does not return on failure
        require_once 'CRM/Utils/System.php';
        require_once 'CRM/Utils/Hook.php';
        CRM_Utils_System::authenticateScript( true );

        $config->userFramework          = 'Soap';
        $config->userFrameworkClass     = 'CRM_Utils_System_Soap';
        $config->userHookClass          = 'CRM_Utils_Hook_Soap';
    }
    
    public function updatePledgeStatus( )
    {
        require_once 'CRM/Contribute/PseudoConstant.php';
        $allStatus = CRM_Contribute_PseudoConstant::contributionStatus( );
        
        //unset statues that we never use for pledges
        unset ( $allStatus[1] );
        unset ( $allStatus[3] );
        unset ( $allStatus[4] );
        $statusIds = implode(',', array_keys( $allStatus ) );
        
        $query = "
SELECT    pledge.contact_id              as contact_id,
          pledge.id                      as pledge_id,
          pledge.amount                  as amount,
          payment.scheduled_date         as scheduled_date,
          pledge.create_date             as create_date,
          payment.id                     as payment_id,
          pledge.max_reminders           as max_reminders,
          pledge.initial_reminder_day    as initial_reminder_day,
          pledge.additional_reminder_day as additional_reminder_day,
          SUM(payment.scheduled_amount)  as amount_due,
          ( SELECT sum(civicrm_pledge_payment.scheduled_amount) 
            FROM civicrm_pledge_payment 
            WHERE civicrm_pledge_payment.status_id = 1
                  AND  civicrm_pledge_payment.pledge_id = pledge.id
          ) as amount_paid
FROM      civicrm_pledge pledge, civicrm_pledge_payment payment 
WHERE     pledge.id = payment.pledge_id
  AND     payment.status_id IN ( {$statusIds} )
  AND     payment.reminder_count < pledge.max_reminders
  AND     ( 
              ( payment.reminder_date IS NULL AND 
                DATE_SUB( payment.scheduled_date , INTERVAL '-'+pledge.initial_reminder_day DAY )  <= CURRENT_TIMESTAMP ) 
           OR  
              ( DATE_ADD( payment.reminder_date , INTERVAL '+'+pledge.additional_reminder_day DAY ) <= CURRENT_TIMESTAMP ) 
           )
GROUP By  payment.id
";
        $dao =& CRM_Core_DAO::executeQuery( $query );

        $pledgeDetails = $contactIds = $pledgeIds = array( );
        while ( $dao->fetch( ) ) {
            $pledgeDetails[$dao->payment_id] = array( 'scheduled_date' => $dao->scheduled_date,
                                                      'amount_due'     => $dao->amount_due,
                                                      'amount'         => $dao->amount,
                                                      'amount_paid'    => $dao->amount_paid,
                                                      'create_date'    => $dao->create_date,
                                                      'contact_id'     => $dao->contact_id,
                                                      'pledge_id'      => $dao->pledge_id
                                                      );

            $contactIds[$dao->contact_id] = $dao->contact_id;
        }
        
        // retrieve domain tokens
        require_once 'CRM/Core/BAO/Domain.php';
        require_once 'CRM/Core/SelectValues.php';
        $domain =& CRM_Core_BAO_Domain::getDomain( );
        $tokens = array ( 'domain'  => array( 'name', 'phone', 'address', 'email'),
                          'contact' => CRM_Core_SelectValues::contactTokens( ));
          
        require_once 'CRM/Utils/Token.php';
        $domainValues = array( );
        foreach( $tokens['domain'] as $token ){ 
            $domainValues[$token] = CRM_Utils_Token::getDomainTokenReplacement( $token, $domain );
        }
        
        // retrieve contact tokens
        require_once 'CRM/Mailing/BAO/Mailing.php';
        list( $contactDetails ) = CRM_Mailing_BAO_Mailing::getDetails( $contactIds );
        
        // assign domain values to template
        $template =& CRM_Core_Smarty::singleton( );
        $template->assign( 'domain', $domainValues );
        
        //set receipt from
        $receiptFrom = '"' . $domainValues['name'] . '" <' . $domainValues['email'] . '>';

        require_once 'CRM/Pledge/BAO/Payment.php';
        // process the updating script...
        foreach ( $pledgeDetails as $paymentId => $details ) {
            echo ".";
                              
            // 1. update the pledge /pledge payment status
            CRM_Pledge_BAO_Payment::updatePledgePaymentStatus( $details['pledge_id'] );
                      
            $contactId  = $details['contact_id'];
            $toEmail    = $contactDetails[$contactId]['email'       ]; 
            $doNotEmail = $contactDetails[$contactId]['do_not_email']; 
            $onHold     = $contactDetails[$contactId]['on_hold'     ]; 
           
            // 2. send acknowledgement mail
            if ( $toEmail && ! ( $doNotEmail || $onHold ) && CRM_Utils_Date::overdue( $details['scheduled_date'], null, false ) ) {
                
                //assign value to template
                $template->assign( 'amount_paid'            , $details['amount_paid'] );
                $template->assign( 'contact'                , $contactDetails[$contactId] );
                $template->assign( 'next_payment'           , $details['scheduled_date'] );
                $template->assign( 'amount_due'             , $details['amount_due'] );
                $template->assign( 'scheduled_payment_date' , $details['scheduled_date'] );            
                $template->assign( 'amount'                 , $details['amount'] );            
                $template->assign( 'create_date'            , $details['create_date'] );                
                $message  = $template->fetch( 'CRM/Pledge/Form/ReminderMessage.tpl' );
                $subject  = $template->fetch( 'CRM/Pledge/Form/ReminderSubject.tpl' );

                //send mail to pledger
                $pledgerName = $contactDetails[$contactId]['sort_name']; 
                require_once 'CRM/Utils/Mail.php';
                $mailSent = CRM_Utils_Mail::send( $receiptFrom,
                                                  $pledgerName,
                                                  $toEmail,
                                                  $subject,
                                                  $message);
                
                // 3. update pledge payment details                                                                     
                if ( $mailSent ) {
                    CRM_Pledge_BAO_Payment::updateReminderDetails( $paymentId );
                }

            }
        }
     }
}

$obj =& new CRM_UpdatePledgeRecord( );
echo "\n Updating ";
$obj->updatePledgeStatus( );
echo "\n\n Pledge records updated. (Done) \n";
?>
