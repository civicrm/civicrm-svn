<?php

/*
 +--------------------------------------------------------------------+
 | CiviCRM version 2.1                                               |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2008                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007.                                       |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License along with this program; if not, contact CiviCRM LLC       |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/*
 * This file checks and updates the status of all pledge records for a
 * given domain using the updatePledgePaymentStatus.
 * 
 * It takes the first argument as the domain-id if specified, otherwise takes the domain-id as 1.
 *
 * IMPORTANT: You must set a valid FROM email address on line 147 before and then save the file as
 * UpdatePledgeRecord.php prior to running this script.
 */
require_once '../civicrm.config.php';
require_once 'CRM/Core/Config.php';

require_once 'CRM/Contact/DAO/Contact.php';
require_once "CRM/Utils/Date.php";
require_once 'api/utils.php';

require_once 'api/v2/Contact.php';
require_once 'api/Relationship.php';
require_once 'api/Event.php';

class CRM_UpdatePledgeRecord {
    
    function __construct() 
    {
        $config =& CRM_Core_Config::singleton();

        // this does not return on failure
        require_once 'CRM/Utils/System.php';
        require_once 'CRM/Utils/Hook.php';
        CRM_Utils_System::authenticateScript( true );

        $config->userFramework          = 'Soap';
        $config->userFrameworkClass     = 'CRM_Utils_System_Soap';
        $config->userHookClass          = 'CRM_Utils_Hook_Soap';
    }
    
    public function updatePledgeStatus( )
    {
        require_once 'CRM/Contribute/PseudoConstant.php';
        $allStatus = CRM_Contribute_PseudoConstant::contributionStatus( );
        $reqStatus = array ('Pending', 'In Progress', 'Overdue');
        
        foreach ($reqStatus as $Status) {
            $pstatus[] = array_search( $Status, $allStatus );
            if ($Status != 'In Progress') {
                $status[] = array_search( $Status, $allStatus );
            }
        }
        
        $pstatusId = implode(',', $pstatus);
        $statusId  = implode(',', $status);
        
        $query = "
SELECT    cp.contact_id              as contact_id,
          cc.sort_name               as first_name,
          cp.id                      as pledge_id,
          cp.amount                  as amount,
          pp.scheduled_date          as scheduled_date,
          cp.create_date             as create_date,
          pp.id                      as payment_id,
          cp.max_reminders           as max_reminders,
          cp.initial_reminder_day    as initial_reminder_day,
          cp.additional_reminder_day as additional_reminder_day,
          SUM(pp.scheduled_amount)   as amount_due
FROM      civicrm_contact cc
LEFT JOIN civicrm_pledge cp ON ( cc.id = cp.contact_id )
LEFT JOIN civicrm_pledge_payment pp ON ( cp.id = pp.pledge_id )
WHERE     pp.status_id IN ( {$statusId} ) AND cp.status_id IN ( {$pstatusId} )
AND       pp.reminder_count < cp.max_reminders
AND       ( pp.reminder_date IS NULL 
AND       ( DATE_ADD( pp.scheduled_date , INTERVAL '+'+cp.initial_reminder_day DAY )  >= CURRENT_TIMESTAMP ) 
OR        ( DATE_ADD( pp.reminder_date , INTERVAL '+'+cp.additional_reminder_day DAY ) >= CURRENT_TIMESTAMP ) )
GROUP By  pp.pledge_id
";
        $params = array( );
        $dao    =& CRM_Core_DAO::executeQuery( $query, $params );
        
        while ( $dao->fetch( ) ) {
            $contactId[] = $dao->contact_id;
            $pledgeIds[] = $dao->pledge_id;
            
            require_once 'CRM/Contact/BAO/Contact.php';
            require_once 'CRM/Contact/BAO/Contact/Location.php';
            
            list( $pledgerName, 
                  $toEmail ) = CRM_Contact_BAO_Contact_Location::getEmailDetails( $dao->contact_id );
            
            $contact['first_name'] = $dao->first_name;
            
            require_once 'CRM/Core/BAO/Domain.php';
            $domain =& CRM_Core_BAO_Domain::getDomain( );
            $tokens = array ( 'domain'  => array( 'name', 'phone', 'address', 'email'),
                              'contact' => CRM_Core_SelectValues::contactTokens( ));
            
            require_once 'CRM/Utils/Token.php';
            foreach( $tokens['domain'] as $token ){ 
                $domainValues[$token] = CRM_Utils_Token::getDomainTokenReplacement( $token, $domain );
            }
            
            $amountPaid = $dao->amount - $dao->amount_due;
            
            //assign value to template
            $template =& CRM_Core_Smarty::singleton( );
            
            $template->assign( 'domain'                 , $domainValues );
            $template->assign( 'contact'                , $contact );
            $template->assign( 'next_payment'           , $dao->scheduled_date );
            $template->assign( 'amount_due'             , $dao->amount_due );
            $template->assign( 'scheduled_payment_date' , $dao->scheduled_date );            
            $template->assign( 'amount'                 , $dao->amount );            
            $template->assign( 'create_date'            , $dao->create_date );            
            $template->assign( 'amount_paid'            , $amountPaid );            
            
            //fetching from template
            $message = $template->fetch( 'CRM/Pledge/Form/ReminderMessage.tpl' );
            $subject = $template->fetch( 'CRM/Pledge/Form/ReminderSubject.tpl' );
            
            if ( $toEmail ) {
                // Send Mail to the contact with found emailIds.
                $receiptFrom = '"' . $domainValues['name'] . '" <' . $domainValues['email'] . '>';

                require_once 'CRM/Utils/Mail.php';
                CRM_Utils_Mail::send( $receiptFrom,
                                      $pledgerName,
                                      $toEmail,
                                      $subject,
                                      $message);
            }
        }
        
        //Set status in pledge & pledge_payment to Overdue if date crossed the scheduled date and next payment is done.
        if ( !empty ( $pledgeIds ) ) {
            require_once 'CRM/Pledge/BAO/Payment.php';
            foreach ( $pledgeIds as $key => $id ) {
                CRM_Pledge_BAO_Payment::updatePledgePaymentStatus( $id );
            }
        }
    }
}

$obj =& new CRM_UpdatePledgeRecord( );
echo "\n Updating ";
$obj->updatePledgeStatus( );
echo "\n\n Pledge records updated. (Done) \n";
?>
