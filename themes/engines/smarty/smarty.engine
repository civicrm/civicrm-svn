<?php

/**
 * Execute a template engine call.
 *
 * Each call to the template engine has two parts. Namely preparing
 * the variables, and then doing something with them.
 *
 * The first step is done by all template engines / themes, the second
 * step is dependent on the engine used.
 *
 * @param $hook
 *   The name of the theme function being executed
 * @param $params
 *   A sequential array of variables passed to the theme function.
 * @return
 *  The HTML generated by the template system.
 */
function _smarty_callback($hook, $vars = array()) {

  // Allow specified variables to be overridden
  if (function_exists('_smarty_variables')) {
    $vars = array_merge($vars, _smarty_variables($hook, $vars));
  }
  
  if (function_exists('_smarty_' . $hook)) {
    return call_user_func('_smarty_' . $hook, $vars);
  }
  elseif (function_exists('_smarty_default')) {
    return call_user_func('_smarty_default', $vars, $hook);
  }
  
}

function smarty_init($template) {
  require_once(realpath('themes/engines/smarty/SmartyTemplate.php'));
  $engine_code = variable_get('smarty_extra_logic', array());

  if ($file = $engine_code[dirname($template->filename) . '/template.php']) {
    include_once($file);    
  }
}


function smarty_templates($directory) {
  $templates = file_scan_directory($directory, 'page.tpl$');

  $extra = variable_get('smarty_extra_templates', array());
  $engine_code = variable_get('smarty_extra_logic', array());

  if (is_array($templates)) {
    foreach ($templates as $template) {
      $templateDir = dirname($template->filename);
      $extra[$templateDir] = file_scan_directory($templateDir, '.tpl$');

      $smartyTemplate = $templateDir . '/SmartyTemplate.php';
      if (file_exists($smartyTemplate)) {
        $engine_code[$smartyTemplate] = $smartyTemplate;
      }
    }
  }

  variable_set('smarty_extra_templates', $extra);
  variable_set('smarty_extra_logic', $engine_code);
  return $templates;
}

function smarty_features() {
  return array(
       'logo',
       'toggle_name',
       'toggle_search',
       'toggle_slogan',
       'toggle_mission',
       'toggle_primary_links',
       'toggle_secondary_links',
       'toggle_node_user_picture',
       'toggle_comment_user_picture');
}


/**
 * Smarty specific theme settings
 *
 * Due to differences in the handling of primary and secondary links,
 * these settings need to be seperately specified for smarty based themes.
 * 
 * @returns 
 *   HTML code for the smarty engine specific form segment on theme configuration pages.
 */
function smarty_settings() {
  $form = form_textarea(t('Primary links'), "smarty_primary_links", variable_get('smarty_primary_links', ''), 70, 8, t('In the format: <strong>text:url; more text:url</strong>'));
  $form .= form_textarea(t('Secondary links'), "smarty_secondary_links", variable_get('smarty_secondary_links', ''), 70, 8, t('In the format: <strong>text:url; more text:url</strong>'));

  return $form;
}

/**
 * Prepare the values passed to the theme_page function to be passed
 * into a pluggable template engine. 
 */
function smarty_page($content, $title = NULL, $breadcrumb = NULL) {
  /* Set title and breadcrumb to declared values */
  if (isset($title)) {
    drupal_set_title($title);
  }
  if (isset($breadcrumb)) {
    drupal_set_breadcrumb($breadcrumb);
  }
  
  if ($_GET['q'] == variable_get('site_frontpage', 'node')) {
    $mission = theme_get_setting('mission');
    $frontpage = true;
  }
 
  /** 
   * These links are being exploded to allow l() to tag them with class=active. This is
   * needed for css tabs. 
   */ 
   $primary_links = array();
   $secondary_links = array();

  if (theme_get_setting('toggle_primary_links')) {
    $links =  explode(";", variable_get('smarty_primary_links', ''));
    if (is_array($links) && !empty($links[0]))  {
      foreach ($links as $link) {
        $split = explode(":", $link);
        if (is_array($split)) {
          $primary_links[] = l($split[0], $split[1]);
        }
        else {
          $primary_links[] = $link;
        }
      }
    } else {
      $primary_links = link_page();
    }
  }

  if (theme_get_setting('toggle_secondary_links')) {
    $links =  explode(";", variable_get('smarty_secondary_links', '')); 
    if (is_array($links) && !empty($links[0]))  {
      foreach ($links as $link) {
        $split = explode(":", $link);
        if (is_array($split)) {
          $secondary_links[] = l($split[0], $split[1]);
        }
        else {
          $secondary_links[] = $link;
        }
      }
    }
    else {
      $secondary_links = '';
    }
  }
  
  /**
  * Populate sidebars.
  */
  $layout = "none";

  $sidebar_left = theme("blocks", "left");
  if ($sidebar_left != "") {
    $layout = "left";
  }

  $sidebar_right = theme("blocks", "right");
  if ($sidebar_right != "") {
    $layout = ($layout == "left") ? "both" : "right";
  }


  $vars = array(
    'head_title'          => (drupal_get_title() ? drupal_get_title() .' | '. variable_get('site_name', 'drupal') : variable_get('site_name', 'drupal') .' | '. variable_get('site_slogan', '')),
    'language'            => $GLOBALS['locale'],
    'site'                => variable_get('site_name', 'drupal'),
    'head'                => drupal_get_html_head(),
    'onload_attributes'   => theme_onload_attribute(),
    'directory'           => path_to_theme(),
    'logo'                => theme_get_setting('logo'),
    'site_name'           => (theme_get_setting('toggle_name') ? variable_get('site_name', '') : ''),
    'site_slogan'         => (theme_get_setting('toggle_slogan') ? variable_get('site_slogan', '') : ''),
    'search_box'          => theme_get_setting('toggle_search'),
    'search_url'          => url('search'),
    'search_button_text'  => t('search'),
    'search_description'  => t('Enter the terms you wish to search for.'),
    'title'               => drupal_get_title(), 
    'primary_links'       => $primary_links,
    'secondary_links'     => $secondary_links,
    'breadcrumb'          => theme('breadcrumb', drupal_get_breadcrumb()),
    'tabs'                => theme('menu_local_tasks'),
    'messages'            => theme_status_messages(),
    'layout'              => $layout,
    'help'                => menu_get_active_help(),
    'styles'              => theme_get_styles(),
    'mission'             => $mission,
    'is_front'            => $frontpage,
    'sidebar_left'        => $sidebar_left,
    'content'             => '<!-- begin content -->' . $content . '<!-- end content -->',
    'sidebar_right'       => $sidebar_right,
    'footer_message'      => variable_get('site_footer', FALSE),
    'closure'             => theme('closure')
  );

  return _smarty_callback('page', $vars);
}

/**
 * Prepare the values passed to the theme_node function to be passed
 * into a pluggable template engine. 
 */
function smarty_node($node, $main = 0, $page = 0) {
  $taxonomy = taxonomy_link('taxonomy terms', $node);
  $links = link_node($node, $main);
  $vars = array(
      'title'          => $node->title,
      'node_url'       => url('node/' . $node->nid),
      'terms'          => theme('links',$taxonomy),
      'name'           => format_name($node),
      'date'           => format_date($node->created),
      'sticky'         => $node->sticky,
      'picture'        => theme_get_setting('toggle_node_user_picture') ? theme('user_picture', $node) : '',
      'content'        => ($main && $node->teaser) ? $node->teaser : $node->body,
      'links'          => ($links != '') ? theme('links', $links) : '',
      'mission'        => $mission,
      'page'           => $page,
      'taxonomy'       => $taxonomy,

    /* Lastly , pass the actual node to allow more customization */
      'node'           => $node,
      'main'           => $main,
      'page'           => $page
    );

  // Display info only on certain node types. 
  if (theme_get_setting('toggle_node_info_' . $node->type)) {
    $vars['submitted'] =  t('Submitted by %a on %b.', array('%a' => format_name($node), '%b' => format_date($node->created)));
  }

  return _smarty_callback('node', $vars);
}

/**
 * Prepare the values passed to the theme_comment function to be passed
 * into a pluggable template engine. 
 */
function smarty_comment($comment, $links = 0) {
  return _smarty_callback('comment', array(
    'new'       => $comment->new ? t('new') : '',
    'comment'   => $comment,
    'submitted' => t('Submitted by %a on %b.',
                      array('%a' => format_name($comment),
                            '%b' => format_date($comment->timestamp))),
    'title'     => l($comment->subject, $_GET['q'], NULL, NULL, "comment-$comment->cid"),

    'picture'   => theme_get_setting('toggle_comment_user_picture') ? theme('user_picture', $comment) : '',
    'links'     => $links,
    'content'   => $comment->comment,
    'author'    => format_name($comment),
    'date'      => format_date($comment->timestamp)
  ));
}

/**
 * Prepare the values passed to the theme_block function to be passed
 * into a pluggable template engine. 
 */
function smarty_block($block) {
  return _smarty_callback('block', array('block' => $block));
}

function smarty_form_element($title, $value, $description = NULL, $id = NULL, $required = FALSE, $error = FALSE) {
  $required = $required ? theme('mark') : '';
  
  return _smarty_callback('form_element',
                           array(
						    'required' => $required,
							'title'    => $title,
							'id'       => $id,
							'value'    => $value,
							'description' => $description
							) );
}

/**
 * Prepare the values passed to the theme_box function to be passed
 * into a pluggable template engine. 
 */
function smarty_box($title, $content, $region = 'main') {
  return _smarty_callback('box', array(
    'title'   =>   $title,
    'content' =>   $content,
    'region'  =>   $region
  ));
}


/** 
 * Default callback for Smarty.
 */
function _smarty_default($vars, $hook, $file = null) {
  global $smarty, $template;
  $extras = variable_get('smarty_extra_templates', array());

  if (!($file = $extras[path_to_theme()][path_to_theme() . "/$hook.tpl"]->filename)) {
  print($file); 
    if (in_array($hook, array('node', 'block', 'box', 'comment', 'form_element'))) {
      $file = "themes/engines/smarty/$hook.tpl";
    }
    else {
      $vars['hook'] = $hook;
      $file = "themes/engines/smarty/default.tpl";
    }
  }

  if ($file) {
    $smarty[$hook] = SmartyTemplate::instance(); 
    $smarty[$hook]->clear_all_assign();
    $smarty[$hook]->set_vars($vars);
    return $smarty[$hook]->fetch(basename($file), dirname($file));
  }
}

?>
