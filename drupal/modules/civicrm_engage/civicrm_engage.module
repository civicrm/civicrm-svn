<?php

/*
 +--------------------------------------------------------------------+
 | CiviCRM version 3.1                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2009                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007.                                       |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License along with this program; if not, contact CiviCRM LLC       |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2009
 * $Id$
 *
 */

define( 'CIVICRM_ENGAGE_DEMOGRAPHICS_ID'    , 2 );
define( 'CIVICRM_ENGAGE_DEMOGRAPHICS_PREFIX', 'demographics_' );
define( 'CIVICRM_ENGAGE_DEMOGRAPHICS_TITLE' , 'Demographic Data' );
define( 'CIVICRM_ENGAGE_TASK_VOTER_RESERVE' , 30 );

function civicrm_engage_civicrm_buildForm( $formName, &$form ) {
    
    civicrm_engage_manageTasks( $formName, $form );

    if ( $formName == 'CRM_Contact_Form_Contact' ) {
        $groupTree =& CRM_Core_BAO_CustomGroup::getTree( 'Contact',
                                                         $form,
                                                         $form->getVar( 'id' ),
							 CIVICRM_ENGAGE_DEMOGRAPHICS_ID,
                                                         null, null );

        // we should use simplified formatted groupTree
        $groupTree = CRM_Core_BAO_CustomGroup::formatGroupTree( $groupTree, 1, $form );

        if ( isset($groupTree) && is_array($groupTree) ) {
            $defaults = array( );
            CRM_Core_BAO_CustomGroup::setDefaults( $groupTree, $defaults);
            $form->setDefaults( $defaults );
            
            CRM_Core_BAO_CustomGroup::buildQuickForm( $form, $groupTree, false, 1,
                                                      CIVICRM_ENGAGE_DEMOGRAPHICS_PREFIX );
        }
    }
}

function civicrm_engage_civicrm_postProcess( $class, &$form ) {
    if ( is_a( $form, 'CRM_Contact_Form_Contact' ) ) {
        $groupTree =& CRM_Core_BAO_CustomGroup::getTree( 'Contact',
                                                         $form,
                                                         $form->getVar( 'id' ),
							 CIVICRM_ENGAGE_DEMOGRAPHICS_ID,
                                                         null, null );

        // we should use simplified formatted groupTree
        $groupTree = CRM_Core_BAO_CustomGroup::formatGroupTree( $groupTree, 1, $form );

        if ( isset($groupTree) && is_array($groupTree) ) {
            require_once 'CRM/Core/BAO/CustomValueTable.php';
            CRM_Core_BAO_CustomValueTable::postProcess( $form->controller->exportValues( $form->getVar( '_name' ) ),
                                                        $groupTree[CIVICRM_ENGAGE_DEMOGRAPHICS_ID]['fields'],
                                                        'civicrm_contact',
                                                        $form->getVar( '_contactId' ),
                                                        'Contact' );
        }
    }
}

function civicrm_engage_civicrm_pageRun( &$page ) {
    if ( $page->getVar( '_name' ) == 'CRM_Contact_Page_View_Summary' ) {
        $groupTree =& CRM_Core_BAO_CustomGroup::getTree( 'Contact',
                                                         $page,
                                                         $page->getVar( '_contactId' ),
                                                         CIVICRM_ENGAGE_DEMOGRAPHICS_ID,
                                                         null, null );

        
        CRM_Core_BAO_CustomGroup::buildCustomDataView( $page,
                                                       $groupTree,
                                                       false, null,
                                                       CIVICRM_ENGAGE_DEMOGRAPHICS_PREFIX );
    }
}

function civicrm_engage_civicrm_tabs( &$tabs, $contactID ) {
    foreach ( $tabs as $tabID => $tabValue ) {
        if ( $tabValue['title'] == CIVICRM_ENGAGE_DEMOGRAPHICS_TITLE ) {
            unset( $tabs[$tabID] );
        }
    }
}

function civicrm_engage_civicrm_searchTasks( $objectType, &$tasks ) {
    if ( $objectType == 'contact' ) {
        $tasks[CIVICRM_ENGAGE_TASK_VOTER_RESERVE] = array( 'title'  => ts('Voter Reservation'),
                            'class'  => 'Engage_Contact_Form_Task_VoterReservation',
                            'result' => true );
    }
}

function civicrm_engage_manageTasks( $formName, &$form ) {

    if ( (substr_count( $formName , '_Search_' ) > 0) && 
         $form->elementExists( 'task' ) ) {
        $element =& $form->getElement('task');
        
        $isFindVoter = false;
        if ( ($form->getVar('_name') == 'Custom') &&
             ($form->getVar('_customSearchClass') == 'Engage_Contact_Form_Search_Custom_FindVoters' ) ) {
            $isFindVoter = true;
        }

        if ( $element->getType() == 'select' ) {
            if ( $isFindVoter ) {
                $form->removeElement('task');
                $element =& $form->add( 'hidden', 'task' );
                $element->setValue(CIVICRM_ENGAGE_TASK_VOTER_RESERVE);
               
                $elementSubmit =& $form->getElement('_qf_Custom_next_action');
                $form->updateElementAttr( '_qf_Custom_next_action' , array( 'onClick' => 'return true;'));
                $elementSubmit->setValue(ts('Reserve Voters'));
                return true;
            }
            foreach ( $element->_options as $index => $options ) {
                if ( $options['attr']['value'] == CIVICRM_ENGAGE_TASK_VOTER_RESERVE ) {
                    unset( $element->_options[$index]  );
                    return false;
                }
            }
        }
        return false;
    }
}