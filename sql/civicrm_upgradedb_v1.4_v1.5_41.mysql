-- /*******************************************************
-- *
-- * civicrm_option_group
-- *
-- *******************************************************/
CREATE TABLE civicrm_option_group (


     id int unsigned NOT NULL AUTO_INCREMENT  COMMENT 'Option Group ID',
     domain_id int unsigned NOT NULL   COMMENT 'Which domain owns this group of options.',
     name varchar(64) NOT NULL   COMMENT 'Option group name. Used as selection key by class properties which lookup options in civicrm_option_value.',
     description varchar(255)    COMMENT 'Option group description.',
     is_reserved tinyint    COMMENT 'Is this a predefined system option group (i.e. it can not be deleted)?',
     is_active tinyint    COMMENT 'Is this option group active?' 
,
    PRIMARY KEY ( id )
 
    ,     UNIQUE INDEX option_group_name_domain_id(
        name
      , domain_id
  )
  
,      
     FOREIGN KEY (domain_id) REFERENCES civicrm_domain(id)
  
)  ENGINE=InnoDB DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci  ;


-- /*******************************************************
-- *
-- * civicrm_option_value
-- *
-- *******************************************************/
CREATE TABLE civicrm_option_value (


     id int unsigned NOT NULL AUTO_INCREMENT  COMMENT 'Option ID',
     option_group_id int unsigned NOT NULL   COMMENT 'Group which this option belongs to.',
     label varchar(64) NOT NULL   COMMENT 'Option string as displayed to users - e.g. the label in an HTML OPTION tag.',
     value int unsigned NOT NULL   COMMENT 'The actual value stored (as a foreign key) in the data record. Functions which need lookup option_value.title should use civicrm_option_value.option_group_id plus civicrm_option_value.value as the key.',
     name varchar(64)    COMMENT 'May be used to store an option string that is different from the display title. One use case is when a non-translated value needs to be set / sent to another application (e.g. for Credit Card type).',
     grouping varchar(64)    COMMENT 'Use to sort and/or set display properties for sub-set(s) of options within an option group. EXAMPLE: Use for college_interest field, to differentiate partners from non-partners.',
     filter int unsigned NOT NULL   COMMENT 'Bitwise logic can be used to create subsets of options within an option_group for different uses.',
     is_default tinyint   DEFAULT 0 COMMENT 'Is this the default option for the group?',
     weight int unsigned NOT NULL   COMMENT 'Controls display sort order.',
     description varchar(255)    COMMENT 'Optional description.',
     is_optgroup tinyint   DEFAULT 0 COMMENT 'Is this row simply a display header? Expected usage is to render these as OPTGROUP tags within a SELECT field list of options?',
     is_reserved tinyint   DEFAULT 0 COMMENT 'Is this a predefined system object?',
     is_active tinyint   DEFAULT 1 COMMENT 'Is this option active?' 
,
    PRIMARY KEY ( id )
 
    ,     INDEX index_option_group_id_value(
        value
      , option_group_id
  )
  
,      
     FOREIGN KEY (option_group_id) REFERENCES civicrm_option_group(id)
  
)  ENGINE=InnoDB DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci  ;

-- /*******************************************************
-- *
-- * civicrm_file
-- *
-- * Data store for uploaded (attached) files (pointer to file on disk OR blob). Maybe be joined to entities via custom_value.file_id or entity_file table.
-- *
-- *******************************************************/
CREATE TABLE civicrm_file (


     id int unsigned NOT NULL AUTO_INCREMENT  COMMENT 'Unique ID',
     file_type_id int unsigned    COMMENT 'Type of file (e.g. Transcript, Income Tax Return, etc). FK to civicrm_option_value.',
     mime_type varchar(255)    COMMENT 'mime type of the document',
     uri varchar(255)    COMMENT 'uri of the file on disk',
     document mediumblob    COMMENT 'contents of the document',
     description varchar(255)    COMMENT 'Additional descriptive text regarding this attachment (optional).',
     upload_date datetime    COMMENT 'Date and time that this attachment was uploaded or written to server.' 
,
    PRIMARY KEY ( id )
 
 
,      
     FOREIGN KEY (file_type_id) REFERENCES civicrm_option_value(value)
  
)  ENGINE=InnoDB DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci  ;


-- /*******************************************************
-- *
-- * civicrm_entity_file
-- *
-- * Attaches (joins)  uploaded files (images, documents, etc.) to entities (Contacts, Groups, Actions).
-- *
-- *******************************************************/
CREATE TABLE civicrm_entity_file (


     id int unsigned NOT NULL AUTO_INCREMENT  COMMENT 'primary key',
     entity_table varchar(64)    COMMENT 'physical tablename for entity being joined to file, e.g. civicrm_contact',
     entity_id int unsigned NOT NULL   COMMENT 'FK to entity table specified in entity_table column.',
     file_id int unsigned NOT NULL   COMMENT 'FK to civicrm_file' 
,
    PRIMARY KEY ( id )
 
    ,     INDEX index_entity(
        entity_table
      , entity_id
  )
  ,     INDEX index_entity_file_id(
        entity_table
      , entity_id
      , file_id
  )
  
,      
     FOREIGN KEY (file_id) REFERENCES civicrm_file(id)
  
)  ENGINE=InnoDB DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci  ;

-- /*******************************************************
-- *
-- * civicrm_membership
-- *
-- * Contact Membership records.
-- *
-- *******************************************************/
CREATE TABLE civicrm_membership (


     id int unsigned NOT NULL AUTO_INCREMENT  COMMENT 'Membership Id',
     contact_id int unsigned NOT NULL   COMMENT 'FK to Contact ID',
     membership_type_id int unsigned NOT NULL   COMMENT 'FK to Membership Type',
     join_date date    COMMENT 'Beginning of initial membership period',
     start_date date    COMMENT 'Latest membership period start/renew date',
     end_date date    COMMENT 'Latest membership period expire date',
     source varchar(128)    ,
     calculated_status_id int unsigned NOT NULL   COMMENT 'FK to Membership Status',
     override_status_id int unsigned    COMMENT 'Admin users may set a manual status which overrides the calculated status. FK to Membership Status' 
,
    PRIMARY KEY ( id )
 
 
,      
     FOREIGN KEY (contact_id) REFERENCES civicrm_contact(id)
,      
     FOREIGN KEY (membership_type_id) REFERENCES civicrm_membership_type(id)
,      
     FOREIGN KEY (calculated_status_id) REFERENCES civicrm_membership_status(id)
,      
     FOREIGN KEY (override_status_id) REFERENCES civicrm_membership_status(id)
  
)  ENGINE=InnoDB DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci  ;


-- /*******************************************************
-- *
-- * civicrm_membership_type
-- *
-- * A Membership Types encode the rules needed to set start and end (expire) dates when a member signs up for that type
-- *
-- *******************************************************/
CREATE TABLE civicrm_membership_type (


     id int unsigned NOT NULL AUTO_INCREMENT  COMMENT 'Membership Id',
     name varchar(128)    COMMENT 'Name of Membership Type',
     description varchar(255)    COMMENT 'Description of Membership Type',
     member_of_contact_id int unsigned NOT NULL   COMMENT 'FK to Contac ID',
     contribution_type_id int unsigned NOT NULL   COMMENT 'FK to Contribution Type ID',
     minimum_fee decimal(20,2)   DEFAULT 0 COMMENT 'Free/complimentary memberships',
     duration_unit enum('day', 'month', 'year', 'lifetime')    COMMENT 'Duration of this Membership',
     duration_interval int    COMMENT 'units in the duration',
     period_type enum('rolling', 'fixed')    COMMENT 'Period Type at date of payment',
     fixed_period_start_day int   DEFAULT 0101 COMMENT 'Fixed period on which subscription/membership will start',
     fixed_period_rollover_day date    COMMENT 'Fixed Membership Payments after this date',
     relationship_type_id int unsigned    COMMENT 'FK to Relationship Type ID',
     visibility varchar(64)    ,
     is_default tinyint   DEFAULT 0 ,
     weight int    ,
     is_active tinyint   DEFAULT 1 COMMENT 'Is this membership_type enabled' 
,
    PRIMARY KEY ( id )
 
 
,      
     FOREIGN KEY (member_of_contact_id) REFERENCES civicrm_contact(id)
,      
     FOREIGN KEY (contribution_type_id) REFERENCES civicrm_contribution_type(id)
,      
     FOREIGN KEY (relationship_type_id) REFERENCES civicrm_relationship_type(id)
  
)  ENGINE=InnoDB DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci  ;

-- /*******************************************************
-- *
-- * civicrm_membership_status
-- *
-- * A Membership Status stores admin configurable status options and rules
-- *
-- *******************************************************/
CREATE TABLE civicrm_membership_status (


     id int unsigned NOT NULL AUTO_INCREMENT  COMMENT 'Membership Id',
     name varchar(128)    COMMENT 'Name for Membership Status',
     start_event enum('start_date', 'end_date', 'join_date')    COMMENT 'Event when this status starts',
     start_event_adjust_unit enum('day', 'month', 'year')    COMMENT 'Unit used for adjusting',
     start_event_adjust_interval int    COMMENT 'Range begins this many units from start_event',
     end_event enum('start_date', 'end_date', 'join_date')    COMMENT 'Event after which this status ends',
     end_event_adjust_unit enum('day', 'month', 'year')    COMMENT 'Unit used for adjusting from the ending event ',
     end_event_adjust_interval int    COMMENT 'Range ends this many units from end_event',
     is_current_member tinyint    ,
     is_admin tinyint    ,
     weight int    ,
     is_active tinyint   DEFAULT 1 COMMENT 'Is this membership_type enabled' 
,
    PRIMARY KEY ( id )
 
 
 
)  ENGINE=InnoDB DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci  ;


-- /*******************************************************
-- *
-- * civicrm_log
-- *
-- * Log can be linked to any object in the application.
-- *
-- *******************************************************/
CREATE TABLE civicrm_log (


     id int unsigned NOT NULL AUTO_INCREMENT  COMMENT 'Log ID',
     entity_table varchar(64) NOT NULL   COMMENT 'Name of table where item being referenced is stored.',
     entity_id int unsigned NOT NULL   COMMENT 'Foreign key to the referenced item.',
     data text    COMMENT 'Updates does to this object if any.',
     modified_id int unsigned    COMMENT 'FK to Contact ID creator',
     modified_date datetime    COMMENT 'When was this object created' 
,
    PRIMARY KEY ( id )
 
    ,     INDEX index_entity(
        entity_table
      , entity_id
  )
  
,      
     FOREIGN KEY (modified_id) REFERENCES civicrm_contact(id)
  
)  ENGINE=InnoDB DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci  ;

-- /*******************************************************
-- *
-- * civicrm_task
-- *
-- * To-do items. Can be assigned to self or other entities.
-- *
-- *******************************************************/
CREATE TABLE civicrm_task (


     id int unsigned NOT NULL AUTO_INCREMENT  COMMENT 'Task ID',
     domain_id int unsigned NOT NULL   COMMENT 'Which Domain owns this record.',
     title varchar(64)    COMMENT 'Task name.',
     description varchar(255)    COMMENT 'Optional verbose description of the Task. May be used for display - HTML allowed.',
     task_type_id int unsigned    COMMENT 'Configurable task type values (e.g. App Submit, App Review...). FK to civicrm_option_value.',
     owner_entity_table varchar(64) NOT NULL   COMMENT 'Name of table where Task owner being referenced is stored (e.g. civicrm_contact or civicrm_group).',
     owner_entity_id int unsigned NOT NULL   COMMENT 'Foreign key to Task owner (contact, group, etc.).',
     parent_entity_table varchar(64)    COMMENT 'Name of table where optional Task parent is stored (e.g. civicrm_project, or civicrm_task for sub-tasks).',
     parent_entity_id int unsigned    COMMENT 'Optional foreign key to Task Parent (project, another task, etc.).',
     due_date datetime    COMMENT 'Task due date.',
     priority_id int unsigned    COMMENT 'Configurable priority value (e.g. Critical, High, Medium...). FK to civicrm_option_value.',
     task_class varchar(255)    COMMENT 'Optional key to a process class related to this task (e.g. CRM_Quest_PreApp).',
     is_active tinyint    COMMENT 'Is this record active? For tasks: can it be assigned, does it appear on open task listings, etc.' 
,
    PRIMARY KEY ( id )
 
    ,     UNIQUE INDEX UI_task_parent(
        id
      , parent_entity_table
      , parent_entity_id
  )
  ,     UNIQUE INDEX UI_task_owner(
        id
      , owner_entity_table
      , owner_entity_id
  )
  
,      
     FOREIGN KEY (domain_id) REFERENCES civicrm_domain(id)
,      
     FOREIGN KEY (task_type_id) REFERENCES civicrm_option_value(value)
,      
     FOREIGN KEY (priority_id) REFERENCES civicrm_option_value(id)
  
)  ENGINE=InnoDB DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci  ;



-- /*******************************************************
-- *
-- * civicrm_task_status
-- *
-- * Tracks the responsible entity, optional target entity and status of a task. Tasks can have multiple task_status entries if assigned to multiple responsible entities and-or there are multiple targets.
-- *
-- *******************************************************/
CREATE TABLE civicrm_task_status (


     id int unsigned NOT NULL AUTO_INCREMENT  COMMENT 'Task ID',
     task_id int unsigned NOT NULL   COMMENT 'Status is for which task.',
     responsible_entity_table varchar(64) NOT NULL   COMMENT 'Entity responsible for this task_status instance (table where entity is stored e.g. civicrm_contact or civicrm_group).',
     responsible_entity_id int unsigned NOT NULL   COMMENT 'Foreign key to responsible entity (contact, group, etc.).',
     target_entity_table varchar(64) NOT NULL   COMMENT 'Optional target entity for this task_status instance, i.e. review this membership application-prospect member contact record is target (table where entity is stored e.g. civicrm_contact or civicrm_group).',
     target_entity_id int unsigned NOT NULL   COMMENT 'Foreign key to target entity (contact, group, etc.).',
     status_detail text    COMMENT 'Encoded array of status details used for programmatic progress reporting and tracking.',
     status_id int unsigned    COMMENT 'Configurable status value (e.g. Not Started, In Progress, Completed, Deferred...). FK to civicrm_option_value.',
     create_date datetime    COMMENT 'Date this record was created (date work on task started).',
     modified_date datetime    COMMENT 'Date-time of last update to this task_status record.' 
,
    PRIMARY KEY ( id )
 
    ,     INDEX index_task_status_responsible(
        task_id
      , responsible_entity_table
      , responsible_entity_id
  )
  ,     INDEX index_task_status_target(
        task_id
      , target_entity_table
      , target_entity_id
  )
  
,      
     FOREIGN KEY (task_id) REFERENCES civicrm_task(id)
,      
     FOREIGN KEY (status_id) REFERENCES civicrm_option_value(value)
  
)  ENGINE=InnoDB DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci  ;

-- /*******************************************************
-- *
-- * civicrm_project
-- *
-- * Instantiate projects, programs, campaigns, etc.
-- *
-- *******************************************************/
CREATE TABLE civicrm_project (


     id int unsigned NOT NULL AUTO_INCREMENT  COMMENT 'Project ID',
     domain_id int unsigned NOT NULL   COMMENT 'Which Domain owns this record.',
     title varchar(64)    COMMENT 'Project name.',
     description text    COMMENT 'Optional verbose description of the project. May be used for display - HTML allowed.',
     logo varchar(255)    COMMENT 'Full or relative URL to optional uploaded logo image for project.',
     owner_entity_table varchar(64) NOT NULL   COMMENT 'Name of table where project owner being referenced is stored (e.g. civicrm_contact or civicrm_group).',
     owner_entity_id int unsigned NOT NULL   COMMENT 'Foreign key to project owner (contact, group, etc.).',
     start_date datetime    COMMENT 'Project start date.',
     end_date datetime    COMMENT 'Project end date.',
     is_active tinyint    COMMENT 'Is this record active? For Projects: can tasks be created for it, does it appear on project listings, etc.',
     status_id int unsigned    COMMENT 'Configurable status value (e.g. Planned, Active, Closed...). FK to civicrm_option_value.' 
,
    PRIMARY KEY ( id )
 
    ,     UNIQUE INDEX UI_project_owner(
        id
      , owner_entity_table
      , owner_entity_id
  )
  
,      
     FOREIGN KEY (domain_id) REFERENCES civicrm_domain(id)
,      
     FOREIGN KEY (status_id) REFERENCES civicrm_option_value(value)
  
)  ENGINE=InnoDB DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci  ;


-- /*******************************************************
-- *
-- * quest_essay
-- *
-- * Essay question responses linked to a civicrm_contact record (expected usage is for student applicants).
-- *
-- *******************************************************/
CREATE TABLE quest_essay (


     id int unsigned NOT NULL AUTO_INCREMENT  COMMENT 'Unique Essay ID',
     contact_id int unsigned NOT NULL   COMMENT 'FK to Contact ID',
     essay text NOT NULL   COMMENT 'Essay question response.' 
,
    PRIMARY KEY ( id )
 
 
,      
     FOREIGN KEY (contact_id) REFERENCES civicrm_contact(id)
  
)  ENGINE=InnoDB DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci  ;

-- /*******************************************************
-- *
-- * quest_honor
-- *
-- * Academic honors linked to a civicrm_contact record (expected usage is for student applicants).
-- *
-- *******************************************************/
CREATE TABLE quest_honor (


     id int unsigned NOT NULL AUTO_INCREMENT  COMMENT 'Unique Honor ID',
     contact_id int unsigned NOT NULL   COMMENT 'FK to Contact ID',
     description varchar(255) NOT NULL   ,
     award_date date    COMMENT 'Date that the honor was awarded (month and year are significant).' 
,
    PRIMARY KEY ( id )
 
 
,      
     FOREIGN KEY (contact_id) REFERENCES civicrm_contact(id)
  
)  ENGINE=InnoDB DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci  ;

-- /*******************************************************
-- *
-- * quest_student
-- *
-- * Quest Student objects are defined by a civicrm_contact, and related civicrm_individual and quest_student records.
-- *
-- *******************************************************/
CREATE TABLE quest_student (


     id int unsigned NOT NULL AUTO_INCREMENT  COMMENT 'Unique Student ID',
     contact_id int unsigned NOT NULL   COMMENT 'FK to Contact ID',
     citizenship_status_id int unsigned NOT NULL   COMMENT 'FK to civicrm_option_value.',
     citizenship_country_id int unsigned NOT NULL   COMMENT 'Country of citizenship.',
     growup_country_id int unsigned    COMMENT 'Country where person grew up.',
     nationality_country_id int unsigned NOT NULL   COMMENT 'Country of persons nationality.',
     ethnicity_id_1 int unsigned    COMMENT 'FK to civicrm_option_value.',
     ethnicity_id_2 int unsigned    COMMENT 'FK to civicrm_option_value.',
     home_area_id int unsigned    COMMENT 'Type of area primary home is in (e.g. Rural, Suburban). FK to civicrm_option_value.',
     years_in_us int unsigned NOT NULL   COMMENT 'Number of years person has lived in the United States.',
     first_language varchar(128)    COMMENT 'First language spoken by this person.',
     primary_language varchar(128)    COMMENT 'Primary language spoken at home.',
     is_partner_share tinyint   DEFAULT 0 COMMENT 'OK to share this persons info with partner schools.',
     high_school_grad_year date   DEFAULT NULL COMMENT 'Year of high school graduation (only YYYY is significant).',
     parent_grad_college_id int unsigned   DEFAULT NULL COMMENT 'Has any parent or guardian graduated from a 4-year college?',
     internet_access_id int unsigned    COMMENT 'How do they access the internet. FK to civicrm_option_value.',
     internet_access_other varchar(255)    COMMENT 'Alternate response for how they access the internet.',
     is_home_computer tinyint   DEFAULT NULL COMMENT 'Has a computer at home.',
     is_home_internet tinyint   DEFAULT NULL COMMENT 'Has internet access at home.',
     is_take_SAT_ACT tinyint   DEFAULT NULL COMMENT 'Plans on taking SAT or ACT test.',
     study_method_id int unsigned    COMMENT 'How they plan on studying for SAT or ACT test. FK to civicrm_option_value.',
     educational_interest varchar(255)   DEFAULT NULL COMMENT 'Which educational areas are they interested in. Multi-select checkbox array populates a delimited list civicrm_option_value IDs. Available options have civicrm_option_group.name = educational_interest.',
     educational_interest_other varchar(255)    COMMENT 'Which other educational area are they interested in.',
     college_type varchar(255)   DEFAULT NULL COMMENT 'Types of college they are interested in attending. Multi-select checkbox array populates a delimited list civicrm_option_value IDs. Available options have civicrm_option_group.name = college_type.',
     college_interest varchar(255)   DEFAULT NULL COMMENT 'Which colleges are they interested in. Multi-select checkbox array populates a delimited list civicrm_option_value IDs. Available options have civicrm_option_group.name = college_interest.',
     college_interest_other text    COMMENT 'Which other colleges are they interested in.',
     gpa_id int unsigned   DEFAULT NULL COMMENT 'Grade Point Average (GPA) range. FK to civicrm_option_value.',
     is_class_ranking tinyint   DEFAULT NULL COMMENT 'Does students class have rankings.',
     class_rank int unsigned    COMMENT 'Class rank (numeric value).',
     class_rank_percent_id int unsigned    COMMENT 'Class rank percent range. FK to civicrm_option_value.',
     class_num_students int unsigned    COMMENT 'Total number of students in this persons class.',
     gpa_explanation text    COMMENT 'Descriptive comments about students GPA.',
     score_SAT int unsigned    COMMENT 'Combined highest reported scores (SAT).',
     score_PSAT int unsigned    COMMENT 'Combined highest reported scores (PSAT).',
     score_ACT int unsigned    COMMENT 'Combined highest reported scores (ACT).',
     score_PLAN int unsigned    COMMENT 'Combined highest reported scores (PLAN).',
     test_tutoring varchar(255)    COMMENT 'Which tests have they received tutoring for. Multi-select checkbox array populates a delimited list civicrm_option_value IDs. Available options have civicrm_option_group.name = test.',
     household_income_total decimal(20,2)    COMMENT 'Calculated annual income total from all reported sources.',
     number_siblings int    COMMENT 'Number of siblings this student has.',
     fed_lunch_id int unsigned    COMMENT 'Federal lunch program eligibility. FK to civicrm_option_value.',
     financial_aid_applicant tinyint   DEFAULT NULL COMMENT 'Plans to be a financial aid applicant to colleges.',
     register_standarized_tests tinyint   DEFAULT NULL COMMENT 'Plans to use, or have fee waivers to register for standarized tests.',
     award_ranking_1_id int unsigned    COMMENT 'Rank the scholarship awards .',
     award_ranking_2_id int unsigned    COMMENT 'Rank the scholarship awards.',
     award_ranking_3_id int unsigned    COMMENT 'Rank the scholarship awards.' 
,
    PRIMARY KEY ( id )
 
 
,      
     FOREIGN KEY (contact_id) REFERENCES civicrm_contact(id)
,      
     FOREIGN KEY (citizenship_status_id) REFERENCES civicrm_option_value(value)
,      
     FOREIGN KEY (citizenship_country_id) REFERENCES civicrm_country(id)
,      
     FOREIGN KEY (growup_country_id) REFERENCES civicrm_country(id)
,      
     FOREIGN KEY (nationality_country_id) REFERENCES civicrm_country(id)
,      
     FOREIGN KEY (ethnicity_id_1) REFERENCES civicrm_option_value(value)
,      
     FOREIGN KEY (ethnicity_id_2) REFERENCES civicrm_option_value(value)
,      
     FOREIGN KEY (home_area_id) REFERENCES civicrm_option_value(value)
,      
     FOREIGN KEY (internet_access_id) REFERENCES civicrm_option_value(value)
,      
     FOREIGN KEY (study_method_id) REFERENCES civicrm_option_value(value)
,      
     FOREIGN KEY (gpa_id) REFERENCES civicrm_option_value(value)
,      
     FOREIGN KEY (class_rank_percent_id) REFERENCES civicrm_option_value(value)
,      
     FOREIGN KEY (fed_lunch_id) REFERENCES civicrm_option_value(value)
  
)  ENGINE=InnoDB DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci  ;

-- /*******************************************************
-- *
-- * quest_test
-- *
-- * Test results linked to a civicrm_contact record (expected usage is for student applicants).
-- *
-- *******************************************************/
CREATE TABLE quest_test (


     id int unsigned NOT NULL AUTO_INCREMENT  COMMENT 'Unique Test Result ID',
     contact_id int unsigned NOT NULL   COMMENT 'FK to Contact ID',
     test_id int unsigned NOT NULL   COMMENT 'Test being reported (e.g. SAT, PSAT, etc). FK to civicrm_option_value.',
     score_composite float NOT NULL   COMMENT 'Composite or total score for this test.',
     score_english int unsigned    COMMENT 'English score if applicable for this test.',
     score_reading int unsigned    COMMENT 'Reading score if applicable for this test.',
     score_writing int unsigned    COMMENT 'Writing score if applicable for this test.',
     score_math int unsigned    COMMENT 'Math score if applicable for this test.',
     score_science int unsigned    COMMENT 'Science score if applicable for this test.',
     subject varchar(255)    COMMENT 'Test subject (for subject-specific tests e.g. AP and SAT II).',
     test_date date    COMMENT 'Date that the test was taken (month and year are significant).' 
,
    PRIMARY KEY ( id )
 
 
,      
     FOREIGN KEY (contact_id) REFERENCES civicrm_contact(id)
,      
     FOREIGN KEY (test_id) REFERENCES civicrm_option_value(value)
  
)  ENGINE=InnoDB DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci  ;

-- /*******************************************************
-- *
-- * quest_person
-- *
-- * Stores people related to Quest Students (parents, guardians, siblings).
-- *
-- *******************************************************/
CREATE TABLE quest_person (


     id int unsigned NOT NULL AUTO_INCREMENT  COMMENT 'Unique Person ID',
     contact_id int unsigned NOT NULL   COMMENT 'FK to Contact ID',
     relationship_id int unsigned NOT NULL   COMMENT 'Relationship to Student (e.g. Mother, Father, Sister...). FK to civicrm_option_value.',
     is_parent_guardian tinyint   DEFAULT 0 COMMENT 'Is this person a parent or guardian (primary caregiver)?',
     is_income_source tinyint   DEFAULT 0 COMMENT 'Is this person an income source',
     is_sibling tinyint   DEFAULT 0 COMMENT 'Is this person a parent or guardian (primary caregiver)?',
     first_name varchar(64) NOT NULL   COMMENT 'First Name.',
     last_name varchar(64) NOT NULL   COMMENT 'Last Name.',
     marital_status_id int unsigned    COMMENT 'FK to civicrm_option_value.',
     separated_year date    COMMENT 'Year parents separated or divorced (only YYYY is significant).',
     is_deceased tinyint    COMMENT 'True / False / Dont Know',
     deceased_year date    COMMENT 'Year deceased (only YYYY is significant).',
     birth_date date    COMMENT 'Persons birth date .',
     lived_with_from_age int unsigned    COMMENT 'Age of student when they began living with this person.',
     lived_with_to_age int unsigned    COMMENT 'Age of student when they stopped living with this person.',
     industry_id int unsigned    COMMENT 'Industry person works in (or unemployed).',
     job_organization varchar(128)    COMMENT 'Name of business or organization where person works.',
     job_occupation varchar(128)    COMMENT 'Occupation or job title.',
     job_current_years int unsigned    COMMENT 'Number of years working in current job.',
     highest_school_level_id int unsigned    COMMENT 'Highest level of schooling completed by this person (used for Parents/Guardians).',
     current_school_level_id int unsigned    COMMENT 'Current school level of this person (used for Siblings).',
     college_name varchar(128)    COMMENT 'Name of college attended.',
     college_country_id int unsigned    COMMENT 'Country of where person attended college.',
     college_grad_year date    COMMENT 'Year completed college (only YYYY is significant).',
     college_major varchar(128)    COMMENT 'Area of concentration or major in college.',
     prof_school_name varchar(128)    COMMENT 'Name of professional or graduate school attended.',
     prof_school_degree_id int unsigned    COMMENT 'Professional or graduate school degree type.',
     prof_grad_year date    COMMENT 'Year completed professional or graduate school (only YYYY is significant).',
     description text    COMMENT 'Additional information about this person (comments for Siblings).' 
,
    PRIMARY KEY ( id )
 
 
,      
     FOREIGN KEY (contact_id) REFERENCES civicrm_contact(id)
,      
     FOREIGN KEY (relationship_id) REFERENCES civicrm_option_value(value)
,      
     FOREIGN KEY (marital_status_id) REFERENCES civicrm_option_value(value)
,      
     FOREIGN KEY (industry_id) REFERENCES civicrm_option_value(value)
,      
     FOREIGN KEY (highest_school_level_id) REFERENCES civicrm_option_value(value)
,      
     FOREIGN KEY (current_school_level_id) REFERENCES civicrm_option_value(value)
,      
     FOREIGN KEY (college_country_id) REFERENCES civicrm_country(id)
,      
     FOREIGN KEY (prof_school_degree_id) REFERENCES civicrm_option_value(value)
  
)  ENGINE=InnoDB DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci  ;

-- /*******************************************************
-- *
-- * quest_household
-- *
-- * Quest Student Households.
-- *
-- *******************************************************/
CREATE TABLE quest_household (


     id int unsigned NOT NULL AUTO_INCREMENT  COMMENT 'Unique Household ID',
     contact_id int unsigned NOT NULL   COMMENT 'FK to Contact ID',
     household_type enum('Current', 'Previous') NOT NULL   COMMENT 'Quest collects current and (optionally) previous household info.',
     member_count int unsigned NOT NULL   COMMENT 'Number of people living in household (excluding student).',
     person_1_id int unsigned NOT NULL   COMMENT 'First primary caregiver in household. FK to quest_person.',
     person_2_id int unsigned    COMMENT 'Second primary caregiver in household. FK to quest_person.',
     years_lived_id int unsigned NOT NULL   COMMENT 'Years student has lived in this household (descriptive range).',
     description text    COMMENT 'Description of additional household circumstances.' 
,
    PRIMARY KEY ( id )
 
 
,      
     FOREIGN KEY (contact_id) REFERENCES civicrm_contact(id)
,      
     FOREIGN KEY (person_1_id) REFERENCES quest_person(id)
,      
     FOREIGN KEY (person_2_id) REFERENCES quest_person(id)
,      
     FOREIGN KEY (years_lived_id) REFERENCES civicrm_option_value(value)
  
)  ENGINE=InnoDB DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci  ;

-- /*******************************************************
-- *
-- * quest_income
-- *
-- * Income sources for Quest Students. Income sources are linked to Quest Person records.
-- *
-- *******************************************************/
CREATE TABLE quest_income (


     id int unsigned NOT NULL AUTO_INCREMENT  COMMENT 'Unique Income Source ID',
     person_id int unsigned NOT NULL   COMMENT 'FK to Person ID',
     source_1_id int unsigned NOT NULL   COMMENT 'Income source type. FK to civicrm_option_value.',
     source_2_id int unsigned    COMMENT 'Income source type (second source). FK to civicrm_option_value.',
     source_3_id int unsigned    COMMENT 'Income source type (second source). FK to civicrm_option_value.',
     job_1 varchar(128)    COMMENT 'Job description.',
     job_2 varchar(128)    COMMENT 'Job description (second source).',
     job_3 varchar(128)    COMMENT 'Job description.',
     amount_1 decimal(20,2) NOT NULL   COMMENT 'Total annual income from source 1.',
     amount_2 decimal(20,2)    COMMENT 'Total annual income from source 2.',
     amount_3 decimal(20,2)    COMMENT 'Total annual income from source 3.' 
,
    PRIMARY KEY ( id )
 
 
,      
     FOREIGN KEY (person_id) REFERENCES quest_person(id)
,      
     FOREIGN KEY (source_1_id) REFERENCES civicrm_option_value(value)
,      
     FOREIGN KEY (source_2_id) REFERENCES civicrm_option_value(value)
,      
     FOREIGN KEY (source_3_id) REFERENCES civicrm_option_value(value)
  
)  ENGINE=InnoDB DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci  ;

-- /*******************************************************
-- *
-- * quest_referral
-- *
-- *******************************************************/
CREATE TABLE quest_referral (


     id int unsigned NOT NULL AUTO_INCREMENT  COMMENT 'Unique Referral ID',
     contact_id int unsigned NOT NULL   COMMENT 'FK to Contact ID',
     name varchar(64) NOT NULL   ,
     email varchar(64) NOT NULL    
,
    PRIMARY KEY ( id )
 
 
,      
     FOREIGN KEY (contact_id) REFERENCES civicrm_contact(id)
  
)  ENGINE=InnoDB DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci  ;

-- /*******************************************************
-- *
-- * Modify the civicrm_contact  Table Structure
-- *******************************************************/
	
	 ALTER TABLE `civicrm_contact` DROP `preferred_communication_method`;

	 ALTER TABLE `civicrm_contact` ADD contact_sub_type varchar(64) DEFAULT NULL;

	 ALTER TABLE `civicrm_contact` ADD preferred_communication_method varchar(255) DEFAULT NULL;

-- /*******************************************************
-- *
-- * Modify the civicrm_contribution  Table Structure
-- *******************************************************/

	 ALTER TABLE `civicrm_contribution` ADD pay_for_entity_table varchar(64) DEFAULT NULL;

	 ALTER TABLE `civicrm_contribution` ADD pay_for_entity_id int(10) unsigned DEFAULT NULL;
	
	 ALTER TABLE `civicrm_contribution` ADD INDEX (`pay_for_entity_id`);

-- /*******************************************************
-- *
-- * Modify the civicrm_custom_field  Table Structure
-- *******************************************************/

	ALTER TABLE `civicrm_custom_field` CHANGE `html_type` `html_type` ENUM( 'Text', 'TextArea', 'Select', 'Multi-Select', 'Radio', 'CheckBox', 'Select Date', 'Select State/Province', 'Select Country','File') DEFAULT NULL COMMENT 'HTML types plus several built-in extended types.';

	ALTER TABLE `civicrm_custom_field` CHANGE `data_type` `data_type` ENUM('String', 'Int', 'Float', 'Money', 'Memo', 'Date', 'Boolean', 'StateProvince', 'Country', 'File') DEFAULT NULL;


-- /*******************************************************
-- *
-- * Modify the  civicrm_custom_group Table Structure
-- *
-- *******************************************************/

  	ALTER TABLE `civicrm_custom_group` CHANGE `extends` `extends` ENUM( 'Contact', 'Individual', 'Household', 'Organization', 'Location', 'Address', 'Contribution', 'Activity', 'Phonecall', 'Meeting', 'Group','Relationship') DEFAULT 'Contact';

-- /*******************************************************
-- *
-- * Modify the  civicrm_custom_value Table Structure
-- *
-- *******************************************************/

	ALTER TABLE `civicrm_custom_value` ADD file_id int(10) unsigned DEFAULT NULL;

	ALTER TABLE `civicrm_custom_value` ADD INDEX (`file_id`);
	
-- /*******************************************************
-- *
-- * Modify the  civicrm_email Table Structure
-- *
-- *******************************************************/

	ALTER TABLE `civicrm_email` ADD INDEX `UI_email` (`email`);


-- /*******************************************************
-- *
-- * Modify the  civicrm_mapping Table Structure
-- *
-- *******************************************************/


	ALTER TABLE `civicrm_mapping` CHANGE `mapping_type` `mapping_type` ENUM('Export', 'Import', 'Export Contributions', 'Import Contributions', 'Import Activity History', 'Search Builder');


-- /*******************************************************
-- *
-- * Modify the  civicrm_mapping_field Table Structure
-- *
-- *******************************************************/

	ALTER TABLE `civicrm_mapping_field` ADD grouping int(10) unsigned DEFAULT 0;

	ALTER TABLE `civicrm_mapping_field` ADD operator ENUM('=','!=','>','<','>=','<=','IN','NOT IN','LIKE','NOT LIKE') DEFAULT NULL;

	ALTER TABLE `civicrm_mapping_field` ADD value varchar(255) DEFAULT NULL;

-- /*******************************************************
-- *
-- * Modify the civicrm_uf_group Table Structure
-- *
-- *******************************************************/

	ALTER TABLE `civicrm_uf_group` ADD add_to_group_id int unsigned DEFAULT NULL;
	
	ALTER TABLE `civicrm_uf_group` ADD INDEX (`add_to_group_id`);
	
	ALTER TABLE `civicrm_uf_group` ADD add_captcha tinyint DEFAULT 0;

	ALTER TABLE `civicrm_uf_group` ADD cancel_URL varchar(255) DEFAULT NULL;
	
	ALTER TABLE `civicrm_uf_group` ADD membership_type_id int unsigned DEFAULT NULL;
 		
	ALTER TABLE `civicrm_uf_group` ADD INDEX (`membership_type_id`);
	
	
-- /*******************************************************
-- *
-- * Modify the civicrm_uf_match  Table Structure
-- *
-- *******************************************************/

	 ALTER TABLE `civicrm_uf_match` ADD INDEX `UI_uf_id` (`uf_id`);

-- /*******************************************************
-- *
-- * Modify the civicrm_note  Table Structure
-- *
-- *******************************************************/


	 ALTER TABLE `civicrm_note` ADD `subject` varchar(255) DEFAULT NULL;

-- /*******************************************************
-- *
-- * Modify the civicrm_saved_search Table Structure
-- *
-- *******************************************************/

	ALTER TABLE `civicrm_saved_search` ADD `mapping_id` INT UNSIGNED;

	ALTER TABLE `civicrm_saved_search` ADD FOREIGN KEY (`mapping_id`) REFERENCES `civicrm_mapping` (`id`);

	ALTER TABLE `civicrm_saved_search` DROP FOREIGN KEY `civicrm_saved_search_ibfk_1`;

	ALTER TABLE `civicrm_saved_search` DROP `query`,
					   DROP `domain_id`,	
					   DROP `is_active`;
-- /*******************************************************
-- *
-- * Modify the civicrm_custom_value  Table Structure
-- *
-- *******************************************************/

	UPDATE civicrm_custom_value SET char_data= ''+`char_data`+'' 
	WHERE custom_field_id IN
			      (SELECT id from civicrm_custom_field
			       WHERE civicrm_custom_value.custom_field_id = civicrm_custom_field.id
			       AND html_type IN ('Multi-Select','CheckBox'));


