<?php
    
require_once 'api/v2/UFGroup.php';
require_once 'api/v2/UFJoin.php';

class TestOfProfileAPIV2 extends CiviUnitTestCase 
{
    protected $_ufGroupId;
    protected $_ufFieldId;
    protected $_individualID;
    
    function get_info( )
    {
	return array(
		     'name'        => 'Profile API',
		     'description' => 'Test all Profile API methods.',
		     'group'       => 'CiviCRM API Tests',
		     );
    }
    
    //creating profile
    function setUp() 
    {
	$params = array( 
			'group_type' => 'Contact',
			'title'      => 'Test Profile',
			'help_pre'   => 'Profle to Test API',
			'is_active'  => 1
			 );
	
	$ufGroup = civicrm_uf_group_create ( $params );
	$this->_ufGroupId = $ufGroup['id'];
    }
    
    //deleting group, contact & field if exist and set the variable to null
    function tearDown() 
    {
	if ( $this->_ufFieldId ) {
	    civicrm_uf_field_delete ( $this->_ufFieldId );
	    $this->_ufFieldId = NULL;    
	}
	
	if ( $this->_ufGroupId ) {
	    civicrm_uf_group_delete ( $this->_ufGroupId );
	    $this->_ufGroupId = NULL;
	}
	
	if ( $this->_individualID ) {
	    $this->contactDelete( $this->_individualID );
	    $this->_individualID = NULL;
	}
    }
    
    //fetch profile title by its id	
    function testGetUFProfileTitle( )
    {
	$ufProfile = civicrm_uf_profile_title_get( $this->_ufGroupId );
	$this->assertEqual( $ufProfile, 'Test Profile' );
	$this->assertEqual( count($ufProfile), 1 ); 
    }

    //fetch profile html by contact id and profile title
    function testGetUFProfileHTML( )
    {
	$this->_individualID = $this->individualCreate( );
	$profileHTML         = civicrm_uf_profile_html_get( $this->_individualID, 'Test Profile' );
	$this->assertNotNull( $profileHTML );
    }
    
    //fetch profile html by contact id and profile id
    function testGetUFProfileHTMLById( )
    {
	$this->_individualID = $this->individualCreate( );
	$profileHTML         = civicrm_uf_profile_html_by_id_get( $this->_individualID, $this->_ufGroupId );
	$this->assertNotNull( $profileHTML );
    }
    
    //fetch profile html with group id
    function testGetUFProfileCreateHTML( )
    {
	$fieldsParams = array ( 
			       'field_name'       => 'first_name',
			       'field_type'       => 'Individual',
			       'visibility'       => 'Public Pages and Listings',
			       'weight'           => 1,
			       'location_type_id' => 1,
			       'label'            => 'Test First Name',
			       'is_searchable'    => 1,
			       'is_active'        => 1
				);
	$ufField    = civicrm_uf_field_create( $this->_ufGroupId, $fieldsParams );
	
	$joinParams =  array( 
			     'is_active'   => 1,
			     'module'      => 'Profile',
			     'weight'      => 1,
			     'uf_group_id' => $this->_ufGroupId
			      );
	$ufJoin = civicrm_uf_join_edit( $joinParams );
	
	$profileHTML = civicrm_uf_create_html_get( $this->_ufGroupId, true );
	$this->assertNotNull( $profileHTML );
    }
    
    //creating profile fields / fetch profile fields
    function testGetUFProfileFields( )
    {
	$params = array ( 
			 'field_name'       => 'country',
			 'field_type'       => 'Contact',
			 'visibility'       => 'Public Pages and Listings',
			 'weight'           => 1,
			 'location_type_id' => 1,
			 'label'            => 'Test Country',
			 'is_searchable'    => 1,
			 'is_active'        => 1
			  );

	$ufField          = civicrm_uf_field_create( $this->_ufGroupId , $params );
	$this->_ufFieldId = $ufField['id'];

	foreach ( $params as $key => $value ){
	    $this->assertEqual($ufField[$key], $params[$key] );
	}
	
	$ufProfile = civicrm_uf_profile_fields_get( $this->_ufGroupId );
	$this->assertEqual( $ufProfile['country-1']['field_type'      ] , $params['field_type'      ] );
	$this->assertEqual( $ufProfile['country-1']['title'           ] , $params['label'           ] );
	$this->assertEqual( $ufProfile['country-1']['visibility'      ] , $params['visibility'      ] );
	$this->assertEqual( $ufProfile['country-1']['location_type_id'] , $params['location_type_id'] );
	$this->assertEqual( $ufProfile['country-1']['group_id'        ] , $this->_ufGroupId           );
	$this->assertEqual( $ufProfile['country-1']['groupTitle'      ] , 'Test Profile'              );
	$this->assertEqual( $ufProfile['country-1']['groupHelpPre'    ] , 'Profle to Test API'        );
    }
    
    //fetch contact id by uf id
    function testGetUFMatchID( )
    {
	$session   =& CRM_Core_Session::singleton( );
	$ufId      = $session->get('ufID');
	$ufMatchId = civicrm_uf_match_id_get( $ufId );
	$this->assertEqual( $ufMatchId, $session->get('userID') );
    }

    //fetch uf id by contact id
    function testGetUFID( )
    {
	$session    =& CRM_Core_Session::singleton( );
	$userId     = $session->get('userID');
	$ufIdFetced = civicrm_uf_id_get( $userId );
	$this->assertEqual( $ufIdFetced, $session->get('ufID') );
    }
    
    //updating group
    function testUpdateUFGroup( )
    {
	$params = array (
			 'title'     => 'Edited Test Profile',
			 'help_post' => 'Profile Pro help text.',
			 'is_active' => 1 
			 );
	
	$updatedGroup = civicrm_uf_group_update( $params , $this->_ufGroupId );
	foreach ( $params as $key => $value ){
	    $this->assertEqual($updatedGroup[$key], $params[$key] );
	}
    }
    
    //create / updating field
    function testCreateUFField( ) 
    {
	$params = array ( 
			 'field_name'       => 'country',
			 'field_type'       => 'Contact',
			 'visibility'       => 'Public Pages and Listings',
			 'weight'           => 1,
			 'location_type_id' => 1,
			 'label'            => 'Test Country',
			 'is_searchable'    => 1,
			 'is_active'        => 1
			  );
	$ufField          = civicrm_uf_field_create( $this->_ufGroupId , $params );
	$this->_ufFieldId = $ufField['id'];
	foreach ( $params as $key => $value ){
	    $this->assertEqual($ufField[$key], $params[$key] );
	}
	
	$params = array (
			 'field_name'       => 'country',
			 'label'            => 'Edited Test Country',
			 'location_type_id' => 1,
			 'weight'           => 1,
			 'is_active'        => 1
			 );
	
	$updatedField = civicrm_uf_field_update( $params ,$ufField['id'] );
	foreach ( $params as $key => $value ){
	    $this->assertEqual($updatedField[$key], $params[$key] );
	}
    }
    
    //deleting field
    function testDeleteUFField( ) 
    {
	$params = array ( 
			 'field_name'       => 'country',
			 'field_type'       => 'Contact',
			 'visibility'       => 'Public Pages and Listings',
			 'weight'           => 1,
			 'location_type_id' => 1,
			 'label'            => 'Test Country',
			 'is_searchable'    => 1,
			 'is_active'        => 1
			  );
	$ufField          = civicrm_uf_field_create( $this->_ufGroupId , $params );
	$this->_ufFieldId = $ufField['id'];
	foreach ( $params as $key => $value ){
	    $this->assertEqual($ufField[$key], $params[$key] );
	}
	$result = civicrm_uf_field_delete( $ufField['id'] );
	$this->assertEqual( $result, 1 );
    }
    
    //validate profile html
    function testValidateProfileHTML( ) 
    {
	$this->_individualID = $this->individualCreate( );
	$result              = civicrm_profile_html_validate( $this->_individualID, 'Test Profile' );
	$this->assertEqual( $result, 1 );
    }
    
    
    // create/update uf join
    function testEditUFJoin( )
    {
	$params =  array( 
			 'module'       => 'CiviContribute',
			 'entity_table' => 'civicrm_contribution_page',
			 'entity_id'    => 1,
			 'weight'       => 1,
			 'uf_group_id'  => $this->_ufGroupId ,
			 'is_active'    => 1
			  );
	$ufJoin = civicrm_uf_join_edit( $params );
	foreach ( $params as $key => $value ){
	    $this->assertEqual($ufJoin[$key], $params[$key] );
	}
	$params =  array( 
			 'id'           => $ufJoin['id'],
			 'module'       => 'CiviContribute',
			 'entity_table' => 'civicrm_contribution_page',
			 'entity_id'    => 1,
			 'weight'       => 1,
			 'uf_group_id'  => $this->_ufGroupId ,
			 'is_active'    => 0
			  );
	$ufJoinUpdated = civicrm_uf_join_edit($params);
	foreach ( $params as $key => $value ){
	    $this->assertEqual($ufJoinUpdated[$key], $params[$key] );
	}
    }
    
    // find uf join id
    function testFindUFJoinId( )
    {
	$params = array( 
			'module'       => 'CiviContribute',
			'entity_table' => 'civicrm_contribution_page',
			'entity_id'    => 1,
			'weight'       => 1,
			'uf_group_id'  => $this->_ufGroupId ,
			 'is_active'    => 1
			 );
	$ufJoin       = civicrm_uf_join_add( $params );
	$searchParams = array( 
			      'entity_table' => 'civicrm_contribution_page',
			      'entity_id'    => 1
			       );
	$ufJoinId = civicrm_uf_join_id_find( $searchParams );
	$this->assertEqual( $ufJoinId, $ufJoin['id'] );
    }
    
    // find uf join group id
    function testFindUFGroupId( )
    {
	$params =  array( 
			 'module'       => 'CiviContribute',
			 'entity_table' => 'civicrm_contribution_page',
			 'entity_id'    => 1,
			 'weight'       => 1,
			 'uf_group_id'  => $this->_ufGroupId ,
			 'is_active'    => 1
			  );
	$ufJoin       = civicrm_uf_join_add( $params );
	$searchParams = array( 
			      'entity_table' => 'civicrm_contribution_page',
			      'entity_id'    => 1
			       );
	$ufGroupId = civicrm_uf_join_UFGroupId_find( $searchParams );
	$this->assertEqual($ufGroupId, $this->_ufGroupId );
    }
    
    //fetch all profiles
    function testGetUFProfileGroups( )
    {
	$ufProfileGroup = civicrm_uf_profile_groups_get( );
	$this->assertNotNull( count( $ufProfileGroup ) );	  
    }
}  