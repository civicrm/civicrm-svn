<?php

require_once 'api/v2/Contact.php';
require_once 'api/v2/CustomGroup.php';


class TestOfContactAddWithCustomDataAPIV2 extends CiviUnitTestCase 
{
    private $_ids  = array( );
    private $_cid  = null;
    private $_customGroupId = null;
    private $_customFieldId = null;
    
    function get_info( )
    {
        return array(
                     'name'        => 'Contact Add With Custom Data',
                     'description' => 'Test all Custom Data Addition / Updation API methods.',
                     'group'       => 'CiviCRM API Tests',
                     );
    }
    function setUp( )
    {
        $customGroup = $this->createCustomGroup( );
        $this->_customGroupId = $customGroup['id'];
        $this->_ids  = $this->createCustomField( );
    }

    function tearDown( )
    {
        if ( $this->_customFieldId ) {
            $this->customFieldDelete( $this->_customFieldId );
        }
        
        if ( $this->_ids ) {
            //deleting custom fields
            foreach ( $this->_ids as $id ){
                $this->customFieldDelete( $id );
            }
        }
        
        $this->customGroupDelete( $this->_customGroupId );
        $this->contactDelete( $this->_cid );
    }
    
    function createCustomGroup( )
    {
        $params = array(
                        'title'            => 'Test Custom Group',
                        'extends'          => array ( 'Individual' ),
                        'weight'           => 5,
                        'style'            => 'Inline',
                        'is_active'        => 1,
                        'max_multiple'     => 0
                        );
        $customGroup =& civicrm_custom_group_create($params);
        
        return $customGroup;
    }
    
    function createCustomField( )
    {
        $optionValue[] = array (
                                'label'     => 'Red',
                                'value'     => 'R',
                                'weight'    => 1,
                                'is_active' => 1
                                );
        $optionValue[] = array (
                                'label'     => 'Yellow',
                                'value'     => 'Y',
                                'weight'    => 2,
                                'is_active' => 1
                                );
        $optionValue[] = array (
                                'label'     => 'Green',
                                'value'     => 'G',
                                'weight'    => 3,
                                'is_active' => 1
                                );
        
        $params = array(
                        'label'           => 'Color Choser',
                        'html_type'       => 'Select',
                        'data_type'       => 'String',
                        'weight'          => 4,
                        'is_required'     => 1,
                        'is_searchable'   => 0,
                        'is_active'       => 1,
                        'option_values'   => $optionValue,
                        'custom_group_id' => $this->_customGroupId,
                        );
        
        $customField  =& civicrm_custom_field_create( $params );
        
        $ids = array( );
        $ids[] = $customField['result']['customFieldId'];
        
        $params  = array(
                         'custom_group_id' => $this->_customGroupId,
                         'label'           => 'Enter idea in once sentence',
                         'html_type'       => 'Text',
                         'data_type'       => 'String',
                         'default_value'   => 'xyz',
                         'weight'          => 4,
                         'is_required'     => 1,
                         'is_searchable'   => 0,
                         'is_active'       => 1
                         );
        
        $customField  =& civicrm_custom_field_create( $params );
        $ids[] = $customField['result']['customFieldId'];
        
        $params = array(
                        'custom_group_id' => $this->_customGroupId,
                        'name'            => 'test_date',
                        'label'           => 'test_date',
                        'html_type'       => 'Select Date',
                        'data_type'       => 'Date',
                        'default_value'   => '20081111',
                        'weight'          => 4,
                        'is_required'     => 1,
                        'is_searchable'   => 0,
                        'is_active'       => 1
                        );
        
        $customField  =& civicrm_custom_field_create( $params );			
        $ids[] = $customField['result']['customFieldId'];
        
        $params = array(
                        'custom_group_id' => $this->_customGroupId,
                        'name'            => 'test_country',
                        'label'           => 'test_country',
                        'html_type'       => 'Select Country',
                        'data_type'       => 'Country',
                        'default_value'   => '1229',
                        'weight'          => 4,
                        'is_required'     => 1,
                        'is_searchable'   => 0,
                        'is_active'       => 1
                        );
        
        $customField  =& civicrm_custom_field_create( $params );
        $ids[] = $customField['result']['customFieldId'];
        
        $params = array(
                        'custom_group_id' => $this->_customGroupId,
                        'name'            => 'test_note',
                        'label'           => 'test_note',
                        'html_type'       => 'TextArea',
                        'data_type'       => 'Memo',
                        'default_value'   => 'Hello',
                        'weight'          => 4,
                        'is_required'     => 1,
                        'is_searchable'   => 0,
                        'is_active'       => 1
                        );
        
        $customField  =& civicrm_custom_field_create( $params );
        $ids[] = $customField['result']['customFieldId'];
        
        $params = array(
                        'custom_group_id' => $this->_customGroupId,
                        'name'            => 'test_link',
                        'label'           => 'test_link',
                        'html_type'       => 'Link',
                        'data_type'       => 'Link',
                        'default_value'   => 'http://me.example.com',
                        'weight'          => 4,
                        'is_required'     => 1,
                        'is_searchable'   => 0,
                        'is_active'       => 1
                        );
        
        $customField  =& civicrm_custom_field_create( $params );
        $ids[] = $customField['result']['customFieldId'];
        
        $params = array(
                        'custom_group_id' => $this->_customGroupId,
                        'name'            => 'test_state_province',
                        'label'           => 'test_state_province',
                        'html_type'       => 'Multi-Select State/Province',
                        'data_type'       => 'StateProvince',
                        'default_value'   => '1001',
                        'weight'          => 4,
                        'is_required'     => 1,
                        'is_searchable'   => 0,
                        'is_active'       => 1
                        );
        
        $customField  =& civicrm_custom_field_create( $params );
        $ids[] = $customField['result']['customFieldId'];
        
        $params = array(
                        'custom_group_id' => $this->_customGroupId,
                        'name'            => 'test_bool',
                        'label'           => 'test_bool',
                        'html_type'       => 'Radio',
                        'data_type'       => 'Boolean',
                        'default_value'   => '0',
                        'weight'          => 4,
                        'is_required'     => 1,
                        'is_searchable'   => 0,
                        'is_active'       => 1
                        );
        
        $customField  =& civicrm_custom_field_create( $params );
        $ids[] = $customField['result']['customFieldId'];
        
        $params = array(
                        'custom_group_id' => $this->_customGroupId,
                        'name'            => 'test_money',
                        'label'           => 'test_money',
                        'html_type'       => 'Text',
                        'data_type'       => 'Money',
                        'default_value'   => '10',
                        'weight'          => 4,
                        'is_required'     => 1,
                        'is_searchable'   => 0,
                        'is_active'       => 1
                        );
        
        $customField  =& civicrm_custom_field_create( $params );
        $ids[] = $customField['result']['customFieldId'];
        
        $optionValue[] = array (
                                'label'     => 'topic1',
                                'value'     => 't1',
                                'weight'    => 1,
                                'is_active' => 1
                                );
        $optionValue[] = array (
                                'label'     => 'topic2',
                                'value'     => 't2',
                                'weight'    => 2,
                                'is_active' => 1
                                );
        $optionValue[] = array (
                                'label'     => 'topic3',
                                'value'     => 't3',
                                'weight'    => 3,
                                'is_active' => 1
                                );
        
        $params = array(
                        'label'           => 'choose any one topic',
                        'html_type'       => 'Radio',
                        'data_type'       => 'String',
                        'weight'          => 4,
                        'is_required'     => 1,
                        'is_searchable'   => 0,
                        'is_active'       => 1,
                        'option_values'   => $optionValue,
                        'custom_group_id' => $this->_customGroupId,
                        );
        
        $customField  =& civicrm_custom_field_create( $params );
        $ids[] = $customField['result']['customFieldId'];
        
        return $ids;
    }
    
    function testCreateIndividualwithSingleValueCustomData( )
    {
        //few custom Values for comparing
        $custom_params = array (
                                "custom_{$this->_ids[0]}" => 'R',
                                "custom_{$this->_ids[1]}" => 'Information for custom field of type alphanumeric - text',
                                "custom_{$this->_ids[2]}" => '2007-12-12 00:00:00',
                                "custom_{$this->_ids[3]}" => '1101',
                                "custom_{$this->_ids[4]}" => 'Some Notes',
                                "custom_{$this->_ids[5]}" => 'http://me.example1.com',
                                "custom_{$this->_ids[6]}" => '1002',
                                "custom_{$this->_ids[7]}" => '0',
                                "custom_{$this->_ids[8]}" => '20.00',
                                "custom_{$this->_ids[9]}" => 't2'					
                                );
        
        // Create contact params
        $params = array('first_name'    => 'abc' . time( ),
                        'last_name'     => 'xyz' . time( ),
                        'contact_type'  => 'Individual',
                        'prefix'        => 'Mr',
                        'suffix'        => 'VII',
                        'gender'        => 'Male',
                        'do_not_trade'  => 1,
                        'preferred_communication_method' => array(
                                                                  '2' => 1,
                                                                  '3' => 1,
                                                                  '4' => 1 )
                        );
        
        $params  = array_merge( $params, $custom_params );
        $contact =& civicrm_contact_add($params);
        
        $paramsLocation = array( 
                                'contact_id'    => $contact['contact_id'],
                                'location_type' => 'Work',
                                'phone'         => '999999',
                                'phone_type'    => 'Phone',
                                'email'         => 'man7@yahoo.com'
                                );
        
        $location = & civicrm_location_add( $paramsLocation );
        
        $this->_cid = $contact['contact_id'];
        $this->assertNotNull( $contact['contact_id'] );
        
        // Params for fetchin values
        $retrieve = array( 'id'                   => $contact['contact_id'],
                           'return.first_name'    => 1,
                           'return.last_name'     => 1,
                           'return.phone'         => 1,
                           'return.email'         => 1,
                           );
        
        // adding params for fetching custom values
        foreach ( $this->_ids  as $id ){
            $retrieve["return.custom_{$id}"] = 1;
        }
        
        // retrieve contact values.
        $contacts = civicrm_contact_get ( $retrieve );
        
        // get the target contact details.
        $contactDetails = array_pop( $contacts );
        
        $this->assertEqual( $contactDetails['first_name'], $params['first_name'] );
        $this->assertEqual( $contactDetails['last_name'], $params['last_name'] );
        
        // testing custom value with assertEqual
        foreach ( $this->_ids  as $id ) {
            $this->assertEqual( $contactDetails[ "custom_{$id}"], $params["custom_{$id}"]  );
        }
        
        // Parmas to update the contact
        $params = array(
                        "custom_{$this->_ids[0]}" => 'Y',
                        "custom_{$this->_ids[1]}" => 'Different information for custom field of type alpha - text',
                        "custom_{$this->_ids[2]}" => '2009-12-11 00:00:00',
                        "custom_{$this->_ids[3]}" => '1228',
                        "custom_{$this->_ids[4]}" => 'see you',
                        "custom_{$this->_ids[5]}" => 'http://me.example2.com',
                        "custom_{$this->_ids[6]}" => '1003',
                        "custom_{$this->_ids[7]}" => '1',
                        "custom_{$this->_ids[8]}" => '5',
                        "custom_{$this->_ids[9]}" => 't3',
                        'email'                   => 'man7+custom@yahoo.com',
                        'contact_id'              => $contact['contact_id'],
                        'first_name'              => 'Check',
                        'contact_type'            => 'Individual'
                        );
        
        // Updated Contact
        $updated    =& civicrm_contact_add( $params );
        $paramsPhone = array( 
                             'contact_id'    => $contact['contact_id'],
                             'location_type' => 'Work',
                             'phone'         => '123-4567',
                             'phone_type'    => 'Phone'
                             );
        
        $location = & civicrm_location_add( $paramsPhone );
        $retrieve = array( 'contact_id'           => $contact['contact_id'],
                           'return.first_name'    => 1,
                           'return.last_name'     => 1,
                           'return.phone'         => 1,
                           'return.email'         => 1,
                           );
        
        // adding params for fetching custom values
        foreach ( $this->_ids  as $id ){
            $retrieve["return.custom_{$id}"] = 1;
        }
        
        // retrieve contact values.
        $contacts = civicrm_contact_get( $retrieve );
        
        // get target contact details.
        $contactDetails = array_pop( $contacts );
        
        // testing custom value with assertEqual and assertNotEqual
        foreach ( $this->_ids  as $id ) {
            $this->assertEqual( $contactDetails["custom_{$id}"], $params["custom_{$id}"] );
            $this->assertNotEqual( $contactDetails["custom_{$id}"], $custom_params["custom_{$id}"] );
        }
    }
    
    function testCreateIndividualwithMultiValueCustomData( )
    {
        $optionValue[] = array (
                                'label'     => 'Red',
                                'value'     => '500',
                                'weight'    => 1,
                                'is_active' => 1
                                );
        $optionValue[] = array (
                                'label'     => 'Orange',
                                'value'     => '400',
                                'weight'    => 2,
                                'is_active' => 1
                                );
        $optionValue[] = array (
                                'label'     => 'Green',
                                'value'     => '300',
                                'weight'    => 3,
                                'is_active' => 1
                                );
        $optionValue[] = array (
                                'label'     => 'Yellow',
                                'value'     => '200',
                                'weight'    => 4,
                                'is_active' => 1
                                );
        $optionValue[] = array (
                                'label'     => 'Purple',
                                'value'     => '100',
                                'weight'    => 5,
                                'is_active' => 1
                                );
        $optionValue[] = array (
                                'label'     => 'Blue',
                                'value'     => '50',
                                'weight'    => 6,
                                'is_active' => 1
                                );
        
        // Params for custom data of Check Box type
        $params = array(
                        'label'           => 'Choose Color',
                        'html_type'       => 'CheckBox',
                        'data_type'       => 'String',
                        'weight'          => 5,
                        'is_required'     => 1,
                        'is_searchable'   => 0,
                        'is_active'       => 1,
                        'option_values'   => $optionValue,
                        'custom_group_id' => $this->_customGroupId,
                        );
        
        // Custom Field Creation
        $customField  =& civicrm_custom_field_create($params);
        $this->_customFieldId = $customField['result']['customFieldId'];
        
        // Contact Creation
        $this->_cid = Contact::createIndividual();
        
        // Params for contact updation
        $params = array(
                        'contact_id'                     => $this->_cid,
                        'contact_type'                   => 'Individual',
                        "custom_{$this->_customFieldId}" => array( '50' => 1, '400' => 1 )
                        );
        
        // Updated Contact
        $updatedContact    =& civicrm_contact_add($params);
        
        // Params for Conact retrieval
        $retrieve = array(
                          'id'                                    => $this->_cid,
                          'return.first_name'                     => 1,
                          'return.last_name'                      => 1,
                          "return.custom_{$this->_customFieldId}" => 1
                          );
        
        // retrieve contact values.
        $contacts = civicrm_contact_get( $retrieve );
        
        //get the target contact details.
        $contactDetails = array_pop( $contacts );
        
        $this->assertEqual( $contactDetails['first_name'], 'John' );
        $this->assertEqual( $contactDetails['last_name'], 'Doe' );
        
        $this->assertEqual( $contactDetails[ "custom_{$this->_customFieldId}"], '50400'  );
        $this->assertNotNULL( $contactDetails[ "custom_{$this->_customFieldId}"] );
    }
}