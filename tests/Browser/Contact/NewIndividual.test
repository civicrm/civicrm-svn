<?php

/*
 +--------------------------------------------------------------------+
 | CiviCRM version 2.1                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2008                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007.                                       |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License along with this program; if not, contact CiviCRM LLC       |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2008
 * $Id$
 *
 */

require_once 'CiviTestCase.php';

class Browser_Contact_NewIndividual extends CiviTestCase {

  var $webUser;
  
  function get_info() {
    return array(
      'name' => 'Create Individual',
      'description' => 'Creates a simple Individual (First Name, Last Name only)',
      'group' => 'CiviCRM Browser Tests',
    );
  }
  
  function setUp() {
    parent::setUp();
    $this->drupalModuleEnable('civicrm');

    $this->webUser = $this->drupalCreateUserRolePerm(
                       array ( 0 => 'access CiviCRM',
                               1 => 'edit all contacts',
			       2 => 'add contacts' ) );
    $this->drupalLoginUser($this->webUser);
    
  }
  
  /**
   * Test to create individual with 
   * valid parameters
   */
  function testCreateIndividual() {
      $this->civiGet('civicrm/dashboard', 'reset=1' );
      $this->clickLink('New Individual', '0');
      $first_name  = 'Jane';
      $last_name   = 'Doe';
      $params = array( 'first_name' => $first_name,     
                       'last_name'  => $last_name );
      $this->drupalPost( NULL, $params, '_qf_Edit_next');
      $this->assertText('Your Individual contact record has been saved.');
      //      $this->assertText('Last Change by ' . $this->webUser );
      $this->DBAssertNotNull( 'CRM_Contact_DAO_Contact', $last_name . ', ' .$first_name, 'id', 'sort_name',  'Checking database for the record.' );
  }  

  /**
   * Test to create individual with 
   * empty parameters
   */
  function testCreateIndividualWithEmptyParams() {
      $this->civiGet('civicrm/dashboard', 'reset=1' );
      $this->clickLink('New Individual', '0');
      $first_name  = '';
      $last_name   = '';
      $params = array( 'first_name' => $first_name,     
                       'last_name'  => $last_name );

      $this->drupalPost( NULL, $params, '_qf_Edit_next');
      $this->assertWantedRaw( 'First Name and Last Name OR an email OR an OpenID in the Primary Location should be set.', 'New Individual, validations.' );
      $this->assertText('First Name and Last Name OR an email OR an OpenID in the Primary Location should be set.');
      $this->DBAssertNull( 'CRM_Contact_DAO_Contact', $last_name . ', ' .$first_name, 'id', 'sort_name',  'Database check, Individual created successfully.' );
  }  
  
  
}
