<?php

require_once 'CiviTestCase.php';

class Browser_RandomClickThrough extends CiviTestCase {

  var $webUser;
  
  function get_info() {
    return array(
      'name' => 'Random Click Through Tester',
      'description' => 'Randomly click CiviCRM URLs and test for error.',
      'group' => 'CiviCRM Browser Tests',
    );
  }
  
  function setUp() {
    parent::setUp();

    $this->drupalModuleEnable('civicrm');
    $this->webUser = $this->drupalCreateUserRolePerm( $this->allPermissions( ) );
    $this->drupalLoginUser($this->webUser);

  }

  function checkErrors( &$ret, &$url ) {
      // check if there is a civicrm error or warning message on the page
      // at a later stage, we should also check for CMS based errors
      $this->assertTrue($ret, ts(' [browser] GET %1"', array('%1' => $url)));

      $this->assertNoText( 'Sorry. A non-recoverable error has occurred', '[browser] fatal error page?' );
      $this->assertNoText( 'The requested page could not be found', '[browser] page not found?' );
      $this->assertNoText( 'You are not authorized to access this page', '[browser] permission denied?' );

      return;
  }

  function select( &$page, &$test ) {
      foreach ( $page as $url ) {
          if ( ! in_array( $url, $test ) && 
               rand( 0, 100) % 3 )  {
              $test[] = $url;
          }
      }
  }

  /**
   * click urls of a civicrm page and ensure we do not get a fatal error message
   */
  function testClickURL( $linksToCheck = 5 )
  {
      $url = CRM_Utils_System::url( 'civicrm/dashboard', 'reset=1' );
      $url = CRM_Utils_System::url( 'civicrm/admin/locationType', 'reset=1' );
      $testURLs = array( $url );
      $seen      = array( );
      $current   = 0;

      while ( true ) {
          if ( count( $testURLs ) <= $current ) {
              return;
          }

          $url = $testURLs[$current];
          if ( array_key_exists( $url, $seen ) ) {
              continue;
          }

          $pageURLs = array( );
          $this->checkPage( $url, $pageURLs );
          $this->select( $pageURLs, $testURLs );

          $seen[$url] = 1;
          if ( count( $seen ) >= $linksToCheck ) {
              break;
          }
          $current++;
      }

      $this->assertTrue( count( $seen ) == $linksToCheck,
                         ts( '[browser] returned all links' ) );
  }

  function checkPage( $url, &$pageURLs ) {
      $ret = $this->civiGetURL( $url );
      $this->checkErrors( $ret, $url );

      $urls = $this->_browser->_page->getUrls( );

      foreach ( $urls as $url ) {
          if ( $this->isCiviURL( $url ) ) {
              $pageURLs[] = $url;
          }
      }
  }

}
