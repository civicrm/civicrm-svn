<?php

/*
 +--------------------------------------------------------------------+
 | CiviCRM version 3.1                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2010                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007.                                       |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2010
 * $Id$
 *
 */

require_once 'CiviTestCase.php';

class Browser_Core_LocationType extends CiviTestCase 
{

  var $webUser;
  
  function get_info() 
  {
      return array(
                   'name' => 'Location Type Creation',
                   'description' => 'Test location type creation with validation.',
                   'group' => 'CiviCRM Browser Tests',
                   );
  }
  
  function setUp() 
  {
      parent::setUp();
      
      $this->drupalModuleEnable('civicrm');
      $this->webUser = $this->drupalCreateUserRolePerm(
                                                       array ( 0 => 'access CiviCRM',
                                                               1 => 'administer CiviCRM',
                                                               2 => 'edit groups',
                                                               3 => 'edit all contacts' ) );
      $this->drupalLoginUser($this->webUser);
      
      // now goto location page
      $this->civiGet('civicrm/dashboard', 'reset=1' );
      $this->clickLink('Administer CiviCRM', '0');
      $this->assertWantedRaw( 'Administer CiviCRM', 'Administer CiviCRM page.' );
      
      $this->clickLink('Location Types (Home, Work...)', '0');
      $this->assertWantedRaw( 'Billing Address location', 'Location Type page.' );
  }

  /**
   * ensure that we get an error when we dont submit a name in form field
   */
  function testEmptyAndBadName( )
  {
      $this->clickLink('New Location Type', '0', true);
      $this->assertWantedRaw( 'vCard Name', 'New Location Type page.' );
      
      $params = array( );
      $this->drupalPost(NULL, $params, '_qf_LocationType_next');
      $this->assertWantedRaw( 'Name is a required field.', 'New Location Type, validations.' );

      $params = array( 'name' => 'My Home' );
      $this->drupalPost(NULL, $params, '_qf_LocationType_next');
      $this->assertWantedRaw( 'Name can only consist of alpha-numeric characters', 'Another validation' );
  }

  /**
   * Test to create location type along with validation
   */
  function testCreateLocationType( ) 
  {
      $this->clickLink('New Location Type', '0', true);
      $this->assertWantedRaw( 'vCard Name', 'New Location Type page.' );

      $params = array( 'name' => 'Office' ); 
      $this->drupalPost(NULL, $params, '_qf_LocationType_next');
      $this->assertWantedRaw( 'Office', 'Successful creation of New Location Type.' );

      $locationTypeId = $this->assertDBNotNull( 'CRM_Core_DAO_LocationType', 'Office' , 'id', 'name',
                                                'Database check, for location type.' );

      // get all the urls associated with this item
      $urls = $this->getUrlsByToken( "id={$locationTypeId}", 'civicrm/admin/locationType' );
      
      $delete = ts( 'Delete' );
      $this->assertArrayValueNotNull( $delete, $urls );

      $this->civiGetURL( $urls[$delete] );
      $this->assertWantedRaw( 'WARNING:', 'Delete Location Type page.' );

      $params = array( );
      $this->drupalPost(NULL, $params, '_qf_LocationType_next');

      $this->assertWantedRaw( 'Selected Location type has been deleted.', 'Location Type deleted.' );

      $this->assertDBNull( 'CRM_Core_DAO_LocationType', 'Office' , 'id', 'name',
                           'Database check, for location type.' );
  }

}
