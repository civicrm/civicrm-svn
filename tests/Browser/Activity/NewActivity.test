<?php

/*
 +--------------------------------------------------------------------+
 | CiviCRM version 3.1                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2010                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007.                                       |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License along with this program; if not, contact CiviCRM LLC       |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2010
 * $Id$
 *
 */

require_once 'CiviTestCase.php';

class Browser_Activity_NewActivity extends CiviTestCase
{

    var $params;
    var $webUser;

    function get_info()
    {
        return array('name'        => 'New Activity (standalone)',
                     'description' => 'Tests the standalone New Activity form, available from dashboard',
                     'group'       => 'CiviCRM Browser Tests');
    }

    function setUp()
    {
        parent::setUp();
        $this->webUser = $this->drupalCreateUserRolePerm(array(0 => 'access CiviCRM',
                                                               1 => 'edit all contacts',
                                                               2 => 'add contacts'));
        $this->drupalLoginUser($this->webUser);
        $this->civiGet('civicrm/dashboard', 'reset=1');
        $this->clickLink('New Activity');

        // create a default params array, unique per each test;
        // source_contact and activity_date_time should be set by
        // default by the form, so not putting them here tests that
        $uniqid = uniqid('CiviCRM New Activity Test ', true);
        $this->params = array(//'assignee_contact'    => $this->webUser->mail,
                              //'target_contact'      => $this->webUser->mail,
                              'subject'             => "Subject for $uniqid",
                              'location'            => "Location for $uniqid",
                              'details'             => "Details for $uniqid");
    }

    function testCreateWithMissingParams()
    {
        $params = array('activity_date_time[Y]' => '');
        
        //goto activity form
        $this->civiGet('civicrm/activity', 'action=add&reset=1&context=standalone' );
        $this->drupalPost(NULL, $params, '_qf_Activity_upload');
        
        $this->assertText('Subject is a required field.');
        $this->assertDBNull('CRM_Activity_DAO_Activity', $this->params['subject'], 'id', 'subject', 'Making sure the activity was not created in the database.');
    }

    function testCreateMeeting()
    {
        $this->params['activity_type_id'] = 1; // Meeting
        $this->params['duration']         = 195;
        
        //$this->params['target_contact']   = array( 1 => $this->webUser->contact_id );
        //$this->params['assignee_contact'] = array( 1 => $this->webUser->contact_id );
        
        //goto activity form
        $this->civiGet('civicrm/activity', 'action=add&reset=1&context=standalone' );
        $this->drupalPost(NULL, $this->params, '_qf_Activity_upload');
        
        // make sure the activity got through (based on the unique subject) and fetch its id
        $activity_id = $this->assertDBNotNull('CRM_Activity_DAO_Activity', $this->params['subject'], 'id', 'subject', 'Checking db for the created meeting.');
        $expected = array('source_contact_id' => $this->webUser->contact_id,
                          'activity_type_id'  => 1,
                          'subject'           => $this->params['subject'],
                          'location'          => $this->params['location'],
                          'details'           => $this->params['details'],
                          'duration'          => 195);
        // test whether the above fields were set properly and whether assignee and target contacts were set properly
        $this->assertDBCompareValues('CRM_Activity_DAO_Activity',           array('id'          => $activity_id), $expected);
        
        //FIX ME:
        //target activity and assignment activity records are not created. 
        //since $_POST is empty in preProcess hence controller not going to export 
        //array of target_contact and assignee_contact in postProcess, though we pass here.
//         $this->assertDBCompareValues('CRM_Activity_DAO_ActivityAssignment', array('activity_id' => $activity_id), 
//                                      array('assignee_contact_id' => $this->webUser->contact_id));
//         $this->assertDBCompareValues('CRM_Activity_DAO_ActivityTarget', array('activity_id' => $activity_id), 
//                                      array('target_contact_id'   => $this->webUser->contact_id));
    }

}
