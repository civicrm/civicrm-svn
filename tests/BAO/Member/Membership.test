<?php

require_once 'CiviTestCase.php';
require_once 'Contact.php';

class BAO_Member_Membership extends CiviTestCase 
{
    function get_info( ) 
    {
        return array(
                     'name'        => 'Membership BAOs',
                     'description' => 'Test all Member_BAO_Membership methods.',
                     'group'       => 'CiviCRM BAO Tests',
                     );
    }
    
    function setUp( ) 
    {
        parent::setUp();
    }

    function testCreate( )
    {
        $contactId = Contact::createIndividual( );
        
        $params = array(
                        'contact_id'         => $contactId,  
                        'membership_type_id' => '1',
                        'join_date'          => '2006-01-21',
                        'start_date'         => '2006-01-21',
                        'end_date'           => '2006-12-21',
                        'source'             => 'Payment',
                        'is_override'        => 1,
                        'status_id'          => 2                       
                        );
        $ids = array();
        require_once 'CRM/Member/BAO/Membership.php';
        CRM_Member_BAO_Membership::create( $params, $ids );

        $membershipId = $this->assertDBNotNull( 'CRM_Member_BAO_Membership', $contactId, 'id', 
                                                'contact_id', 'Database check for created membership.' );
        
        // Now call create() to modify an existing Membership
        
        $params = array( );
        $params = array(
                        'contact_id'         => $contactId,  
                        'membership_type_id' => '2',
                        'join_date'          => '2006-01-21',
                        'start_date'         => '2006-01-21',
                        'end_date'           => '2006-12-21',
                        'source'             => 'Payment',
                        'is_override'        => 1,
                        'status_id'          => 2    
                        );
        $ids = array(
                     'membership' => $membershipId
                     );
        CRM_Member_BAO_Membership::create( $params, $ids );
        
        $membershipTypeId = $this->assertDBNotNull( 'CRM_Member_BAO_Membership', $contactId,
                                                    'membership_type_id', 'contact_id',
                                                    'Database check on updated membership record.' );
        $this->assertEqual( $membershipTypeId, 2, 'Verify membership type id is 2.');
        
        Contact::delete( $contactId );

    }

    function testGetValues( )
    {
        $contactId = Contact::createIndividual( );
        
        $params = array(
                        'contact_id'         => $contactId,  
                        'membership_type_id' => '1',
                        'join_date'          => '2006-01-21',
                        'start_date'         => '2006-01-21',
                        'end_date'           => '2006-12-21',
                        'source'             => 'Payment',
                        'is_override'        => 1,
                        'status_id'          => 2                       
                        );
        $ids = array();
        require_once 'CRM/Member/BAO/Membership.php';
        CRM_Member_BAO_Membership::create( $params, $ids );

        $membershipId1 = $this->assertDBNotNull( 'CRM_Member_BAO_Membership', $contactId, 'id', 
                                                'contact_id', 'Database check for created membership.' );

        $params = array(
                        'contact_id'         => $contactId,  
                        'membership_type_id' => '2',
                        'join_date'          => '2007-01-21',
                        'start_date'         => '2007-01-21',
                        'end_date'           => '2007-12-21',
                        'source'             => 'Source123',
                        'is_override'        => 0,
                        'status_id'          => 2                       
                        );
        $ids = array();
        require_once 'CRM/Member/BAO/Membership.php';
        CRM_Member_BAO_Membership::create( $params, $ids );

        $membershipId2 = $this->assertDBNotNull( 'CRM_Member_BAO_Membership', 'source123', 'id', 
                                                'source', 'Database check for created membership.' );

        $membership = array('contact_id' => $contactId);
        $membershipValues = array(); 
        CRM_Member_BAO_Membership::getValues($membership, $membershipValues, true);
        
        $this->assertEqual( $membershipValues[$membershipId1]['membership_id'], $membershipId1, 'Verify membership record 1 is fetched.');
        
        $this->assertEqual( $membershipValues[$membershipId2]['membership_id'], $membershipId2, 'Verify membership record 2 is fetched.');
        Contact::delete( $contactId );
    }

    function testRetrieve ()
    {
        $contactId = Contact::createIndividual( );
        
        $params = array(
                        'contact_id'         => $contactId,  
                        'membership_type_id' => '1',
                        'join_date'          => '2006-01-21',
                        'start_date'         => '2006-01-21',
                        'end_date'           => '2006-12-21',
                        'source'             => 'Payment',
                        'is_override'        => 1,
                        'status_id'          => 2                       
                        );
        $ids = array();
        require_once 'CRM/Member/BAO/Membership.php';
        CRM_Member_BAO_Membership::create( $params, $ids );

        $membershipId = $this->assertDBNotNull( 'CRM_Member_BAO_Membership', $contactId, 'id', 
                                                'contact_id', 'Database check for created membership.' );
        $params = array( 'id' => $membershipId ); 
        CRM_Member_BAO_Membership::retrieve( $params, $values );
        $this->assertEqual( $values['id'], $membershipId, 'Verify membership record is retrieved.');
        Contact::delete( $contactId );
    }

}
