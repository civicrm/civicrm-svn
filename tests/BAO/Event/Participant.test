<?php

require_once 'CiviTestCase.php';
require_once 'Contact.php';
require_once 'Event.php';
require_once 'Participant.php';

class BAO_Event_Participant extends CiviTestCase 
{
    function get_info( ) 
    {
        return array(
                     'name'        => 'Participant BAOs',
                     'description' => 'Test all Event_BAO_Participant methods.',
                     'group'       => 'CiviCRM BAO Tests',
                     );
    }
    
    function setUp( ) 
    {
        $this->_contactId = Contact::createIndividual( );
        $this->_eventId   = Event::create( );
        parent::setUp();
    }
    
    /**
     * add() method (add and edit modes of participant)
     */
    function testAdd( )
    {
        $params = array(
                        'send_receipt'     => 1,
                        'is_test'          => 0,
                        'is_pay_later'     => 0,
                        'event_id'         => $this->_eventId,
                        'register_date'    => date('Y-m-d')." 00:00:00",
                        'role_id'          => 1,
                        'status_id'        => 1,
                        'source'           => 'Event_'.$this->_eventId,
                        'contact_id'       => $this->_contactId
                        );
        
        require_once 'CRM/Event/BAO/Participant.php';
        // New Participant Created
        $participant = CRM_Event_BAO_Participant::add($params);
        
        $this->assertDBNotNull('CRM_Event_BAO_Participant', $this->_contactId, 'id', 
                               'contact_id', 'Check DB for Participant of the contact');
        
        $this->assertDBCompareValue('CRM_Event_BAO_Participant', $participant->id, 'contact_id', 
                                    'id', $this->_contactId, 'Check DB for contact of the participant');
        
        $params = array_merge( $params, array (
                                               'id'          => $participant->id,
                                               'role_id'     => 2,
                                               'status_id'   => 3,
                                               ) );
        
        // Participant Edited
        $updatedParticipant = CRM_Event_BAO_Participant::add($params);
        $this->assertDBCompareValue('CRM_Event_BAO_Participant', $updatedParticipant->id, 'role_id', 
                                    'id', 2, 'Check DB for updated role id of the participant');
        
        $this->assertDBCompareValue('CRM_Event_BAO_Participant', $updatedParticipant->id, 'status_id', 
                                    'id', 3, 'Check DB for updated status id  of the participant');
        
        Contact::delete( $this->_contactId );
        Event::delete ( $this->_eventId );
    }
    
    /**
     * getValues() method (fetch value of participant)
     */
    function testgetValuesWithValidParams( ) 
    {
        $participantId = Participant::create( $this->_contactId, $this->_eventId);
        $params = array( 'id' => $participantId );
        
        $fetchParticipant = CRM_Event_BAO_Participant::getValues( $params, $values, $ids );
      
        $cparams = $fetchParticipant[$participantId];
   
    }
   
}
?>