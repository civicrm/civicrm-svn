<?php

require_once 'CiviTestCase.php';
require_once 'Contact.php';
require_once 'Event.php';

class BAO_Event_Participant extends CiviTestCase 
{
    function get_info( ) 
    {
        return array(
                     'name'        => 'Participant BAOs',
                     'description' => 'Test all Event_BAO_Participant methods.',
                     'group'       => 'CiviCRM BAO Tests',
                     );
    }
    
    function setUp( ) 
    {
        $this->_contactId = Contact::createIndividual( );
        $this->_eventId   = Event::create( );
        $this->_params = $tparams = array(
                                          'send_receipt'     => 1,
                                          'is_test'          => 0,
                                          'is_pay_later'     => 0,
                                          'event_id'         => $this->_eventId,
                                          'register_date'    => date('Y-m-d')." 00:00:00",
                                          'role_id'          => 1,
                                          'status_id'        => 1,
                                          'source'           => 'Event_'.$this->_eventId,
                                          'contact_id'       => $this->_contactId
                                          );
        
        require_once 'CRM/Event/BAO/Participant.php';
        // New Participant Created
        $participant = CRM_Event_BAO_Participant::add($tparams);
        $this->_participantID = $participant->id;
        
        $this->assertDBNotNull('CRM_Event_BAO_Participant', $this->_contactId, 'id', 
                               'contact_id', 'Check DB for Participant of the contact');
        
        $this->assertDBCompareValue('CRM_Event_BAO_Participant', $this->_participantID, 'contact_id', 
                                    'id', $this->_contactId, 'Check DB for contact of the participant');
        parent::setUp();
    }
    /**
     * add() method (add and edit modes of participant)
     */
    function testAdd( )
    {
        $params = array_merge( $this->_params, array ('id'          => $this->_participantID,
                                                      'role_id'     => 2,
                                                      'status_id'   => 3,
                                                      ) );
        
        // Participant Edited
        require_once 'CRM/Event/BAO/Participant.php';
        $participant = CRM_Event_BAO_Participant::add($params);
        $this->assertDBCompareValue('CRM_Event_BAO_Participant', $this->_participantID, 'role_id', 
                                    'id', 2, 'Check DB for updated role id of the participant');
        
        $this->assertDBCompareValue('CRM_Event_BAO_Participant', $this->_participantID, 'status_id', 
                                    'id', 3, 'Check DB for updated status id  of the participant');
        
        Contact::delete( $this->_contactId );
        Event::delete ( $this->_eventId );
    }
    /**
     * getValues() method (fetch value of participant)
     */
    function testgetValuesWithValidParams( ) 
    {
        $fparams = array( 'id' => $this->_participantID );
        
        $fetchParticipant = CRM_Event_BAO_Participant::getValues( $fparams, $values, $ids );
        $cparams = $fetchParticipant[$this->_participantID];
        
        $params = array_merge( $this->_params, array ('id'             => $this->_participantID,
                                                      'register_date'  => date('Y-m-d')." 00:00:00"
                                                      ));
        foreach ( $cparams as $key => $value ) {
            if ( substr( $key, 0, 1 ) != '_' && $key != 'N' ) {
                $this->assertEqual( $cparams->$key, $params[$key], 'Check for '.$key.' for given participant');
            }
        }
        
        Contact::delete( $this->_contactId );
        Event::delete ( $this->_eventId );
    }
    /**
     * getValues() method (checking for unformated array of participant id )
     */
    function testgetValuesWithoutValidParams( ) 
    {
        $fparams = array( );
        
        $fetchParticipant = CRM_Event_BAO_Participant::getValues( $fparams, $values, $ids );
        $count = count( $fetchParticipant );

        if ( $count == 1 ){
            $cparams = $fetchParticipant[$this->_participantID];
            $this->assertNotEqual( $cparams->id, 0, 'Checking for not finding the participant.' );
        } else {
            $this->assertNotEqual( $count, 1, 'Checking number of participant more than one as participantID not passed.' );
        }
        
        Contact::delete( $this->_contactId );
        Event::delete ( $this->_eventId );
    }
    
    /**
     * getLineItems() method (checking details for contribution detials )
     */
    function testgetLineItems()
    {
        $fetchContribution = CRM_Event_BAO_Participant::getLineItems( $this->_participantID );
// Not working                
        Contact::delete( $this->_contactId );
        Event::delete ( $this->_eventId );
    }

    /**
     * eventFull() method (checking the event for full )
     */
    function testeventFull()
    {
        $eventFull = CRM_Event_BAO_Participant::eventFull( $this->_eventId );
        $this->assertEqual( $eventFull, 'This event is full !!!', 'Checking if Event is full.' );

        Contact::delete( $this->_contactId );
        Event::delete ( $this->_eventId );
    }
    /**
     * importableFields() method ( Checking the Event's Importable Fields )
     */
    function testimportableFields()
    {
        $importableFields = CRM_Event_BAO_Participant::importableFields();
        $this->assertNotEqual( count( $importableFields ) , 0, 'Checking array not to be empty.' );

        Contact::delete( $this->_contactId );
        Event::delete ( $this->_eventId );
    }

    /**
     * participantDetails() method ( Checking the Participant Details )
     */
    function testparticipantDetails()
    {
        $params =  array ( 'name'  => 'Doe, John', 'title' => 'Test Event' );
        
        $participantDetails = CRM_Event_BAO_Participant::participantDetails( $this->_participantID );

        $this->assertEqual( count( $participantDetails ) , 2, 'Equating the array contains.' );
        $this->assertEqual( $participantDetails['name'] ,$params['name'] , 'Checking Name of Participant.' );
        $this->assertEqual( $participantDetails['title'] ,$params['title'] , 'Checking Event Title in which participant is enroled.' );
        
        Contact::delete( $this->_contactId );
        Event::delete ( $this->_eventId );
    }

    /**
     * deleteParticipant() method ( Delete a Participant )
     */
    function testdeleteParticipant()
    {
        $deleteParticipant = CRM_Event_BAO_Participant::deleteParticipant( $this->_participantID );
        $this->assertDBNull('CRM_Event_BAO_Participant', $this->_participantID,'contact_id','id', 'Check DB for deleted Participant.');

        Contact::delete( $this->_contactId );
        Event::delete ( $this->_eventId );
    }

    /**
     * checkDuplicate() method ( Checking for Duplicate Participant returns array of participant id)
     */
    function testcheckDuplicate()
    {
        $duplicate    = array();
        $partiId[]    = $this->_participantID;
        $participant0 = CRM_Event_BAO_Participant::add($this->_params);
        $partiId[]    = $participant0->id;
        $participant1 = CRM_Event_BAO_Participant::add($this->_params);
        $partiId[]    = $participant1->id;


        $params = array ( 'event_id' => $this->_eventId,'contact_id' => $this->_contactId );
        $checkDuplicate = CRM_Event_BAO_Participant::checkDuplicate( $params, $duplicate );

        $this->assertEqual( count( $duplicate ) , 3, 'Equating the array contains with duplicate array.' );
        
        foreach ( $duplicate as $key ) {
            $this->assertEqual( $partiId[$key] , $duplicate[$key], 'Equating the contactid which is in the database.' );
        }

        Contact::delete( $this->_contactId );
        Event::delete ( $this->_eventId );
    }

    /**
     * create() method (create and updation of participant)
     */
    function testCreate( )
    {
        $params = array(
                        'send_receipt'     => 1,
                        'is_test'          => 0,
                        'is_pay_later'     => 0,
                        'event_id'         => $this->_eventId,
                        'register_date'    => date('Y-m-d')." 00:00:00",
                        'role_id'          => 1,
                        'status_id'        => 1,
                        'source'           => 'Event_'.$this->_eventId,
                        'contact_id'       => $this->_contactId
                        );
        
        $participant = CRM_Event_BAO_Participant::create($params);
        $this->assertDBNotNull('CRM_Event_BAO_Participant', $this->_contactId, 'id', 
                               'contact_id', 'Check DB for Participant of the contact');

        $params = array_merge($params, array('id'        => $participant->id, 
                                             'role_id'   => 2,
                                             'status_id' => 3));
        
        $participant = CRM_Event_BAO_Participant::create($params);
        
        $this->assertDBCompareValue('CRM_Event_BAO_Participant', $participant->id, 'role_id', 
                                    'id', 2, 'Check DB for updated role id of the participant');
        
        $this->assertDBCompareValue('CRM_Event_BAO_Participant', $participant->id, 'status_id', 
                                    'id', 3, 'Check DB for updated status id  of the participant');
        
        $deleteParticipant = CRM_Event_BAO_Participant::deleteParticipant($this->_participantID);
        $this->assertDBNull('CRM_Event_BAO_Participant', $this->_participantID, 'contact_id', 
                            'id', 'Check DB for Participant of the contact');
        
        $deleteParticipant = CRM_Event_BAO_Participant::deleteParticipant( $participant->id );
        $this->assertDBNull('CRM_Event_BAO_Participant', $this->_contactId, 'id', 
                            'contact_id', 'Check DB for Participant of the contact');
        
        Contact::delete( $this->_contactId );
        Event::delete ( $this->_eventId );
        
    }
}
?>