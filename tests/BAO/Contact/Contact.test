<?php

require_once 'CiviTestCase.php';
require_once 'Contact.php';

class BAO_Contact_Contact extends CiviTestCase 
{
    
    function get_info( ) 
    {
        return array(
                     'name'        => 'Contact BAOs',
                     'description' => 'Test all Contact_BAO_Contact methods.',
                     'group'       => 'CiviCRM BAO Tests',
                     );
    }
    
    function setUp( ) 
    {
        parent::setUp();
    }
    
    function testaddWithEmptyParams( )
    {
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::add( $params = array() );
        
        //Now check Contact object
        $this->assertNull( $contact );
    }
    
    /**
     * add() method (create and update modes)
     */
    function testAdd( )
    {
        $firstName = 'Shane';
        $lastName  = 'Whatson';
        $params     =  array( 'first_name'   => $firstName,     
                              'last_name'    => $lastName,
                              'contact_type' => 'Individual'
                              );
        
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::add( $params );
        
        $this->assertEqual( $firstName, $contact->first_name, 'Check for first name creation.' );
        $this->assertEqual( $lastName, $contact->last_name, 'Check for last name creation.' );
        
        $contactId = $contact->id;
        
        //update and change first name and last name, using add( )
        $firstName = 'Jane';
        $params = array( 'first_name'   => $firstName, 
                         'contact_type' => 'Individual',
                         'contact_id'   => $contactId );
        
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $firstName, $contact->first_name, 'Check for updated first name.' );
        
        $contactId = $contact->id;
        Contact::delete( $contactId );
    }
    
    /**
     * add() method (creat and update modes)
     * with all contact params
     */
    function testAddWithAll( )
    {
        $params    =  array( 'contact_type'          => 'Individual',
                             'first_name'            => 'Shane',
                             'middle_name'           => 'xyz',
                             'last_name'             => 'Whatson',
                             'prefix_id'             => 3,
                             'suffix_id'             => 2,
                             'nick_name'             => 'Nick Name',
                             'job_title'             => 'software engg',
                             'gender_id'             => 2,
                             'is_deceased'           => 1,
                             'home_URL'              => 'http://civicrm.org',
                             'contact_source'        => 'test contact',
                             'external_identifier'   => 123456789,
                             'preferred_mail_format' => 'Both',
                             'greeting_type'         => 'Informal',
                             'custom_greeting'       => 'Custom Greeting',
                             'is_opt_out'            => 1,
                             'deceased_date'                  => array (
                                                                        'M'            => 7,
                                                                        'd'            => 7,
                                                                        'Y'            => 1991,
                                                                        ),
                             'birth_date'                     => array (
                                                                        'M'            => 6,
                                                                        'd'            => 6,
                                                                        'Y'            => 1961,
                                                                        ),
                             'privacy'                        => array (
                                                                        'do_not_phone' => 1,
                                                                        'do_not_email' => 1,
                                                                        'do_not_mail'  => 1,
                                                                        'do_not_trade' => 1,
                                                                        ),
                             'preferred_communication_method' => array ( 
                                                                        '1'            => 1,
                                                                        '2'            => 0,
                                                                        '3'            => 1,
                                                                        '4'            => 0,
                                                                        '5'            => 1,
                                                                        ),
                             );
        $prefComm = $params['preferred_communication_method'];
        require_once 'CRM/Contact/BAO/Contact.php';
        //create the contact using add()
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $contactId = $contact->id;
        
        //Now check $contact is object of contact DAO..
        $this->assertIsA( $contact, 'CRM_Contact_DAO_Contact' );
        
        //Now check values of object with params.
        $this->assertEqual( $params['first_name'], $contact->first_name, 'Check for first name creation.' );
        $this->assertEqual( $params['last_name'], $contact->last_name, 'Check for last name creation.' );
        $this->assertEqual( $params['middle_name'], $contact->middle_name, 'Check for middle name creation.' );
        $this->assertEqual( $params['contact_type'], $contact->contact_type, 'Check for contact type creation.' );
        $this->assertEqual( '1', $contact->do_not_email, 'Check for do_not_email creation.' );
        $this->assertEqual( '1', $contact->do_not_phone, 'Check for do_not_phone creation.' );
        $this->assertEqual( '1', $contact->do_not_mail, 'Check for do_not_mail creation.' );
        $this->assertEqual( '1', $contact->do_not_trade, 'Check for do_not_trade creation.' );
        $this->assertEqual( '1', $contact->is_opt_out, 'Check for is_opt_out creation.' );
        $this->assertEqual( $params['external_identifier'], $contact->external_identifier, 'Check for external_identifier creation.' );
        $this->assertEqual( $params['last_name']. ', ' .$params['first_name'], $contact->sort_name, 'Check for sort_name creation.' );
        $this->assertEqual( $params['home_URL'], $contact->home_URL, 'Check for home_URL creation.' );
        $this->assertEqual( $params['preferred_mail_format'], $contact->preferred_mail_format, 
                            'Check for preferred_mail_format creation.' );
        $this->assertEqual( $params['contact_source'], $contact->source, 'Check for contact_source creation.' );
        $this->assertEqual( $params['prefix_id'], $contact->prefix_id, 'Check for prefix_id creation.' );
        $this->assertEqual( $params['suffix_id'], $contact->suffix_id, 'Check for suffix_id creation.' );
        $this->assertEqual( $params['greeting_type'], $contact->greeting_type, 'Check for greeting_type creation.' );
        $this->assertEqual( $params['custom_greeting'], $contact->custom_greeting, 'Check for custom_greeting creation.' );
        $this->assertEqual( $params['job_title'], $contact->job_title, 'Check for job_title creation.' ); 
        $this->assertEqual( $params['gender_id'], $contact->gender_id, 'Check for gender_id creation.' ); 
        $this->assertEqual( '1', $contact->is_deceased, 'Check for is_deceased creation.' );
        require_once 'CRM/Utils/Date.php';
        $this->assertEqual( CRM_Utils_Date::format( $params['birth_date']  ), 
                            $contact->birth_date, 'Check for birth_date creation.' ); 
        $this->assertEqual( CRM_Utils_Date::format( $params['deceased_date']  ), 
                            $contact->deceased_date, 'Check for deceased_date creation.' ); 
        require_once 'CRM/Core/BAO/CustomOption.php';
        $dbPrefComm = explode( CRM_Core_BAO_CustomOption::VALUE_SEPERATOR,
                               $contact->preferred_communication_method );
        $checkPrefComm = array( );
        foreach( $dbPrefComm as $key => $value ) {
            if ( $value ) {
                $checkPrefComm[$value] = 1;
            }
        }
        $this->assertAttributesEqual( $checkPrefComm,  $prefComm );
        
        //now update the contact using add( )
        $updateParams    =  array( 'contact_type'          => 'Individual',
                                   'first_name'            => 'Jane',
                                   'middle_name'           => 'abc',
                                   'last_name'             => 'Doe',
                                   'prefix_id'             => 2,
                                   'suffix_id'             => 3,
                                   'nick_name'             => 'Nick Name Second',
                                   'job_title'             => 'software Developer',
                                   'gender_id'             => 1,
                                   'is_deceased'           => 1,
                                   'home_URL'              => 'http://wiki.civicrm.org',
                                   'contact_source'        => 'test update contact',
                                   'external_identifier'   => 111111111,
                                   'preferred_mail_format' => 'Both',
                                   'greeting_type'         => 'Informal',
                                   'custom_greeting'       => 'Custom Greeting Second',
                                   'is_opt_out'            => 0,
                                   'deceased_date'                  => array (
                                                                              'M'            => 3,
                                                                              'd'            => 3,
                                                                              'Y'            => 1981,
                                                                              ),
                                   'birth_date'                     => array (
                                                                              'M'            => 4,
                                                                              'd'            => 4,
                                                                              'Y'            => 1951,
                                                                              ),
                                   'privacy'                        => array (
                                                                              'do_not_phone' => 0,
                                                                              'do_not_email' => 0,
                                                                              'do_not_mail'  => 0,
                                                                              'do_not_trade' => 0,
                                                                              ),
                                   'preferred_communication_method' => array ( 
                                                                              '1'            => 0,
                                                                              '2'            => 1,
                                                                              '3'            => 0,
                                                                              '4'            => 1,
                                                                              '5'            => 0,
                                                                              ),
                                   );
        $prefComm = $updateParams['preferred_communication_method'];
        $updateParams['contact_id'] = $contactId;
        require_once 'CRM/Contact/BAO/Contact.php';
        //create the contact using add()
        $contact = CRM_Contact_BAO_Contact::add( $updateParams );
        $contactId = $contact->id;
        
        //Now check $contact is object of contact DAO..
        $this->assertIsA( $contact, 'CRM_Contact_DAO_Contact' );
        
        //Now check values of object with params.
        $this->assertEqual( $updateParams['first_name'], $contact->first_name, 'Check for first name creation.' );
        $this->assertEqual( $updateParams['last_name'], $contact->last_name, 'Check for last name creation.' );
        $this->assertEqual( $updateParams['middle_name'], $contact->middle_name, 'Check for middle name creation.' );
        $this->assertEqual( $updateParams['contact_type'], $contact->contact_type, 'Check for contact type creation.' );
        $this->assertEqual( '0', $contact->do_not_email, 'Check for do_not_email creation.' );
        $this->assertEqual( '0', $contact->do_not_phone, 'Check for do_not_phone creation.' );
        $this->assertEqual( '0', $contact->do_not_mail, 'Check for do_not_mail creation.' );
        $this->assertEqual( '0', $contact->do_not_trade, 'Check for do_not_trade creation.' );
        $this->assertEqual( '0', $contact->is_opt_out, 'Check for is_opt_out creation.' );
        $this->assertEqual( $updateParams['external_identifier'], $contact->external_identifier, 
                            'Check for external_identifier creation.' );
        $this->assertEqual( $updateParams['last_name'] . ', ' .$updateParams['first_name'], 
                            $contact->sort_name, 'Check for sort_name creation.' );
        $this->assertEqual( $updateParams['home_URL'], $contact->home_URL, 'Check for home_URL creation.' );
        $this->assertEqual( $updateParams['preferred_mail_format'], $contact->preferred_mail_format, 
                            'Check for preferred_mail_format creation.' );
        $this->assertEqual( $updateParams['contact_source'], $contact->source, 'Check for contact_source creation.' );
        $this->assertEqual( $updateParams['prefix_id'], $contact->prefix_id, 'Check for prefix_id creation.' );
        $this->assertEqual( $updateParams['suffix_id'], $contact->suffix_id, 'Check for suffix_id creation.' );
        $this->assertEqual( $updateParams['greeting_type'], $contact->greeting_type, 'Check for greeting_type creation.' );
        $this->assertEqual( $updateParams['custom_greeting'], $contact->custom_greeting, 'Check for custom_greeting creation.' );
        $this->assertEqual( $updateParams['job_title'], $contact->job_title, 'Check for job_title creation.' ); 
        $this->assertEqual( $updateParams['gender_id'], $contact->gender_id, 'Check for gender_id creation.' ); 
        $this->assertEqual( '1', $contact->is_deceased, 'Check for is_deceased creation.' );
        require_once 'CRM/Utils/Date.php';
        $this->assertEqual( CRM_Utils_Date::format( $updateParams['birth_date']  ), 
                            $contact->birth_date, 'Check for birth_date creation.' ); 
        $this->assertEqual( CRM_Utils_Date::format( $updateParams['deceased_date']  ), 
                            $contact->deceased_date, 'Check for deceased_date creation.' ); 
        require_once 'CRM/Core/BAO/CustomOption.php';
        $dbPrefComm = explode( CRM_Core_BAO_CustomOption::VALUE_SEPERATOR,
                               $contact->preferred_communication_method );
        $checkPrefComm = array( );
        foreach( $dbPrefComm as $key => $value ) {
            if ( $value ) {
                $checkPrefComm[$value] = 1;
            }
        }
        $this->assertAttributesEqual( $checkPrefComm,  $prefComm );
        
        //cleanup DB by deleting the contact
        Contact::delete( $contactId );
    }
    
    /**
     * create() method 
     */
    function testCreate( )
    {
        $firstName = 'Bill';
        $lastName  = 'Adams';
        $params    =  array( 'first_name'   => $firstName,     
                              'last_name'    => $lastName,
                              'contact_type' => 'Individual'
                              );
        
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $firstName, $contact->first_name, 'Check for first name creation.' );
        $this->assertEqual( $lastName, $contact->last_name, 'Check for last name creation.' );
        
        $contactId = $contact->id;

        //update and change first name and last name, using create()
        $firstName = 'Joan';
        $params = array( 'first_name'   => $firstName, 
                         'contact_type' => 'Individual',
                         'contact_id'   => $contactId );
        
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $firstName, $contact->first_name, 'Check for updated first name.' );
        $contactId = $contact->id;
        Contact::delete( $contactId );
        
        $householdName = 'Adams house';
        $params        = array( 'household_name' => $householdName,
                                'contact_type'   => 'Household'
                                );
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $householdName, $contact->sort_name, 'Check for created household.' );
        $contactId = $contact->id;

        //update and change name of household, using create
        $householdName = 'Joans home';
        $params = array( 'household_name' => $householdName,
                         'contact_type' => 'Household',
                         'contact_id'   => $contactId );
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $householdName, $contact->sort_name, 'Check for updated household.' );
        Contact::delete( $contactId );

        $organizationName = 'My Organization';
        $params = array( 'organization_name' => $organizationName );
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $organizationName, $contact->sort_name, 'Check for created organization.' );
        $contactId = $contact->id;

        //update and change name of organization, using create
        $organizationName = 'Your Changed Organization';
        $params = array( 'organization_name' => $organizationName,
                         'contact_type' => 'Organization',
                         'contact_id'   => $contactId );
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $organizationName, $contact->sort_name, 'Check for updated organization.' );
        Contact::delete( $contactId );
    }

    /**
     * test logged in user has permissions for 
     * various  operation types
     */
    function testPermissionedContact() 
    {
        $contactId = Contact::createIndividual(); 
        require_once 'CRM/Contact/BAO/Contact/Permission.php';
        $userViewPermission = CRM_Contact_BAO_Contact_Permission::allow($contactId);
        $this->assertEqual( $userViewPermission, true, 'Check user for view contact permission.' );  
        
        $userEditPermission = CRM_Contact_BAO_Contact_Permission::allow($contactId, CRM_Core_Permission::EDIT);
        $this->assertEqual( $userEditPermission, true, 'Check user for edit contact permission.' );  
      
        Contact::delete($contactId);
    }
}
