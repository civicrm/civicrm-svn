<?php

require_once 'CiviTestCase.php';
require_once 'Contact.php';

class BAO_Contact_Contact extends CiviTestCase 
{
    
    function get_info( ) 
    {
        return array(
                     'name'        => 'Contact BAOs',
                     'description' => 'Test all Contact_BAO_Contact methods.',
                     'group'       => 'CiviCRM BAO Tests',
                     );
    }
    
    function setUp( ) 
    {
        parent::setUp();
    }
    
    /**
     * add() method (create and update modes)
     */
    function testAdd( )
    {
        $firstName = 'Shane';
        $lastName  = 'Whatson';
        $params     =  array( 'first_name'   => $firstName,     
                              'last_name'    => $lastName,
                              'contact_type' => 'Individual'
                              );
        
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::add( $params );
        
        $this->assertEqual( $firstName, $contact->first_name, 'Check for first name creation.' );
        $this->assertEqual( $lastName, $contact->last_name, 'Check for last name creation.' );
        
        $contactId = $contact->id;

        //update and change first name and last name, using add( )
        $firstName = 'Jane';
        $params = array( 'first_name'   => $firstName, 
                         'contact_type' => 'Individual',
                         'contact_id'   => $contactId );
        
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $firstName, $contact->first_name, 'Check for updated first name.' );

        $contactId = $contact->id;
        Contact::delete( $contactId );
    }
    
    /**
     * test logged in user has permissions for 
     * various  operation types
     */
    function testPermissionedContact() 
    {
        $contactId = Contact::createIndividual(); 
        $userViewPermission = CRM_Contact_BAO_Contact::permissionedContact($contactId);
        $this->assertEqual( $userViewPermission, true, 'Check user for view contact permission.' );  
        
        $userEditPermission = CRM_Contact_BAO_Contact::permissionedContact($contactId, CRM_Core_Permission::EDIT);
        $this->assertEqual( $userEditPermission, true, 'Check user for edit contact permission.' );  
      
        Contact::delete($contactId);
    }
}
