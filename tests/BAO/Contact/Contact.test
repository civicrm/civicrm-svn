<?php

require_once 'CiviTestCase.php';
require_once 'Contact.php';

class BAO_Contact_Contact extends CiviTestCase 
{
    
    function get_info( ) 
    {
        return array(
                     'name'        => 'Contact BAOs',
                     'description' => 'Test all Contact_BAO_Contact methods.',
                     'group'       => 'CiviCRM BAO Tests',
                     );
    }
    
    function setUp( ) 
    {
        parent::setUp();
    }
    
    /**
     * test case for add( )
     * test with empty params.
     */
    function testAddWithEmptyParams( )
    {
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::add( $params = array() );
        
        //Now check Contact object
        $this->assertNull( $contact );
    }
    
    /**
     * test case for add( )
     * test with names
     * (create and update modes)
     */
    function testAddWithNames( )
    {
        $firstName = 'Shane';
        $lastName  = 'Whatson';
        $params     =  array( 'first_name'   => $firstName,     
                              'last_name'    => $lastName,
                              'contact_type' => 'Individual'
                              );
        
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::add( $params );
        
        //Now check $contact is object of contact DAO..
        $this->assertIsA( $contact, 'CRM_Contact_DAO_Contact', 'Check for created object' );
        $this->assertEqual( $firstName, $contact->first_name, 'Check for first name creation.' );
        $this->assertEqual( $lastName, $contact->last_name, 'Check for last name creation.' );
        
        $contactId = $contact->id;
        
        //update and change first name and last name, using add( )
        $firstName = 'Jane';
        $params = array( 'first_name'   => $firstName, 
                         'contact_type' => 'Individual',
                         'contact_id'   => $contactId );
        
        $contact = CRM_Contact_BAO_Contact::add( $params );
        
        //Now check $contact is object of contact DAO..
        $this->assertIsA( $contact, 'CRM_Contact_DAO_Contact', 'Check for created object' );
        $this->assertEqual( $firstName, $contact->first_name, 'Check for updated first name.' );
        
        $contactId = $contact->id;
        Contact::delete( $contactId );
    }
    
    /**
     * test case for add( )
     * test with all contact params
     * (creat and update modes)
     */
    function testAddWithAll( )
    {
        //take the common contact params
        $params = $this->contactParams( );
        unset( $params['location'] ); 
        $prefComm = $params['preferred_communication_method'];
        require_once 'CRM/Contact/BAO/Contact.php';
        
        //create the contact using add()
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $contactId = $contact->id;
        
        //Now check $contact is object of contact DAO..
        $this->assertIsA( $contact, 'CRM_Contact_DAO_Contact', 'Check for created object' );
        
        //Now check values of object with params.
        $this->assertEqual( $params['first_name'], $contact->first_name, 'Check for first name creation.' );
        $this->assertEqual( $params['last_name'], $contact->last_name, 'Check for last name creation.' );
        $this->assertEqual( $params['middle_name'], $contact->middle_name, 'Check for middle name creation.' );
        $this->assertEqual( $params['contact_type'], $contact->contact_type, 'Check for contact type creation.' );
        $this->assertEqual( '1', $contact->do_not_email, 'Check for do_not_email creation.' );
        $this->assertEqual( '1', $contact->do_not_phone, 'Check for do_not_phone creation.' );
        $this->assertEqual( '1', $contact->do_not_mail, 'Check for do_not_mail creation.' );
        $this->assertEqual( '1', $contact->do_not_trade, 'Check for do_not_trade creation.' );
        $this->assertEqual( '1', $contact->is_opt_out, 'Check for is_opt_out creation.' );
        $this->assertEqual( $params['external_identifier'], $contact->external_identifier, 'Check for external_identifier creation.' );
        $this->assertEqual( $params['last_name']. ', ' .$params['first_name'], $contact->sort_name, 'Check for sort_name creation.' );
        $this->assertEqual( $params['home_URL'], $contact->home_URL, 'Check for home_URL creation.' );
        $this->assertEqual( $params['preferred_mail_format'], $contact->preferred_mail_format, 
                            'Check for preferred_mail_format creation.' );
        $this->assertEqual( $params['contact_source'], $contact->source, 'Check for contact_source creation.' );
        $this->assertEqual( $params['prefix_id'], $contact->prefix_id, 'Check for prefix_id creation.' );
        $this->assertEqual( $params['suffix_id'], $contact->suffix_id, 'Check for suffix_id creation.' );
        $this->assertEqual( $params['greeting_type'], $contact->greeting_type, 'Check for greeting_type creation.' );
        $this->assertEqual( $params['custom_greeting'], $contact->custom_greeting, 'Check for custom_greeting creation.' );
        $this->assertEqual( $params['job_title'], $contact->job_title, 'Check for job_title creation.' ); 
        $this->assertEqual( $params['gender_id'], $contact->gender_id, 'Check for gender_id creation.' ); 
        $this->assertEqual( '1', $contact->is_deceased, 'Check for is_deceased creation.' );
        require_once 'CRM/Utils/Date.php';
        $this->assertEqual( CRM_Utils_Date::format( $params['birth_date']  ), 
                            $contact->birth_date, 'Check for birth_date creation.' ); 
        $this->assertEqual( CRM_Utils_Date::format( $params['deceased_date']  ), 
                            $contact->deceased_date, 'Check for deceased_date creation.' ); 
        require_once 'CRM/Core/BAO/CustomOption.php';
        $dbPrefComm = explode( CRM_Core_BAO_CustomOption::VALUE_SEPERATOR,
                               $contact->preferred_communication_method );
        $checkPrefComm = array( );
        foreach( $dbPrefComm as $key => $value ) {
            if ( $value ) {
                $checkPrefComm[$value] = 1;
            }
        }
        $this->assertAttributesEqual( $checkPrefComm,  $prefComm );
        
        //now update the contact using add( )
        $updateParams    =  array( 'contact_type'          => 'Individual',
                                   'first_name'            => 'Jane',
                                   'middle_name'           => 'abc',
                                   'last_name'             => 'Doe',
                                   'prefix_id'             => 2,
                                   'suffix_id'             => 3,
                                   'nick_name'             => 'Nick Name Second',
                                   'job_title'             => 'software Developer',
                                   'gender_id'             => 1,
                                   'is_deceased'           => 1,
                                   'home_URL'              => 'http://wiki.civicrm.org',
                                   'contact_source'        => 'test update contact',
                                   'external_identifier'   => 111111111,
                                   'preferred_mail_format' => 'Both',
                                   'greeting_type'         => 'Informal',
                                   'custom_greeting'       => 'Custom Greeting Second',
                                   'is_opt_out'            => 0,
                                   'deceased_date'                  => array (
                                                                              'M'            => 3,
                                                                              'd'            => 3,
                                                                              'Y'            => 1981,
                                                                              ),
                                   'birth_date'                     => array (
                                                                              'M'            => 4,
                                                                              'd'            => 4,
                                                                              'Y'            => 1951,
                                                                              ),
                                   'privacy'                        => array (
                                                                              'do_not_phone' => 0,
                                                                              'do_not_email' => 0,
                                                                              'do_not_mail'  => 0,
                                                                              'do_not_trade' => 0,
                                                                              ),
                                   'preferred_communication_method' => array ( 
                                                                              '1'            => 0,
                                                                              '2'            => 1,
                                                                              '3'            => 0,
                                                                              '4'            => 1,
                                                                              '5'            => 0,
                                                                              ),
                                   );
        
        $prefComm = $updateParams['preferred_communication_method'];
        $updateParams['contact_id'] = $contactId;
        require_once 'CRM/Contact/BAO/Contact.php';
        //create the contact using add()
        $contact = CRM_Contact_BAO_Contact::add( $updateParams );
        $contactId = $contact->id;
        
        //Now check $contact is object of contact DAO..
        $this->assertIsA( $contact, 'CRM_Contact_DAO_Contact', 'Check for created object' );
        
        //Now check values of object with params.
        $this->assertEqual( $updateParams['first_name'], $contact->first_name, 'Check for first name creation.' );
        $this->assertEqual( $updateParams['last_name'], $contact->last_name, 'Check for last name creation.' );
        $this->assertEqual( $updateParams['middle_name'], $contact->middle_name, 'Check for middle name creation.' );
        $this->assertEqual( $updateParams['contact_type'], $contact->contact_type, 'Check for contact type creation.' );
        $this->assertEqual( '0', $contact->do_not_email, 'Check for do_not_email creation.' );
        $this->assertEqual( '0', $contact->do_not_phone, 'Check for do_not_phone creation.' );
        $this->assertEqual( '0', $contact->do_not_mail, 'Check for do_not_mail creation.' );
        $this->assertEqual( '0', $contact->do_not_trade, 'Check for do_not_trade creation.' );
        $this->assertEqual( '0', $contact->is_opt_out, 'Check for is_opt_out creation.' );
        $this->assertEqual( $updateParams['external_identifier'], $contact->external_identifier, 
                            'Check for external_identifier creation.' );
        $this->assertEqual( $updateParams['last_name'] . ', ' .$updateParams['first_name'], 
                            $contact->sort_name, 'Check for sort_name creation.' );
        $this->assertEqual( $updateParams['home_URL'], $contact->home_URL, 'Check for home_URL creation.' );
        $this->assertEqual( $updateParams['preferred_mail_format'], $contact->preferred_mail_format, 
                            'Check for preferred_mail_format creation.' );
        $this->assertEqual( $updateParams['contact_source'], $contact->source, 'Check for contact_source creation.' );
        $this->assertEqual( $updateParams['prefix_id'], $contact->prefix_id, 'Check for prefix_id creation.' );
        $this->assertEqual( $updateParams['suffix_id'], $contact->suffix_id, 'Check for suffix_id creation.' );
        $this->assertEqual( $updateParams['greeting_type'], $contact->greeting_type, 'Check for greeting_type creation.' );
        $this->assertEqual( $updateParams['custom_greeting'], $contact->custom_greeting, 'Check for custom_greeting creation.' );
        $this->assertEqual( $updateParams['job_title'], $contact->job_title, 'Check for job_title creation.' ); 
        $this->assertEqual( $updateParams['gender_id'], $contact->gender_id, 'Check for gender_id creation.' ); 
        $this->assertEqual( '1', $contact->is_deceased, 'Check for is_deceased creation.' );
        require_once 'CRM/Utils/Date.php';
        $this->assertEqual( CRM_Utils_Date::format( $updateParams['birth_date']  ), 
                            $contact->birth_date, 'Check for birth_date creation.' ); 
        $this->assertEqual( CRM_Utils_Date::format( $updateParams['deceased_date']  ), 
                            $contact->deceased_date, 'Check for deceased_date creation.' ); 
        require_once 'CRM/Core/BAO/CustomOption.php';
        $dbPrefComm = explode( CRM_Core_BAO_CustomOption::VALUE_SEPERATOR,
                               $contact->preferred_communication_method );
        $checkPrefComm = array( );
        foreach( $dbPrefComm as $key => $value ) {
            if ( $value ) {
                $checkPrefComm[$value] = 1;
            }
        }
        $this->assertAttributesEqual( $checkPrefComm,  $prefComm );
        
        //cleanup DB by deleting the contact
        Contact::delete( $contactId );
    }
    
    /**
     * test case for add( )
     * test with All contact types.
     */
    function testAddWithAllContactTypes( )
    {
        $firstName = 'Bill';
        $lastName  = 'Adams';
        $params    =  array( 'first_name'   => $firstName,     
                             'last_name'    => $lastName,
                             'contact_type' => 'Individual'
                             );
        
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $firstName, $contact->first_name, 'Check for first name creation.' );
        $this->assertEqual( $lastName, $contact->last_name, 'Check for last name creation.' );
        
        $contactId = $contact->id;
        
        //update and change first name and last name, using create()
        $firstName = 'Joan';
        $params = array( 'first_name'   => $firstName, 
                         'contact_type' => 'Individual',
                         'contact_id'   => $contactId );
        
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $firstName, $contact->first_name, 'Check for updated first name.' );
        $contactId = $contact->id;
        Contact::delete( $contactId );
        
        $householdName = 'Adams house';
        $params        = array( 'household_name' => $householdName,
                                'contact_type'   => 'Household'
                                );
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $householdName, $contact->sort_name, 'Check for created household.' );
        $contactId = $contact->id;
        
        //update and change name of household, using create
        $householdName = 'Joans home';
        $params = array( 'household_name' => $householdName,
                         'contact_type' => 'Household',
                         'contact_id'   => $contactId );
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $householdName, $contact->sort_name, 'Check for updated household.' );
        Contact::delete( $contactId );
        
        $organizationName = 'My Organization';
        $params = array( 'organization_name' => $organizationName, 
                         'contact_type'      => 'Organization' );
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $organizationName, $contact->sort_name, 'Check for created organization.' );
        $contactId = $contact->id;
        
        //update and change name of organization, using create
        $organizationName = 'Your Changed Organization';
        $params = array( 'organization_name' => $organizationName,
                         'contact_type' => 'Organization',
                         'contact_id'   => $contactId );
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $organizationName, $contact->sort_name, 'Check for updated organization.' );
        Contact::delete( $contactId );
    }
    
    /**
     * test case for create( )
     * test with missing params.
     */
    function testCreateWithEmptyParams( )
    {
        $params = array(
                        'first_name' => 'Bill',
                        'last_name'  => 'Adams',
                        );
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::create( $params );
        
        //Now check Contact object
        $this->assertNull( $contact );
    }
    
    /**
     * test case for create( )
     * test with all params.
     * ( create and update modes ).
     */
    function testCreateWithAll( )
    {
        //take the common contact params
        $params = $this->contactParams( );
        $params['note'] = 'test note';
        
        require_once 'CRM/Contact/BAO/Contact.php';
        //create the contact with given params.
        $contact = CRM_Contact_BAO_Contact::create( $params );
        
        //Now check $contact is object of contact DAO..
        $this->assertIsA( $contact, 'CRM_Contact_DAO_Contact', 'Check for created object' );
        $contactId = $contact->id;
        
        //Now check values of contact object with params.
        $this->assertEqual( $params['first_name'], $contact->first_name, 'Check for first name creation.' );
        $this->assertEqual( $params['last_name'], $contact->last_name, 'Check for last name creation.' );
        $this->assertEqual( $params['contact_type'], $contact->contact_type, 'Check for contact type creation.' );
        
        //Now check DB for Address
        $searchParams  = array( 'contact_id'             => $contactId, 
                                'location_type_id'       => 1, 
                                'is_primary'             => 1 );
        $compareParams = array( 'street_address'         => CRM_Utils_Array::value( 'street_address', $params['location'][1]['address']),
                                'supplemental_address_1' => CRM_Utils_Array::value( 'supplemental_address_1', 
                                                                                    $params['location'][1]['address'] ),
                                'supplemental_address_2' => CRM_Utils_Array::value( 'supplemental_address_2', 
                                                                                    $params['location'][1]['address'] ),
                                'city'                   => CRM_Utils_Array::value( 'city', $params['location'][1]['address'] ),
                                'postal_code'            => CRM_Utils_Array::value( 'postal_code', $params['location'][1]['address'] ),
                                'country_id'             => CRM_Utils_Array::value( 'country_id', $params['location'][1]['address'] ),
                                'state_province_id'      => CRM_Utils_Array::value( 'state_province_id', 
                                                                                    $params['location'][1]['address'] ),
                                'geo_code_1'             => CRM_Utils_Array::value( 'geo_code_1', $params['location'][1]['address'] ),
                                'geo_code_2'             => CRM_Utils_Array::value( 'geo_code_2', $params['location'][1]['address']) );
        $this->assertDBCompareValues( 'CRM_Core_DAO_Address', $searchParams, $compareParams );
        //Now check DB for Email
        $compareParams = array( 'email'                  => CRM_Utils_Array::value( 'email', $params['location'][1]['email'][1] ) );
        $this->assertDBCompareValues('CRM_Core_DAO_Email', $searchParams, $compareParams );
        //Now check DB for openid
        $compareParams = array ( 'openid'                => CRM_Utils_Array::value( 'openid', $params['location'][1]['openid'][1] ) );
        $this->assertDBCompareValues('CRM_Core_DAO_OpenID', $searchParams, $compareParams );
        //Now check DB for IM
        $compareParams = array( 'name'                   => CRM_Utils_Array::value( 'name', $params['location'][1]['im'][1] ),
                                'provider_id'            => CRM_Utils_Array::value( 'provider_id', $params['location'][1]['im'][1] ) );
        $this->assertDBCompareValues('CRM_Core_DAO_IM', $searchParams, $compareParams );
        //Now check DB for Phone
        $searchParams = array( 'contact_id'              => $contactId, 
                               'location_type_id'        => 1, 
                               'is_primary'              => 1,
                               'phone_type'              => CRM_Utils_Array::value( 'phone_type', $params['location'][1]['phone'][1] ) );
        $compareParams = array( 'phone'                  => CRM_Utils_Array::value( 'phone', $params['location'][1]['phone'][1] ) );
        $this->assertDBCompareValues('CRM_Core_DAO_Phone', $searchParams, $compareParams );
        //Now check DB for Mobile
        $searchParams = array( 'contact_id'              => $contactId, 
                               'location_type_id'        => 1, 
                               'phone_type'              => CRM_Utils_Array::value( 'phone_type', $params['location'][1]['phone'][2] ) );
        $compareParams = array( 'phone'                  => CRM_Utils_Array::value( 'phone', $params['location'][1]['phone'][2] ) );
        $this->assertDBCompareValues('CRM_Core_DAO_Phone', $searchParams, $compareParams );
        //Now check DB for Note
        $searchParams  = array( 'entity_id'    => $contactId,
                                'entity_table' => 'civicrm_contact'); 
        $compareParams = array( 'note' => $params['note'] );
        $this->assertDBCompareValues('CRM_Core_DAO_Note', $searchParams, $compareParams );
        
        //update the contact.
        $updateParams = array(
                              'first_name'   => 'John',
                              'last_name'    => 'Doe',
                              'contact_type' => 'Individual',
                              'note'         => 'new test note',
                              );
        $updateParams['location'][1] = array ( 'location_type_id'                               => 1,
                                               'is_primary'                                     => 1,
                                               'address' =>  array ( 
                                                                    'street_address'            => 'Oberoi Garden',
                                                                    'supplemental_address_1'    => 'A-wing:3037',
                                                                    'supplemental_address_2'    => 'Andhery',
                                                                    'city'                      => 'Mumbai',
                                                                    'postal_code'               => '12345',
                                                                    'country_id'                => 1228,
                                                                    'state_province_id'         => 1004,
                                                                    'geo_code_1'                => '31.694842',
                                                                    'geo_code_2'                => '-106.29998',
                                                                    ),
                                               'email'   => array ( 
                                                                   '1' => array ( 'email'       => 'john.doe@example.org' ), 
                                                                   ),
                                               'phone'   => array (
                                                                   '1' => array (
                                                                                 'phone_type'   => 'Phone',
                                                                                 'phone'        => '02115245336',
                                                                                 ),
                                                                   '2' => array (
                                                                                 'phone_type'   => 'Mobile',
                                                                                 'phone'        => '9766323895',
                                                                                 ),
                                                                   ),
                                               'openid'  => array (
                                                                   '1' => array ( 'openid'      => 'http://wiki.civicrm.org' ),
                                                                   ),
                                               'im'      => array (
                                                                   '1' => array ( 'name'        => 'john.doe',
                                                                                  'provider_id' => 1
                                                                                  ),
                                                                   ),
                                               );
        $updateParams['contact_id'] = $contactId;
        require_once 'CRM/Contact/BAO/Contact.php';
        //create the contact with given params.
        $contact = CRM_Contact_BAO_Contact::create( $updateParams );
        
        //Now check $contact is object of contact DAO..
        $this->assertIsA( $contact, 'CRM_Contact_DAO_Contact', 'Check for created object' );
        $contactId = $contact->id;
        
        //Now check values of contact object with updated params.
        $this->assertEqual( $updateParams['first_name'], $contact->first_name, 'Check for first name creation.' );
        $this->assertEqual( $updateParams['last_name'], $contact->last_name, 'Check for last name creation.' );
        $this->assertEqual( $updateParams['contact_type'], $contact->contact_type, 'Check for contact type creation.' );
        
        //Now check DB for updated Address
        $searchParams  = array( 'contact_id'             => $contactId, 
                                'location_type_id'       => 1, 
                                'is_primary'             => 1 );
        $compareParams = array( 'street_address'         => 'Oberoi Garden',
                                'supplemental_address_1' => 'A-wing:3037',
                                'supplemental_address_2' => 'Andhery',
                                'city'                   => 'Mumbai',
                                'postal_code'            => '12345',
                                'country_id'             => 1228,
                                'state_province_id'      => 1004,
                                'geo_code_1'             => '31.694842',
                                'geo_code_2'             => '-106.29998' );
        $this->assertDBCompareValues( 'CRM_Core_DAO_Address', $searchParams, $compareParams );
        //Now check DB for updated Email
        $compareParams = array( 'email'                  => 'john.doe@example.org' );
        $this->assertDBCompareValues('CRM_Core_DAO_Email', $searchParams, $compareParams );
        //Now check DB for updated openid
        $compareParams = array ( 'openid'                => 'http://wiki.civicrm.org' );
        $this->assertDBCompareValues('CRM_Core_DAO_OpenID', $searchParams, $compareParams );
        //Now check DB for updated IM
        $compareParams = array( 'name'                   => 'john.doe',
                                'provider_id'            => 1 );
        $this->assertDBCompareValues('CRM_Core_DAO_IM', $searchParams, $compareParams );
        //Now check DB for updated Phone
        $searchParams = array( 'contact_id'              => $contactId, 
                               'location_type_id'        => 1, 
                               'is_primary'              => 1,
                               'phone_type'              => 'Phone' );
        $compareParams = array( 'phone'                  => '02115245336' );
        $this->assertDBCompareValues('CRM_Core_DAO_Phone', $searchParams, $compareParams );
        //Now check DB for updated Mobile
        $searchParams = array( 'contact_id'              => $contactId, 
                               'location_type_id'        => 1, 
                               'phone_type'              => 'Mobile' );
        $compareParams = array( 'phone'                  => '9766323895' );
        $this->assertDBCompareValues('CRM_Core_DAO_Phone', $searchParams, $compareParams );
        //As we are not updating note
        //Now check DB for New Note
        $noteId = $this->assertDBNotNull( 'CRM_Core_DAO_Note', $updateParams['note'], 'id', 'note', 
                                          'Database check for New created note ' );
        //cleanup DB by deleting the contact
        Contact::delete( $contactId );
    }
    
    /**
     * test case for resolveDefaults( )
     * test all pseudoConstant, stateProvince, country. 
     */
    function testResolveDefaults( )
    {
        $params = array( 'prefix_id'  => 3,
                         'suffix_id'  => 2,
                         'gender_id'  => 2,
                         'birth_date' => '1983-12-13',
                         );
        
        $params['location'][1] = array ( 'location_type_id'                       => 1,
                                         'is_primary'                             => 1,
                                         'address' =>  array ( 
                                                              'country_id'        => 1228,
                                                              'state_province_id' => 1004,
                                                              )
                                         );
        require_once 'CRM/Contact/BAO/Contact.php';
        CRM_Contact_BAO_Contact::resolveDefaults( $params );
        
        //check the resolve values.
        require_once 'CRM/Core/PseudoConstant.php';
        $genders = CRM_Core_PseudoConstant::gender( );
        $this->assertEqual( $genders[$params['gender_id']], $params['gender'], 'Check for gender.' );
        $prefix = CRM_Core_PseudoConstant::individualPrefix( );
        $this->assertEqual( $prefix[$params['prefix_id']], $params['prefix'], 'Check for prefix.' );
        $suffix = CRM_Core_PseudoConstant::individualSuffix( );
        $this->assertEqual( $suffix[$params['suffix_id']], $params['suffix'], 'Check for suffix.' );
        $this->assertEqual( CRM_Core_PseudoConstant::stateProvince( $params['location'][1]['address']['state_province_id'] ),
                            $params['location'][1]['address']['state_province'], 
                            'Check for state province.' );
        $this->assertEqual( CRM_Core_PseudoConstant::country( $params['location'][1]['address']['country_id'] ),
                            $params['location'][1]['address']['country'], 
                            'Check for country.' );
    }
    
    /**
     * test case for retrieve( )
     * test with all values. 
     */
    function testRetrieve( )
    {
        //take the common contact params
        $params = $this->contactParams( );
        $params['note']            = 'test note';
        $params['create_employer'] = 'Yahoo';
        $params['group']           = array( 
                                           '1' => 1,
                                           '2' => 1,
                                           );
        
        require_once 'CRM/Contact/BAO/Contact.php';
        //create the contact with given params.
        $contact = CRM_Contact_BAO_Contact::create( $params );
        //Now check $contact is object of contact DAO..
        $this->assertIsA( $contact, 'CRM_Contact_DAO_Contact', 'Check for created object' );
        $contactId = $contact->id;
        //create employee of relationship.
        require_once 'CRM/Contact/BAO/Contact/Utils.php';
        CRM_Contact_BAO_Contact_Utils::createCurrentEmployerRelationship( $contactId, $params['create_employer'] );
        //add contact to group
        require_once 'CRM/Contact/BAO/GroupContact.php';
        CRM_Contact_BAO_GroupContact::create( $params['group'], $contactId );
        
        //retrieve the contact values from database.
        $values = array( );
        $searchParams = array( 'contact_id' => $contactId );
        $retrieveContact = CRM_Contact_BAO_Contact::retrieve( $searchParams, $values );
        
        //Now check $retrieveContact is object of contact DAO..
        $this->assertIsA( $retrieveContact, 'CRM_Contact_DAO_Contact', 'Check for retrieve object' );
        
        //Now check the ids.
        $this->assertEqual( $contactId, $retrieveContact->id, 'Check for contact id' );
        
        //Now check values retrieve from database with params.
        $this->assertEqual( $params['first_name'], $values['first_name'], 'Check for first name creation.' );
        $this->assertEqual( $params['last_name'], $values['last_name'], 'Check for last name creation.' );
        $this->assertEqual( $params['contact_type'], $values['contact_type'], 'Check for contact type creation.' );
        
        //Now check values of address
        $this->assertAttributesEqual( CRM_Utils_Array::value( 'address', $params['location'][1] ),
                                      CRM_Utils_Array::value( 'address', $values['location'][1] ) );
        
        //Now check values of email
        $this->assertAttributesEqual( CRM_Utils_Array::value( '1', $params['location'][1]['email'] ),
                                      CRM_Utils_Array::value( '1', $values['location'][1]['email'] ) );
        
        //Now check values of phone
        $this->assertAttributesEqual( CRM_Utils_Array::value( '1', $params['location'][1]['phone'] ),
                                      CRM_Utils_Array::value( '1', $values['location'][1]['phone'] ) );
        
        //Now check values of mobile
        $this->assertAttributesEqual( CRM_Utils_Array::value( '2', $params['location'][1]['phone'] ),
                                      CRM_Utils_Array::value( '2', $values['location'][1]['phone'] ) ); 
        
        //Now check values of openid
        $this->assertAttributesEqual( CRM_Utils_Array::value( '1', $params['location'][1]['openid'] ),
                                      CRM_Utils_Array::value( '1', $values['location'][1]['openid'] ) );
        
        //Now check values of im
        $this->assertAttributesEqual( CRM_Utils_Array::value( '1', $params['location'][1]['im'] ),
                                      CRM_Utils_Array::value( '1', $values['location'][1]['im'] ) );
        
        //Now check values of Note Count.
        $this->assertEqual( 1, $values['noteTotalCount'], 'Check for total note count' );
        
        foreach( $values['note'] as $key => $val ) {
            $retrieveNote = CRM_Utils_Array::value( 'note', $val );
            //check the note value
            $this->assertEqual( $params['note'], $retrieveNote, 'Check for note' );
        }
        
        //Now check values of Relationship Count.
        $this->assertEqual( 1, $values['relationship']['totalCount'], 'Check for total relationship count' );
        foreach( $values['relationship']['data'] as $key => $val ) {
            //Now check values of Relationship organization.
            $this->assertEqual( $params['create_employer'], $val['name'], 'Check for organization' );  
            //Now check values of Relationship type.
            $this->assertEqual( 'Employee of', $val['relation'], 'Check for relationship type' );
            //delete the organization.
            Contact::delete( CRM_Utils_Array::value( 'cid', $val ) );
        }
        
        //Now check values of group Count.
        $this->assertEqual( 2, $values['group']['totalCount'], 'Check for total group count' );
        
        //Now check values of group ids.
        $groupIds = array( );
        foreach( $values['group']['data'] as $key => $val  ) {
            $groupIds[$val['group_id']] = 1;
        }
        $this->assertAttributesEqual( $params['group'], $groupIds );
        
        //cleanup DB by deleting the contact
        Contact::delete( $contactId );
    }
    
    /**
     * test case for deleteContact( )
     */
    function testDeleteContact( )
    {
        $contactParams = $this->contactParams( );

        //create contact
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::create( $contactParams );
        $contactId = $contact->id;

        // Retrieve the custom fieldID for sample custom field 'Marital Status'
        $params = array( );
        $params = array( 'label'   => 'Marital Status');
        $field  = array( );
        
        require_once 'CRM/Core/BAO/CustomField.php';
        CRM_Core_BAO_CustomField::retrieve( $params, $field );
        $fieldID = $field['id'];
        
        // Set custom field value for the contact
        require_once 'CRM/Core/BAO/CustomValueTable.php';
        $params = array( 'entityID'           => $contactId,
                        'custom_' . $fieldID => 'S');
        $result = CRM_Core_BAO_CustomValueTable::setValues( $params );
        // Make sure this worked (no error)
        $this->assertEqual( $result['is_error'], 0, 'Verify that is_error = 0 (success on setting custom field value).');
        
        //delete contact.
        CRM_Contact_BAO_Contact::deleteContact( $contactId );
        
        //Now check DB for location elements.
        //Now check DB for Address

        $this->assertDBNull( 'CRM_Core_DAO_Address', CRM_Utils_Array::value( 'street_address', $contactParams['location'][1]['address']), 
                             'id', 'street_address', 'Database check, Address deleted successfully.' );
        
        //Now check DB for Email
        $this->assertDBNull( 'CRM_Core_DAO_Email', CRM_Utils_Array::value( 'email', $contactParams['location'][1]['email'][1] ), 
                             'id', 'email', 'Database check, Email deleted successfully.' );
        //Now check DB for Phone
        $this->assertDBNull( 'CRM_Core_DAO_Phone', CRM_Utils_Array::value( 'phone', $contactParams['location'][1]['phone'][1] ), 
                             'id', 'phone', 'Database check, Phone deleted successfully.' );
        //Now check DB for Mobile
        $this->assertDBNull( 'CRM_Core_DAO_Phone', CRM_Utils_Array::value( 'phone', $contactParams['location'][1]['phone'][2] ),
                             'id', 'phone', 'Database check, Mobile deleted successfully.' );
        //Now check DB for IM
        $this->assertDBNull( 'CRM_Core_DAO_IM', CRM_Utils_Array::value( 'name', $contactParams['location'][1]['im'][1] ),
                             'id', 'name', 'Database check, IM deleted successfully.' );
        //Now check DB for openId
        $this->assertDBNull( 'CRM_Core_DAO_OpenID', CRM_Utils_Array::value( 'openid', $contactParams['location'][1]['openid'][1] ),
                             'id', 'name', 'Database check, openId deleted successfully.' );

        // Check that the custom field value is no longer present
        $params = array( 'entityID'           => $contactId,
                         'custom_' . $fieldID => 1);
        $values = CRM_Core_BAO_CustomValueTable::getValues( $params );

        $this->assertEqual( $values['custom_' . $fieldID], 'S', 'Verify that the data value is empty for contact ' . $contactId);
        $this->assertEqual( $values['is_error'], 0, 'Verify that is_error = 0 (success).');
        
        //Now check DB for contact.
        $this->assertDBNull( 'CRM_Contact_DAO_Contact', $contactParams['last_name'] . ', ' . $contactParams['first_name'], 
                             'id', 'sort_name', 'Database check, contact deleted successfully.' );
    }
    
    /**
     * test case for createProfileContac( )
     * test with all params.
     * ( create and update modes )
     */
    function testCreateProfileContact( )
    {
        require_once 'CRM/Contact/BAO/Contact.php';
        $fields = CRM_Contact_BAO_Contact::exportableFields('Individual');
        
        //current employer field for individual
        $fields['organization_name'] =   array ('name' => 'organization_name',
                                                'where' => 'civicrm_organization.organization_name',
                                                'title' => 'Current Employer');
        //get the common params
        $contactParams = $this->contactParams( );
        $unsetParams = array( 'location', 'gender_id', 'prefix_id', 'suffix_id', 'privacy' );
        foreach ( $unsetParams as $param ) {
            unset( $contactParams[$param] );
        }
        
        $profileParams = array (
                                'organization_name'              => 'Yahoo',
                                'gender'                         => '2',
                                'individual_prefix'              => '3',
                                'individual_suffix'              => '2',
                                'city-Primary'                   => 'Newark',
                                'contact_sub_type'               => 'Individual',
                                'country-Primary'                => '1228',
                                'do_not_email'                   => '1',
                                'do_not_mail'                    => '1',
                                'do_not_phone'                   => '1',
                                'do_not_trade'                   => '1',
                                'email-Primary'                  => 'john.smith@example.org',
                                'geo_code_1-Primary'             => '18.219023',
                                'geo_code_2-Primary'             => '-105.00973',
                                'im-Primary-provider_id'         => '1',
                                'im-Primary'                     => 'john.smith',
                                'on_hold'                        => '1',
                                'openid'                         => 'john.smith@example.org',
                                'phone-Primary'                  => '303443689',
                                'phone-Primary-Mobile'           => '9833910234',
                                'postal_code-Primary'            => '01903',
                                'postal_code_suffix-Primary'     => '12345',
                                'state_province-Primary'         => '1029',
                                'street_address-Primary'         => 'Saint Helier St',
                                'supplemental_address_1-Primary' => 'Hallmark Ct',
                                'supplemental_address_2-Primary' => 'Jersey Village',
                                'user_unique_id'                 => '123456789',
                                'is_bulkmail'                    => '1',
                                'world_region'                   => 'India',
                                'tag'                            => array (
                                                                           '3' => '1',
                                                                           '4' => '1',
                                                                           '1' => '1',
                                                                           ),
                                'group'                          => array ( 
                                                                           '1' => '1',
                                                                           '2' => '1',
                                                                           ),
                                );
        $createParams = array_merge( $contactParams, $profileParams );
        $groupContact = array ( '1' => '1',
                                '2' => '1');
        //create the contact using create profile contact.
        $contactId = CRM_Contact_BAO_Contact::createProfileContact( $createParams, $fields, null, $groupContact, null, null, true ); 
        
        //get the parameters to compare.
        $params =  $this->contactParams( );
        
        //check the values in DB.
        foreach ( $params as $key => $val ) { 
            if ( ! is_array( $params[$key] ) ) { 
                if ( $key == 'contact_source' ) {
                    $this->assertDBCompareValue(  'CRM_Contact_DAO_Contact', $contactId, 'source', 
                                                  'id',$params[$key], "Check for {$key} creation." );
                } else {
                    $this->assertDBCompareValue(  'CRM_Contact_DAO_Contact', $contactId, $key, 
                                                  'id',$params[$key], "Check for {$key} creation." );
                }
            }
        }
        
        //check privacy options.
        foreach ( $params['privacy'] as $key => $value ) {
            $this->assertDBCompareValue(  'CRM_Contact_DAO_Contact', $contactId, $key, 
                                          'id',  $params['privacy'][$key], 'Check for do_not_email creation.' );
        }
        
        $this->assertDBCompareValue(  'CRM_Contact_DAO_Contact', $contactId, 'contact_sub_type', 
                                      'id',$profileParams['contact_sub_type'],'Check for contact sub type creation.');
        $this->assertDBCompareValue(  'CRM_Contact_DAO_Contact', $contactId, 'user_unique_id', 
                                      'id', $profileParams['user_unique_id'], 'Check for user_unique_id creation.');
        
        require_once 'CRM/Utils/Date.php';
        $this->assertDBCompareValue(  'CRM_Contact_DAO_Contact', $contactId, 'birth_date', 
                                      'id', CRM_Utils_Date::format( $params['birth_date'], '-' ),'Check for birth_date creation.');
        
        $this->assertDBCompareValue(  'CRM_Contact_DAO_Contact', $contactId, 'deceased_date', 
                                      'id', CRM_Utils_Date::format( $params['deceased_date'], '-' ),'Check for deceased_date creation.');
        
        require_once 'CRM/Core/BAO/CustomOption.php';
        $dbPrefComm = explode( CRM_Core_BAO_CustomOption::VALUE_SEPERATOR,
                               CRM_Core_DAO::getFieldValue( 'CRM_Contact_DAO_Contact', $contactId, 'preferred_communication_method' ) );
        $checkPrefComm = array( );
        foreach( $dbPrefComm as $key => $value ) {
            if ( $value ) {
                $checkPrefComm[$value] = 1;
            }
        }
        $this->assertAttributesEqual( $checkPrefComm,  $params['preferred_communication_method'] );
        
        //Now check DB for Address
        $searchParams  = array( 'contact_id'             => $contactId, 
                                'location_type_id'       => 1, 
                                'is_primary'             => 1 );
        $compareParams = array( 'street_address'         => CRM_Utils_Array::value( 'street_address-Primary', $profileParams ),
                                'supplemental_address_1' => CRM_Utils_Array::value( 'supplemental_address_1-Primary', $profileParams ),
                                'supplemental_address_2' => CRM_Utils_Array::value( 'supplemental_address_2-Primary', $profileParams ),
                                'city'                   => CRM_Utils_Array::value( 'city-Primary', $profileParams ),
                                'postal_code'            => CRM_Utils_Array::value( 'postal_code-Primary', $profileParams ),
                                'country_id'             => CRM_Utils_Array::value( 'country-Primary', $profileParams ),
                                'state_province_id'      => CRM_Utils_Array::value( 'state_province-Primary', $profileParams ),
                                'geo_code_1'             => CRM_Utils_Array::value( 'geo_code_1-Primary', $profileParams ),
                                'geo_code_2'             => CRM_Utils_Array::value( 'geo_code_2-Primary', $profileParams ) );
        $this->assertDBCompareValues( 'CRM_Core_DAO_Address', $searchParams, $compareParams );
        
        //Now check DB for Email
        $compareParams = array( 'email'                  => CRM_Utils_Array::value( 'email-Primary', $profileParams ) );
        $this->assertDBCompareValues('CRM_Core_DAO_Email', $searchParams, $compareParams );
        
        //Now check DB for IM
        $compareParams = array( 'name'                   => CRM_Utils_Array::value( 'im-Primary', $profileParams ),
                                'provider_id'            => CRM_Utils_Array::value( 'im-Primary-provider_id', $profileParams ) );
        $this->assertDBCompareValues('CRM_Core_DAO_IM', $searchParams, $compareParams );
        
        //Now check DB for Phone
        $searchParams = array( 'contact_id'              => $contactId, 
                               'location_type_id'        => 1, 
                               'is_primary'              => 1 );
        $compareParams = array( 'phone'                  => CRM_Utils_Array::value( 'phone-Primary', $profileParams ) );
        $this->assertDBCompareValues('CRM_Core_DAO_Phone', $searchParams, $compareParams );
        
        //Now check DB for Mobile
        $searchParams = array( 'contact_id'              => $contactId, 
                               'location_type_id'        => 1, 
                               'phone_type'              => CRM_Utils_Array::value( 'phone_type', $params['location'][1]['phone'][2] ) );
        $compareParams = array( 'phone'                  => CRM_Utils_Array::value( 'phone-Primary-Mobile', $profileParams ) );
        $this->assertDBCompareValues('CRM_Core_DAO_Phone', $searchParams, $compareParams );
        
        //get the value of relationship
        $values = array( );
        $searchParams = array( 'contact_id' => $contactId );
        $relationship = CRM_Contact_BAO_Relationship::getValues( $searchParams,  $values );
        //Now check values of Relationship Count.
        $this->assertEqual( 1, $values['relationship']['totalCount'], 'Check for total relationship count' );
        foreach( $values['relationship']['data'] as $key => $val ) {
            //Now check values of Relationship organization.
            $this->assertEqual( $profileParams['organization_name'], $val['name'], 'Check for organization' );  
            //Now check values of Relationship type.
            $this->assertEqual( 'Employee of', $val['relation'], 'Check for relationship type' );
            //delete the organization.
            Contact::delete( CRM_Utils_Array::value( 'cid', $val ) );
        }
        
        //get the value of groups
        $groupContact = CRM_Contact_BAO_GroupContact::getValues( $searchParams, $values );
        //Now check values of group Count.
        $this->assertEqual( 2, $values['group']['totalCount'], 'Check for total group count' );
        //Now check values of group ids.
        $groupIds = array( );
        foreach( $values['group']['data'] as $key => $val  ) {
            $groupIds[$val['group_id']] = 1;
        }
        $this->assertAttributesEqual( $profileParams['group'], $groupIds );
        
        //Now check values of tag ids.
        require_once 'CRM/Core/BAO/EntityTag.php';
        $tags = CRM_Core_BAO_EntityTag::getTag( $contactId );
        foreach( $tags as $key => $val ) {
            $tagIds[$key] = 1;
        }
        $this->assertAttributesEqual( $profileParams['tag'], $tagIds );
        
        //update Contact mode
        $updateCParams =  array( 
                                'first_name'            => 'john',
                                'last_name'             => 'doe',
                                'contact_type'          => 'Individual',
                                'middle_name'           => 'abc',
                                'prefix_id'             => 2,
                                'suffix_id'             => 3,
                                'nick_name'             => 'Nick Name Updated',
                                'job_title'             => 'software Developer',
                                'gender_id'             => 1,
                                'is_deceased'           => 1,
                                'home_URL'              => 'http://civicrmUpdate.org',
                                'contact_source'        => 'test contact',
                                'external_identifier'   => 111222333,
                                'preferred_mail_format' => 'Both',
                                'greeting_type'         => 'Informal',
                                'custom_greeting'       => 'Custom Greeting update',
                                'is_opt_out'            => 0,
                                'legal_identifier'      => '123123123123',
                                'image_URL'             => 'http://imageupdate.com',
                                'deceased_date'                  => array (
                                                                           'M'            => 10,
                                                                           'd'            => 10,
                                                                           'Y'            => 1981,
                                                                           ),
                                'birth_date'                     => array (
                                                                           'M'            => 11,
                                                                           'd'            => 11,
                                                                           'Y'            => 1951,
                                                                           ),
                                'privacy'                        => array (
                                                                           'do_not_phone' => 1,
                                                                           'do_not_email' => 1,
                                                                           ),
                                'preferred_communication_method' => array ( 
                                                                           '1'            => 0,
                                                                           '2'            => 1,
                                                                           '3'            => 0,
                                                                           '4'            => 1,
                                                                           '5'            => 0,
                                                                           ),
                                );
        
        $updatePfParams =  array (
                                  'organization_name'              => 'Google',
                                  'gender'                         => '1',
                                  'individual_prefix'              => '2',
                                  'individual_suffix'              => '3',
                                  'city-Primary'                   => 'Mumbai',
                                  'contact_sub_type'               => 'Individual',
                                  'country-Primary'                => '1228',
                                  'do_not_email'                   => '1',
                                  'do_not_mail'                    => '1',
                                  'do_not_phone'                   => '1',
                                  'do_not_trade'                   => '1',
                                  'email-Primary'                  => 'john.doe@example.org',
                                  'geo_code_1-Primary'             => '31.694842',
                                  'geo_code_2-Primary'             => '-106.29998',
                                  'im-Primary-provider_id'         => '1',
                                  'im-Primary'                     => 'john.doe',
                                  'on_hold'                        => '1',
                                  'openid'                         => 'john.doe@example.org',
                                  'phone-Primary'                  => '02115245336',
                                  'phone-Primary-Mobile'           => '9766323895',
                                  'postal_code-Primary'            => '12345',
                                  'postal_code_suffix-Primary'     => '123',
                                  'state_province-Primary'         => '1004',
                                  'street_address-Primary'         => 'Oberoi Garden',
                                  'supplemental_address_1-Primary' => 'A-wing:3037',
                                  'supplemental_address_2-Primary' => 'Andhery',
                                  'user_unique_id'                 => '1122334455',
                                  'is_bulkmail'                    => '1',
                                  'world_region'                   => 'India',
                                  'tag'                            => array (
                                                                             '2' => '1',
                                                                             '5' => '1',
                                                                             ),
                                  'group'                          => array ( 
                                                                             '3' => '1',
                                                                             ),
                                  );
        
        $createParams = array_merge( $updateCParams, $updatePfParams );
        $groupContact = array ( '3' => '1');
        //create the contact using create profile contact.
        $contactID = CRM_Contact_BAO_Contact::createProfileContact( $createParams, $fields, $contactId, 
                                                                    $groupContact, null, null, true ); 
        
        //check the contact ids
        $this->assertEqual( $contactId, $contactID, 'check for Contact ids' );
        
        //check the values in DB.
        foreach ( $updateCParams as $key => $val ) { 
            if ( ! is_array( $updateCParams[$key] ) ) { 
                if ( $key == 'contact_source' ) {
                    $this->assertDBCompareValue(  'CRM_Contact_DAO_Contact', $contactId, 'source', 
                                                  'id',$updateCParams[$key], "Check for {$key} creation." );
                } else {
                    $this->assertDBCompareValue(  'CRM_Contact_DAO_Contact', $contactId, $key, 
                                                  'id',$updateCParams[$key], "Check for {$key} creation." );
                }
            }
        }
        
        //check privacy options.
        foreach ( $updateCParams['privacy'] as $key => $value ) {
            $this->assertDBCompareValue(  'CRM_Contact_DAO_Contact', $contactId, $key, 
                                          'id',  $updateCParams['privacy'][$key], 'Check for do_not_email creation.' );
        }
        
        $this->assertDBCompareValue(  'CRM_Contact_DAO_Contact', $contactId, 'contact_sub_type', 
                                      'id',$updatePfParams['contact_sub_type'],'Check for contact sub type creation.');
        $this->assertDBCompareValue(  'CRM_Contact_DAO_Contact', $contactId, 'user_unique_id', 
                                      'id', $updatePfParams['user_unique_id'], 'Check for user_unique_id creation.');
        
        require_once 'CRM/Utils/Date.php';
        $this->assertDBCompareValue(  'CRM_Contact_DAO_Contact', $contactId, 'birth_date', 'id', 
                                      CRM_Utils_Date::format( $updateCParams['birth_date'], '-' ),'Check for birth_date creation.');
        
        $this->assertDBCompareValue(  'CRM_Contact_DAO_Contact', $contactId, 'deceased_date', 'id',
                                      CRM_Utils_Date::format( $updateCParams['deceased_date'], '-'),'Check for deceased_date creation.');
        
        require_once 'CRM/Core/BAO/CustomOption.php';
        $dbPrefComm = explode( CRM_Core_BAO_CustomOption::VALUE_SEPERATOR,
                               CRM_Core_DAO::getFieldValue( 'CRM_Contact_DAO_Contact', $contactId, 'preferred_communication_method' ) );
        $checkPrefComm = array( );
        foreach( $dbPrefComm as $key => $value ) {
            if ( $value ) {
                $checkPrefComm[$value] = 1;
            }
        }
        $this->assertAttributesEqual( $checkPrefComm,  $updateCParams['preferred_communication_method'] );
        
        //Now check DB for Address
        $searchParams  = array( 'contact_id'             => $contactId, 
                                'location_type_id'       => 1, 
                                'is_primary'             => 1 );
        $compareParams = array( 'street_address'         => CRM_Utils_Array::value( 'street_address-Primary', $updatePfParams ),
                                'supplemental_address_1' => CRM_Utils_Array::value( 'supplemental_address_1-Primary', $updatePfParams ),
                                'supplemental_address_2' => CRM_Utils_Array::value( 'supplemental_address_2-Primary', $updatePfParams ),
                                'city'                   => CRM_Utils_Array::value( 'city-Primary', $updatePfParams ),
                                'postal_code'            => CRM_Utils_Array::value( 'postal_code-Primary', $updatePfParams ),
                                'country_id'             => CRM_Utils_Array::value( 'country-Primary', $updatePfParams ),
                                'state_province_id'      => CRM_Utils_Array::value( 'state_province-Primary', $updatePfParams ),
                                'geo_code_1'             => CRM_Utils_Array::value( 'geo_code_1-Primary', $updatePfParams ),
                                'geo_code_2'             => CRM_Utils_Array::value( 'geo_code_2-Primary', $updatePfParams ) );
        $this->assertDBCompareValues( 'CRM_Core_DAO_Address', $searchParams, $compareParams );
        
        //Now check DB for Email
        $compareParams = array( 'email'                  => CRM_Utils_Array::value( 'email-Primary', $updatePfParams ) );
        $this->assertDBCompareValues('CRM_Core_DAO_Email', $searchParams, $compareParams );
        
        //Now check DB for IM
        $compareParams = array( 'name'                   => CRM_Utils_Array::value( 'im-Primary', $updatePfParams ),
                                'provider_id'            => CRM_Utils_Array::value( 'im-Primary-provider_id', $updatePfParams ) );
        $this->assertDBCompareValues('CRM_Core_DAO_IM', $searchParams, $compareParams );
        
        //Now check DB for Phone
        $searchParams = array( 'contact_id'              => $contactId, 
                               'location_type_id'        => 1, 
                               'is_primary'              => 1 );
        $compareParams = array( 'phone'                  => CRM_Utils_Array::value( 'phone-Primary', $updatePfParams ) );
        $this->assertDBCompareValues('CRM_Core_DAO_Phone', $searchParams, $compareParams );
        
        //Now check DB for Mobile
        $searchParams = array( 'contact_id'              => $contactId, 
                               'location_type_id'        => 1, 
                               'phone_type'              => CRM_Utils_Array::value( 'phone_type', $params['location'][1]['phone'][2] ) );
        $compareParams = array( 'phone'                  => CRM_Utils_Array::value( 'phone-Primary-Mobile', $updatePfParams ) );
        $this->assertDBCompareValues('CRM_Core_DAO_Phone', $searchParams, $compareParams );
        
        //get the value of relationship
        $values = array( );
        $searchParams = array( 'contact_id' => $contactId );
        $relationship = CRM_Contact_BAO_Relationship::getValues( $searchParams,  $values );
        //Now check values of Relationship Count.
        $this->assertEqual( 1, $values['relationship']['totalCount'], 'Check for total relationship count' );
        foreach( $values['relationship']['data'] as $key => $val ) {
            //Now check values of Relationship organization.
            $this->assertEqual( $updatePfParams['organization_name'], $val['name'], 'Check for organization' );  
            //Now check values of Relationship type.
            $this->assertEqual( 'Employee of', $val['relation'], 'Check for relationship type' );
            //delete the organization.
            Contact::delete( CRM_Utils_Array::value( 'cid', $val ) );
        }
        
        //get the value of groups
        $groupContact = CRM_Contact_BAO_GroupContact::getValues( $searchParams, $values );
        //Now check values of group Count.
        $this->assertEqual( 2, $values['group']['totalCount'], 'Check for total group count' );
        //Now check values of group ids.
        $groupIds = array( );
        foreach( $values['group']['data'] as $key => $val  ) {
            $groupIds[$val['group_id']] = 1;
        }
        $this->assertAttributesEqual( $updatePfParams['group'], $groupIds );
        
        //Now check values of tag ids.
        require_once 'CRM/Core/BAO/EntityTag.php';
        $tags = CRM_Core_BAO_EntityTag::getTag( $contactId );
        foreach( $tags as $key => $val ) {
            $tagIds[$key] = 1;
        }
        $this->assertAttributesEqual( $updatePfParams['tag'], $tagIds );
        
        //cleanup DB by deleting the contact
        Contact::delete( $contactId );
    }
    
    /**
     * test case for getContactLocations( )
     */
    function testGetContactLocations( )
    {
        //get the contact params
        $params = $this->contactParams( );
        $params['location'][2] = $params['location'][1];
        $params['location'][2]['location_type_id'] = 2;
        unset( $params['location'][2]['is_primary'] );
        
        //create contact
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::create( $params );
        $contactId = $contact->id;
        $locationCount = CRM_Contact_BAO_Contact::getContactLocations( $contactId );
        $this->assertEqual( 2, $locationCount, 'Check the Location Count' );
        //cleanup DB by deleting the contact
        Contact::delete( $contactId );
    }
    
    /**
     * test case for getContactDetails( )
     */
    function testGetContactDetails( )
    {
        //get the contact params
        $params = $this->contactParams( );
        
        //create contact
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::create( $params );
        $contactId = $contact->id;
        
        //get the contact details
        $contactDetails = CRM_Contact_BAO_Contact::getContactDetails( $contactId );
        $compareParams = array( $params['first_name'] . ' ' .$params['last_name'],  
                                CRM_Utils_Array::value( 'email', $params['location'][1]['email'][1]),
                                $params['privacy']['do_not_email'] );
        //Now check the contact details
        $this->assertAttributesEqual( $compareParams, $contactDetails );
        
        //cleanup DB by deleting the contact
        Contact::delete( $contactId );
    }
    
    /**
     * test case for getPrimaryLocationType( )
     */
    function testGetPrimaryLocationType( )
    {
        //get the contact params
        $params = $this->contactParams( );
        $params['location'][2] = $params['location'][1];
        $params['location'][2]['location_type_id'] = 2;
        unset( $params['location'][1]['is_primary'] );
        
        //create contact
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::create( $params );
        $contactId = $contact->id;
        $primaryLocation = CRM_Contact_BAO_Contact::getPrimaryLocationType( $contactId );
        //Now check the Primary Location Type
        $this->assertEqual( 2, $primaryLocation, 'Check Primary Location Type' );
        
        //cleanup DB by deleting the contact
        Contact::delete( $contactId ); 
    }
    
    /**
     * test case for  
     * importableFields( ) and exportableFields( )
     */
    function testFields( )
    {
        require_once 'CRM/Contact/BAO/Contact.php';
        $allImpFileds = CRM_Contact_BAO_Contact::importableFields( 'All' );
        $allExpFileds = CRM_Contact_BAO_Contact::importableFields( 'All' );
        //Now check all fields
        $this->assertAttributesEqual( $allImpFileds, $allExpFileds );
        
        $individualImpFileds = CRM_Contact_BAO_Contact::importableFields( 'Individual' );
        $individualExpFileds = CRM_Contact_BAO_Contact::importableFields( 'Individual' );
        //Now check Individual fields
        $this->assertAttributesEqual( $individualImpFileds, $individualExpFileds );
        
        $householdImpFileds = CRM_Contact_BAO_Contact::importableFields( 'Household' );
        $householdExpFileds = CRM_Contact_BAO_Contact::importableFields( 'Household' );
        //Now check Household fields
        $this->assertAttributesEqual( $householdImpFileds, $householdExpFileds );
        
        $organizationImpFileds = CRM_Contact_BAO_Contact::importableFields( 'Organization' );
        $organizationExpFileds = CRM_Contact_BAO_Contact::importableFields( 'Organization' );
        //Now check Organization fields
        $this->assertAttributesEqual( $organizationImpFileds, $organizationExpFileds );
    }
    
    /**
     * test case for getPrimaryEmail( ) 
     * 
     */
    function testGetPrimaryEmail( )
    {
        //get the contact params
        $params = $this->contactParams( );
        $params['location'][2] = $params['location'][1];
        $params['location'][2]['location_type_id'] = 2;
        $params['location'][2]['email'][1]['email'] = 'primarymail@example.org';
        unset( $params['location'][1]['is_primary'] );
        
        //create contact
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::create( $params );
        $contactId = $contact->id;
        //get the primary email.
        $email = CRM_Contact_BAO_Contact::getPrimaryEmail( $contactId );
        //Now check the primary email
        $this->assertEqual( $email, CRM_Utils_Array::value( 'email', $params['location'][2]['email'][1] ), 'Check Primary Email' );
        
        //cleanup DB by deleting the contact
        Contact::delete( $contactId );
    }
    
    /**
     * test case for getPrimaryOpenId( ) 
     * 
     */
    function testGetPrimaryOpenId( )
    {
        //get the contact params
        $params = $this->contactParams( );
        $params['location'][2] = $params['location'][1];
        $params['location'][2]['location_type_id'] = 2;
        $params['location'][2]['openid'][1]['openid'] = 'http://primaryOpenID.org';
        unset( $params['location'][1]['is_primary'] );
        
        //create contact
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::create( $params );
        $contactId = $contact->id;
        //get the primary openid
        $openID = CRM_Contact_BAO_Contact::getPrimaryOpenId( $contactId );
        //Now check the primary openid
        $this->assertEqual( $openID, CRM_Utils_Array::value( 'openid', $params['location'][2]['openid'][1] ), 'Check Primary OpenID' );
        
        //cleanup DB by deleting the contact
        Contact::delete( $contactId );
    }
    
    /**
     * test case for matchContactOnEmail( ) 
     * 
     */
    function testMatchContactOnEmail( )
    {
        //get the contact params
        $params = $this->contactParams( ); 
        //create contact
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::create( $params );
        $contactId = $contact->id;
        
        //get the matching contact.
        $match= CRM_Contact_BAO_Contact::matchContactOnEmail( CRM_Utils_Array::value( 'email', $params['location'][1]['email'][1] ), 
                                                              'Individual' );
        $this->assertEqual( $contactId, $match->contact_id, 'Check For Matching Contact' );
        
        //cleanup DB by deleting the contact
        Contact::delete( $contactId );
    }
    
    /**
     * test case for getContactType( ) 
     * 
     */
    function testGetContactType( )
    {
        //get the contact params
        $params = $this->contactParams( ); 
        //create contact
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::create( $params );
        $contactId = $contact->id;
        
        //get contact type.
        $contactType = CRM_Contact_BAO_Contact::getContactType( $contactId );
        $this->assertEqual( $contactType, $params['contact_type'], 'Check For Contact Type' );
        
        //cleanup DB by deleting the contact
        Contact::delete( $contactId );
    }
    
    /**
     * test case for getContactSubType( ) 
     * 
     */
    function testgetContactSubType( )
    {
        //get the contact params
        $params = $this->contactParams( ); 
        $params['contact_sub_type'] = 'Individual';
        //create contact
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::create( $params );
        $contactId = $contact->id;
        
        //get contact sub type.
        $contactType = CRM_Contact_BAO_Contact::getContactSubType( $contactId );
        $this->assertEqual( $contactType, $params['contact_sub_type'], 'Check For Contact Sub Type' );
        
        //cleanup DB by deleting the contact
        Contact::delete( $contactId );
    }
    
    /**
     * test case for displayName( ) 
     * 
     */
    function testDisplayName( )
    {
        //get the contact params
        $params = $this->contactParams( ); 
        
        //create contact
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::create( $params );
        $contactId = $contact->id;
        
        //get display name.
        $dbDisplayName = CRM_Contact_BAO_Contact::displayName( $contactId );
        
        require_once 'CRM/Core/PseudoConstant.php';
        $prefix = CRM_Core_PseudoConstant::individualPrefix( );
        $suffix = CRM_Core_PseudoConstant::individualSuffix( );
        
        //build display name
        $paramsDisplayName = $prefix[$params['prefix_id']] . ' ' . 
            $params['first_name']  . ' ' . 
            $params['middle_name'] . ' ' . 
            $params['last_name']   . ' ' . 
            $suffix[$params['suffix_id']];
        
        $this->assertEqual( $dbDisplayName, $paramsDisplayName, 'Check For Display Name' );
        
        //cleanup DB by deleting the contact
        Contact::delete( $contactId );
    }
    
    /**
     * test case for getDisplayAndImage( ) 
     * 
     */
    function testGetDisplayAndImage( )
    {
        //get the contact params
        $params = $this->contactParams( ); 
        
        //create contact
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::create( $params );
        $contactId = $contact->id;
        
        //get DisplayAndImage.
        list( $displayName, $image ) = CRM_Contact_BAO_Contact::getDisplayAndImage( $contactId );
        
        require_once 'CRM/Contact/BAO/Contact/Utils.php';
        $checkImage = CRM_Contact_BAO_Contact_Utils::getImage( $params['contact_type'] );
        
        require_once 'CRM/Core/PseudoConstant.php';
        $prefix = CRM_Core_PseudoConstant::individualPrefix( );
        $suffix = CRM_Core_PseudoConstant::individualSuffix( );
        
        //build display name
        $paramsDisplayName = $prefix[$params['prefix_id']] . ' ' . 
            $params['first_name']  . ' ' . 
            $params['middle_name'] . ' ' . 
            $params['last_name']   . ' ' . 
            $suffix[$params['suffix_id']];
        
        $this->assertEqual( $displayName, $paramsDisplayName, 'Check For Display Name' );
        $this->assertEqual( $image, $checkImage, 'Check For Image' );
        
        //cleanup DB by deleting the contact
        Contact::delete( $contactId );
    }
    
    /**
     * test logged in user has permissions for 
     * various  operation types
     */
    function testPermissionedContact() 
    {
        $contactId = Contact::createIndividual(); 
        require_once 'CRM/Contact/BAO/Contact/Permission.php';
        $userViewPermission = CRM_Contact_BAO_Contact_Permission::allow($contactId);
        $this->assertEqual( $userViewPermission, true, 'Check user for view contact permission.' );  
        
        $userEditPermission = CRM_Contact_BAO_Contact_Permission::allow($contactId, CRM_Core_Permission::EDIT);
        $this->assertEqual( $userEditPermission, true, 'Check user for edit contact permission.' );  
        
        Contact::delete($contactId);
    }
    
    /**
     * function to build common params
     *
     */
    private function contactParams( ) 
    {
        $params = array(
                        'first_name'            => 'john',
                        'last_name'             => 'smith',
                        'contact_type'          => 'Individual',
                        'middle_name'           => 'xyz',
                        'prefix_id'             => 3,
                        'suffix_id'             => 2,
                        'nick_name'             => 'Nick Name',
                        'job_title'             => 'software engg',
                        'gender_id'             => 2,
                        'is_deceased'           => 1,
                        'home_URL'              => 'http://civicrm.org',
                        'contact_source'        => 'test contact',
                        'external_identifier'   => 123456789,
                        'preferred_mail_format' => 'Both',
                        'greeting_type'         => 'Informal',
                        'custom_greeting'       => 'Custom Greeting',
                        'is_opt_out'            => 1,
                        'legal_identifier'      => '123456789',
                        'image_URL'             => 'http://image.com',
                        'deceased_date'                  => array (
                                                                   'M'            => 7,
                                                                   'd'            => 7,
                                                                   'Y'            => 1991,
                                                                   ),
                        'birth_date'                     => array (
                                                                   'M'            => 6,
                                                                   'd'            => 6,
                                                                   'Y'            => 1961,
                                                                   ),
                        'privacy'                        => array (
                                                                   'do_not_phone' => 1,
                                                                   'do_not_email' => 1,
                                                                   'do_not_mail'  => 1,
                                                                   'do_not_trade' => 1,
                                                                   ),
                        'preferred_communication_method' => array ( 
                                                                   '1'            => 1,
                                                                   '2'            => 0,
                                                                   '3'            => 1,
                                                                   '4'            => 0,
                                                                   '5'            => 1,
                                                                   ),
                        );
        $params['location'][1] = array ( 'location_type_id'                               => 1,
                                         'is_primary'                                     => 1,
                                         'address' =>  array ( 
                                                              'street_address'            => 'Saint Helier St',
                                                              'supplemental_address_1'    => 'Hallmark Ct',
                                                              'supplemental_address_2'    => 'Jersey Village',
                                                              'city'                      => 'Newark',
                                                              'postal_code'               => '01903',
                                                              'country_id'                => 1228,
                                                              'state_province_id'         => 1029,
                                                              'geo_code_1'                => '18.219023',
                                                              'geo_code_2'                => '-105.00973',
                                                              ),
                                         'email'   => array ( 
                                                             '1' => array ( 'email'       => 'john.smith@example.org' ), 
                                                             ),
                                         'phone'   => array (
                                                             '1' => array (
                                                                           'phone_type'   => 'Phone',
                                                                           'phone'        => '303443689',
                                                                           ),
                                                             '2' => array (
                                                                           'phone_type'   => 'Mobile',
                                                                           'phone'        => '9833910234',
                                                                           ),
                                                             ),
                                         'openid'  => array (
                                                             '1' => array ( 'openid'      => 'http://civicrm.org' ),
                                                             ),
                                         'im'      => array (
                                                             '1' => array ( 'name'        => 'john.smith',
                                                                            'provider_id' => 1
                                                                            ),
                                                             ),
                                         );
        return $params;
    }
    
}

?>