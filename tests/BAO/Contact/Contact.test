<?php

require_once 'CiviTestCase.php';
require_once 'Contact.php';

class BAO_Contact_Contact extends CiviTestCase 
{
    
    function get_info( ) 
    {
        return array(
                     'name'        => 'Contact BAOs',
                     'description' => 'Test all Contact_BAO_Contact methods.',
                     'group'       => 'CiviCRM BAO Tests',
                     );
    }
    
    function setUp( ) 
    {
        parent::setUp();
    }
    
    function testAddWithEmptyParams( )
    {
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::add( $params = array() );
        
        //Now check Contact object
        $this->assertNull( $contact );
    }
    
    /**
     * add() method (create and update modes)
     */
    function testAddWithNames( )
    {
        $firstName = 'Shane';
        $lastName  = 'Whatson';
        $params     =  array( 'first_name'   => $firstName,     
                              'last_name'    => $lastName,
                              'contact_type' => 'Individual'
                              );
        
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::add( $params );
        
        $this->assertEqual( $firstName, $contact->first_name, 'Check for first name creation.' );
        $this->assertEqual( $lastName, $contact->last_name, 'Check for last name creation.' );
        
        $contactId = $contact->id;
        
        //update and change first name and last name, using add( )
        $firstName = 'Jane';
        $params = array( 'first_name'   => $firstName, 
                         'contact_type' => 'Individual',
                         'contact_id'   => $contactId );
        
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $firstName, $contact->first_name, 'Check for updated first name.' );
        
        $contactId = $contact->id;
        Contact::delete( $contactId );
    }
    
    /**
     * add() method (creat and update modes)
     * with all contact params
     */
    function testAddWithAll( )
    {
        $params    =  array( 'contact_type'          => 'Individual',
                             'first_name'            => 'Shane',
                             'middle_name'           => 'xyz',
                             'last_name'             => 'Whatson',
                             'prefix_id'             => 3,
                             'suffix_id'             => 2,
                             'nick_name'             => 'Nick Name',
                             'job_title'             => 'software engg',
                             'gender_id'             => 2,
                             'is_deceased'           => 1,
                             'home_URL'              => 'http://civicrm.org',
                             'contact_source'        => 'test contact',
                             'external_identifier'   => 123456789,
                             'preferred_mail_format' => 'Both',
                             'greeting_type'         => 'Informal',
                             'custom_greeting'       => 'Custom Greeting',
                             'is_opt_out'            => 1,
                             'deceased_date'                  => array (
                                                                        'M'            => 7,
                                                                        'd'            => 7,
                                                                        'Y'            => 1991,
                                                                        ),
                             'birth_date'                     => array (
                                                                        'M'            => 6,
                                                                        'd'            => 6,
                                                                        'Y'            => 1961,
                                                                        ),
                             'privacy'                        => array (
                                                                        'do_not_phone' => 1,
                                                                        'do_not_email' => 1,
                                                                        'do_not_mail'  => 1,
                                                                        'do_not_trade' => 1,
                                                                        ),
                             'preferred_communication_method' => array ( 
                                                                        '1'            => 1,
                                                                        '2'            => 0,
                                                                        '3'            => 1,
                                                                        '4'            => 0,
                                                                        '5'            => 1,
                                                                        ),
                             );
        $prefComm = $params['preferred_communication_method'];
        require_once 'CRM/Contact/BAO/Contact.php';
        //create the contact using add()
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $contactId = $contact->id;
        
        //Now check $contact is object of contact DAO..
        $this->assertIsA( $contact, 'CRM_Contact_DAO_Contact' );
        
        //Now check values of object with params.
        $this->assertEqual( $params['first_name'], $contact->first_name, 'Check for first name creation.' );
        $this->assertEqual( $params['last_name'], $contact->last_name, 'Check for last name creation.' );
        $this->assertEqual( $params['middle_name'], $contact->middle_name, 'Check for middle name creation.' );
        $this->assertEqual( $params['contact_type'], $contact->contact_type, 'Check for contact type creation.' );
        $this->assertEqual( '1', $contact->do_not_email, 'Check for do_not_email creation.' );
        $this->assertEqual( '1', $contact->do_not_phone, 'Check for do_not_phone creation.' );
        $this->assertEqual( '1', $contact->do_not_mail, 'Check for do_not_mail creation.' );
        $this->assertEqual( '1', $contact->do_not_trade, 'Check for do_not_trade creation.' );
        $this->assertEqual( '1', $contact->is_opt_out, 'Check for is_opt_out creation.' );
        $this->assertEqual( $params['external_identifier'], $contact->external_identifier, 'Check for external_identifier creation.' );
        $this->assertEqual( $params['last_name']. ', ' .$params['first_name'], $contact->sort_name, 'Check for sort_name creation.' );
        $this->assertEqual( $params['home_URL'], $contact->home_URL, 'Check for home_URL creation.' );
        $this->assertEqual( $params['preferred_mail_format'], $contact->preferred_mail_format, 
                            'Check for preferred_mail_format creation.' );
        $this->assertEqual( $params['contact_source'], $contact->source, 'Check for contact_source creation.' );
        $this->assertEqual( $params['prefix_id'], $contact->prefix_id, 'Check for prefix_id creation.' );
        $this->assertEqual( $params['suffix_id'], $contact->suffix_id, 'Check for suffix_id creation.' );
        $this->assertEqual( $params['greeting_type'], $contact->greeting_type, 'Check for greeting_type creation.' );
        $this->assertEqual( $params['custom_greeting'], $contact->custom_greeting, 'Check for custom_greeting creation.' );
        $this->assertEqual( $params['job_title'], $contact->job_title, 'Check for job_title creation.' ); 
        $this->assertEqual( $params['gender_id'], $contact->gender_id, 'Check for gender_id creation.' ); 
        $this->assertEqual( '1', $contact->is_deceased, 'Check for is_deceased creation.' );
        require_once 'CRM/Utils/Date.php';
        $this->assertEqual( CRM_Utils_Date::format( $params['birth_date']  ), 
                            $contact->birth_date, 'Check for birth_date creation.' ); 
        $this->assertEqual( CRM_Utils_Date::format( $params['deceased_date']  ), 
                            $contact->deceased_date, 'Check for deceased_date creation.' ); 
        require_once 'CRM/Core/BAO/CustomOption.php';
        $dbPrefComm = explode( CRM_Core_BAO_CustomOption::VALUE_SEPERATOR,
                               $contact->preferred_communication_method );
        $checkPrefComm = array( );
        foreach( $dbPrefComm as $key => $value ) {
            if ( $value ) {
                $checkPrefComm[$value] = 1;
            }
        }
        $this->assertAttributesEqual( $checkPrefComm,  $prefComm );
        
        //now update the contact using add( )
        $updateParams    =  array( 'contact_type'          => 'Individual',
                                   'first_name'            => 'Jane',
                                   'middle_name'           => 'abc',
                                   'last_name'             => 'Doe',
                                   'prefix_id'             => 2,
                                   'suffix_id'             => 3,
                                   'nick_name'             => 'Nick Name Second',
                                   'job_title'             => 'software Developer',
                                   'gender_id'             => 1,
                                   'is_deceased'           => 1,
                                   'home_URL'              => 'http://wiki.civicrm.org',
                                   'contact_source'        => 'test update contact',
                                   'external_identifier'   => 111111111,
                                   'preferred_mail_format' => 'Both',
                                   'greeting_type'         => 'Informal',
                                   'custom_greeting'       => 'Custom Greeting Second',
                                   'is_opt_out'            => 0,
                                   'deceased_date'                  => array (
                                                                              'M'            => 3,
                                                                              'd'            => 3,
                                                                              'Y'            => 1981,
                                                                              ),
                                   'birth_date'                     => array (
                                                                              'M'            => 4,
                                                                              'd'            => 4,
                                                                              'Y'            => 1951,
                                                                              ),
                                   'privacy'                        => array (
                                                                              'do_not_phone' => 0,
                                                                              'do_not_email' => 0,
                                                                              'do_not_mail'  => 0,
                                                                              'do_not_trade' => 0,
                                                                              ),
                                   'preferred_communication_method' => array ( 
                                                                              '1'            => 0,
                                                                              '2'            => 1,
                                                                              '3'            => 0,
                                                                              '4'            => 1,
                                                                              '5'            => 0,
                                                                              ),
                                   );
        $prefComm = $updateParams['preferred_communication_method'];
        $updateParams['contact_id'] = $contactId;
        require_once 'CRM/Contact/BAO/Contact.php';
        //create the contact using add()
        $contact = CRM_Contact_BAO_Contact::add( $updateParams );
        $contactId = $contact->id;
        
        //Now check $contact is object of contact DAO..
        $this->assertIsA( $contact, 'CRM_Contact_DAO_Contact' );
        
        //Now check values of object with params.
        $this->assertEqual( $updateParams['first_name'], $contact->first_name, 'Check for first name creation.' );
        $this->assertEqual( $updateParams['last_name'], $contact->last_name, 'Check for last name creation.' );
        $this->assertEqual( $updateParams['middle_name'], $contact->middle_name, 'Check for middle name creation.' );
        $this->assertEqual( $updateParams['contact_type'], $contact->contact_type, 'Check for contact type creation.' );
        $this->assertEqual( '0', $contact->do_not_email, 'Check for do_not_email creation.' );
        $this->assertEqual( '0', $contact->do_not_phone, 'Check for do_not_phone creation.' );
        $this->assertEqual( '0', $contact->do_not_mail, 'Check for do_not_mail creation.' );
        $this->assertEqual( '0', $contact->do_not_trade, 'Check for do_not_trade creation.' );
        $this->assertEqual( '0', $contact->is_opt_out, 'Check for is_opt_out creation.' );
        $this->assertEqual( $updateParams['external_identifier'], $contact->external_identifier, 
                            'Check for external_identifier creation.' );
        $this->assertEqual( $updateParams['last_name'] . ', ' .$updateParams['first_name'], 
                            $contact->sort_name, 'Check for sort_name creation.' );
        $this->assertEqual( $updateParams['home_URL'], $contact->home_URL, 'Check for home_URL creation.' );
        $this->assertEqual( $updateParams['preferred_mail_format'], $contact->preferred_mail_format, 
                            'Check for preferred_mail_format creation.' );
        $this->assertEqual( $updateParams['contact_source'], $contact->source, 'Check for contact_source creation.' );
        $this->assertEqual( $updateParams['prefix_id'], $contact->prefix_id, 'Check for prefix_id creation.' );
        $this->assertEqual( $updateParams['suffix_id'], $contact->suffix_id, 'Check for suffix_id creation.' );
        $this->assertEqual( $updateParams['greeting_type'], $contact->greeting_type, 'Check for greeting_type creation.' );
        $this->assertEqual( $updateParams['custom_greeting'], $contact->custom_greeting, 'Check for custom_greeting creation.' );
        $this->assertEqual( $updateParams['job_title'], $contact->job_title, 'Check for job_title creation.' ); 
        $this->assertEqual( $updateParams['gender_id'], $contact->gender_id, 'Check for gender_id creation.' ); 
        $this->assertEqual( '1', $contact->is_deceased, 'Check for is_deceased creation.' );
        require_once 'CRM/Utils/Date.php';
        $this->assertEqual( CRM_Utils_Date::format( $updateParams['birth_date']  ), 
                            $contact->birth_date, 'Check for birth_date creation.' ); 
        $this->assertEqual( CRM_Utils_Date::format( $updateParams['deceased_date']  ), 
                            $contact->deceased_date, 'Check for deceased_date creation.' ); 
        require_once 'CRM/Core/BAO/CustomOption.php';
        $dbPrefComm = explode( CRM_Core_BAO_CustomOption::VALUE_SEPERATOR,
                               $contact->preferred_communication_method );
        $checkPrefComm = array( );
        foreach( $dbPrefComm as $key => $value ) {
            if ( $value ) {
                $checkPrefComm[$value] = 1;
            }
        }
        $this->assertAttributesEqual( $checkPrefComm,  $prefComm );
        
        //cleanup DB by deleting the contact
        Contact::delete( $contactId );
    }
    
    /**
     * add() method 
     */
    function testAddWithAllContactTypes( )
    {
        $firstName = 'Bill';
        $lastName  = 'Adams';
        $params    =  array( 'first_name'   => $firstName,     
                             'last_name'    => $lastName,
                             'contact_type' => 'Individual'
                             );
        
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $firstName, $contact->first_name, 'Check for first name creation.' );
        $this->assertEqual( $lastName, $contact->last_name, 'Check for last name creation.' );
        
        $contactId = $contact->id;
        
        //update and change first name and last name, using create()
        $firstName = 'Joan';
        $params = array( 'first_name'   => $firstName, 
                         'contact_type' => 'Individual',
                         'contact_id'   => $contactId );
        
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $firstName, $contact->first_name, 'Check for updated first name.' );
        $contactId = $contact->id;
        Contact::delete( $contactId );
        
        $householdName = 'Adams house';
        $params        = array( 'household_name' => $householdName,
                                'contact_type'   => 'Household'
                                );
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $householdName, $contact->sort_name, 'Check for created household.' );
        $contactId = $contact->id;
        
        //update and change name of household, using create
        $householdName = 'Joans home';
        $params = array( 'household_name' => $householdName,
                         'contact_type' => 'Household',
                         'contact_id'   => $contactId );
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $householdName, $contact->sort_name, 'Check for updated household.' );
        Contact::delete( $contactId );
        
        $organizationName = 'My Organization';
        $params = array( 'organization_name' => $organizationName );
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $organizationName, $contact->sort_name, 'Check for created organization.' );
        $contactId = $contact->id;
        
        //update and change name of organization, using create
        $organizationName = 'Your Changed Organization';
        $params = array( 'organization_name' => $organizationName,
                         'contact_type' => 'Organization',
                         'contact_id'   => $contactId );
        $contact = CRM_Contact_BAO_Contact::add( $params );
        $this->assertEqual( $organizationName, $contact->sort_name, 'Check for updated organization.' );
        Contact::delete( $contactId );
    }
    
    /**
     * create() method
     * test create method with missing params.
     */
    
    function testCreateWithEmptyParams( )
    {
        $params = array(
                        'first_name' => 'Bill',
                        'last_name'  => 'Adams',
                        );
        require_once 'CRM/Contact/BAO/Contact.php';
        $contact = CRM_Contact_BAO_Contact::create( $params );
        
        //Now check Contact object
        $this->assertNull( $contact );
    }
    
    /**
     * create() method
     * test create method with all params.
     * create and update modes.
     */
    
    function testCreateWithAll( )
    {
        $params = array(
                        'first_name'   => 'Bill',
                        'last_name'    => 'Adams',
                        'contact_type' => 'Individual',
                        'note'         => 'test note',
                        );
        $params['location'][1] = array ( 'location_type_id'                               => 1,
                                         'is_primary'                                     => 1,
                                         'address' =>  array ( 
                                                              'street_address'            => 'Saint Helier St',
                                                              'supplemental_address_1'    => 'Hallmark Ct',
                                                              'supplemental_address_2'    => 'Jersey Village',
                                                              'city'                      => 'Newark',
                                                              'postal_code'               => '01903',
                                                              'country_id'                => 1228,
                                                              'state_province_id'         => 1029,
                                                              'geo_code_1'                => '18.219023',
                                                              'geo_code_2'                => '-105.00973',
                                                              ),
                                         'email'   => array ( 
                                                             '1' => array ( 'email'       => 'john.smith@example.org' ), 
                                                             ),
                                         'phone'   => array (
                                                             '1' => array (
                                                                           'phone_type'   => 'Phone',
                                                                           'phone'        => '303443689',
                                                                           ),
                                                             '2' => array (
                                                                           'phone_type'   => 'Mobile',
                                                                           'phone'        => '9833910234',
                                                                           ),
                                                             ),
                                         'openid'  => array (
                                                             '1' => array ( 'openid'      => 'http://civicrm.org' ),
                                                             ),
                                         'im'      => array (
                                                             '1' => array ( 'name'        => 'bill.adams',
                                                                            'provider_id' => 1
                                                                            ),
                                                             ),
                                         );
        require_once 'CRM/Contact/BAO/Contact.php';
        //create the contact with given params.
        $contact = CRM_Contact_BAO_Contact::create( $params );
        
        //Now check $contact is object of contact DAO..
        $this->assertIsA( $contact, 'CRM_Contact_DAO_Contact' );
        $contactId = $contact->id;
        
        //Now check values of contact object with params.
        $this->assertEqual( $params['first_name'], $contact->first_name, 'Check for first name creation.' );
        $this->assertEqual( $params['last_name'], $contact->last_name, 'Check for last name creation.' );
        $this->assertEqual( $params['contact_type'], $contact->contact_type, 'Check for contact type creation.' );
        
        //Now check DB for Address
        $searchParams  = array( 'contact_id'             => $contactId, 
                                'location_type_id'       => 1, 
                                'is_primary'             => 1 );
        $compareParams = array( 'street_address'         => 'Saint Helier St',
                                'supplemental_address_1' => 'Hallmark Ct',
                                'supplemental_address_2' => 'Jersey Village',
                                'city'                   => 'Newark',
                                'postal_code'            => '01903',
                                'country_id'             => 1228,
                                'state_province_id'      => 1029,
                                'geo_code_1'             => '18.219023',
                                'geo_code_2'             => '-105.00973' );
        $this->assertDBCompareValues( 'CRM_Core_DAO_Address', $searchParams, $compareParams );
        //Now check DB for Email
        $compareParams = array( 'email'                  => 'john.smith@example.org' );
        $this->assertDBCompareValues('CRM_Core_DAO_Email', $searchParams, $compareParams );
        //Now check DB for openid
        $compareParams = array ( 'openid'                => 'http://civicrm.org' );
        $this->assertDBCompareValues('CRM_Core_DAO_OpenID', $searchParams, $compareParams );
        //Now check DB for IM
        $compareParams = array( 'name'                   => 'bill.adams',
                                'provider_id'            => 1 );
        $this->assertDBCompareValues('CRM_Core_DAO_IM', $searchParams, $compareParams );
        //Now check DB for Phone
        $searchParams = array( 'contact_id'              => $contactId, 
                               'location_type_id'        => 1, 
                               'is_primary'              => 1,
                               'phone_type'              => 'Phone' );
        $compareParams = array( 'phone'                  => '303443689' );
        $this->assertDBCompareValues('CRM_Core_DAO_Phone', $searchParams, $compareParams );
        //Now check DB for Mobile
        $searchParams = array( 'contact_id'              => $contactId, 
                               'location_type_id'        => 1, 
                               'phone_type'              => 'Mobile' );
        $compareParams = array( 'phone'                  => '9833910234' );
        $this->assertDBCompareValues('CRM_Core_DAO_Phone', $searchParams, $compareParams );
        //Now check DB for Note
        $searchParams  = array( 'entity_id'    => $contactId,
                                'entity_table' => 'civicrm_contact'); 
        $compareParams = array( 'note' => $params['note'] );
        $this->assertDBCompareValues('CRM_Core_DAO_Note', $searchParams, $compareParams );
        
        //update the contact.
        $updateParams = array(
                              'first_name'   => 'John',
                              'last_name'    => 'Doe',
                              'contact_type' => 'Individual',
                              'note'         => 'new test note',
                              );
        $updateParams['location'][1] = array ( 'location_type_id'                               => 1,
                                               'is_primary'                                     => 1,
                                               'address' =>  array ( 
                                                                    'street_address'            => 'Oberoi Garden',
                                                                    'supplemental_address_1'    => 'A-wing:3037',
                                                                    'supplemental_address_2'    => 'Andhery',
                                                                    'city'                      => 'Mumbai',
                                                                    'postal_code'               => '12345',
                                                                    'country_id'                => 1228,
                                                                    'state_province_id'         => 1004,
                                                                    'geo_code_1'                => '31.694842',
                                                                    'geo_code_2'                => '-106.29998',
                                                                    ),
                                               'email'   => array ( 
                                                                   '1' => array ( 'email'       => 'john.doe@example.org' ), 
                                                                   ),
                                               'phone'   => array (
                                                                   '1' => array (
                                                                                 'phone_type'   => 'Phone',
                                                                                 'phone'        => '02115245336',
                                                                                 ),
                                                                   '2' => array (
                                                                                 'phone_type'   => 'Mobile',
                                                                                 'phone'        => '9766323895',
                                                                                 ),
                                                                   ),
                                               'openid'  => array (
                                                                   '1' => array ( 'openid'      => 'http://wiki.civicrm.org' ),
                                                                   ),
                                               'im'      => array (
                                                                   '1' => array ( 'name'        => 'john.doe',
                                                                                  'provider_id' => 1
                                                                                  ),
                                                                   ),
                                               );
        $updateParams['contact_id'] = $contactId;
        require_once 'CRM/Contact/BAO/Contact.php';
        //create the contact with given params.
        $contact = CRM_Contact_BAO_Contact::create( $updateParams );
        
        //Now check $contact is object of contact DAO..
        $this->assertIsA( $contact, 'CRM_Contact_DAO_Contact' );
        $contactId = $contact->id;
        
        //Now check values of contact object with updated params.
        $this->assertEqual( $updateParams['first_name'], $contact->first_name, 'Check for first name creation.' );
        $this->assertEqual( $updateParams['last_name'], $contact->last_name, 'Check for last name creation.' );
        $this->assertEqual( $updateParams['contact_type'], $contact->contact_type, 'Check for contact type creation.' );
        
        //Now check DB for updated Address
        $searchParams  = array( 'contact_id'             => $contactId, 
                                'location_type_id'       => 1, 
                                'is_primary'             => 1 );
        $compareParams = array( 'street_address'         => 'Oberoi Garden',
                                'supplemental_address_1' => 'A-wing:3037',
                                'supplemental_address_2' => 'Andhery',
                                'city'                   => 'Mumbai',
                                'postal_code'            => '12345',
                                'country_id'             => 1228,
                                'state_province_id'      => 1004,
                                'geo_code_1'             => '31.694842',
                                'geo_code_2'             => '-106.29998' );
        $this->assertDBCompareValues( 'CRM_Core_DAO_Address', $searchParams, $compareParams );
        //Now check DB for updated Email
        $compareParams = array( 'email'                  => 'john.doe@example.org' );
        $this->assertDBCompareValues('CRM_Core_DAO_Email', $searchParams, $compareParams );
        //Now check DB for updated openid
        $compareParams = array ( 'openid'                => 'http://wiki.civicrm.org' );
        $this->assertDBCompareValues('CRM_Core_DAO_OpenID', $searchParams, $compareParams );
        //Now check DB for updated IM
        $compareParams = array( 'name'                   => 'john.doe',
                                'provider_id'            => 1 );
        $this->assertDBCompareValues('CRM_Core_DAO_IM', $searchParams, $compareParams );
        //Now check DB for updated Phone
        $searchParams = array( 'contact_id'              => $contactId, 
                               'location_type_id'        => 1, 
                               'is_primary'              => 1,
                               'phone_type'              => 'Phone' );
        $compareParams = array( 'phone'                  => '02115245336' );
        $this->assertDBCompareValues('CRM_Core_DAO_Phone', $searchParams, $compareParams );
        //Now check DB for updated Mobile
        $searchParams = array( 'contact_id'              => $contactId, 
                               'location_type_id'        => 1, 
                               'phone_type'              => 'Mobile' );
        $compareParams = array( 'phone'                  => '9766323895' );
        $this->assertDBCompareValues('CRM_Core_DAO_Phone', $searchParams, $compareParams );
        //As we are not updating note
        //Now check DB for New Note
        $noteId = $this->assertDBNotNull( 'CRM_Core_DAO_Note', $updateParams['note'], 'id', 'note', 
                                          'Database check for New created note ' );
        //cleanup DB by deleting the contact
        Contact::delete( $contactId );
    }
    
    /**
     * resolveDefaults() method
     * test all pseudoConstant, stateProvince, country. 
     */
    
    function testResolveDefaults( )
    {
        $params = array( 'prefix_id'  => 3,
                         'suffix_id'  => 2,
                         'gender_id'  => 2,
                         'birth_date' => '1983-12-13',
                         );
        
        $params['location'][1] = array ( 'location_type_id'                       => 1,
                                         'is_primary'                             => 1,
                                         'address' =>  array ( 
                                                              'country_id'        => 1228,
                                                              'state_province_id' => 1004,
                                                              )
                                         );
        require_once 'CRM/Contact/BAO/Contact.php';
        CRM_Contact_BAO_Contact::resolveDefaults( $params );
        
        //check the resolve values.
        require_once 'CRM/Core/PseudoConstant.php';
        $genders = CRM_Core_PseudoConstant::gender( );
        $this->assertEqual( $genders[$params['gender_id']], $params['gender'], 'Check for gender.' );
        $prefix = CRM_Core_PseudoConstant::individualPrefix( );
        $this->assertEqual( $prefix[$params['prefix_id']], $params['prefix'], 'Check for prefix.' );
        $suffix = CRM_Core_PseudoConstant::individualSuffix( );
        $this->assertEqual( $suffix[$params['suffix_id']], $params['suffix'], 'Check for suffix.' );
        $this->assertEqual( CRM_Core_PseudoConstant::stateProvince( $params['location'][1]['address']['state_province_id'] ),
                            $params['location'][1]['address']['state_province'], 
                            'Check for state province.' );
        $this->assertEqual( CRM_Core_PseudoConstant::country( $params['location'][1]['address']['country_id'] ),
                            $params['location'][1]['address']['country'], 
                            'Check for country.' );
    }
    
    /**
     * test logged in user has permissions for 
     * various  operation types
     */
    function testPermissionedContact() 
    {
        $contactId = Contact::createIndividual(); 
        require_once 'CRM/Contact/BAO/Contact/Permission.php';
        $userViewPermission = CRM_Contact_BAO_Contact_Permission::allow($contactId);
        $this->assertEqual( $userViewPermission, true, 'Check user for view contact permission.' );  
        
        $userEditPermission = CRM_Contact_BAO_Contact_Permission::allow($contactId, CRM_Core_Permission::EDIT);
        $this->assertEqual( $userEditPermission, true, 'Check user for edit contact permission.' );  
        
        Contact::delete($contactId);
    }
}

?>