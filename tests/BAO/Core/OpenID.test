<?php

require_once 'CiviTestCase.php';
require_once 'Contact.php';

class BAO_Core_OpenID extends CiviTestCase 
{
    function get_info( ) 
    {
        return array(
                     'name'        => 'OpenID BAOs',
                     'description' => 'Test all Core_BAO_OpenID methods.',
                     'group'       => 'CiviCRM BAO Tests',
                     );
    }
    
    function setUp( ) 
    {
        parent::setUp();
    }
    
    /**
     * add() method (create and update modes)
     */
    function testAdd( )
    {
        $contactId = Contact::createIndividual( );

        $params = array('contact_id'       => $contactId, 
                        'location_type_id' => 1,
                        'openid'           => 'test-username.civicrm.org',
                        'is_primary'       => 1,
                        );
        
        require_once 'CRM/Core/BAO/OpenID.php';
        CRM_Core_BAO_OpenID::add( $params );
        
        $openId = $this->assertDBNotNull( 'CRM_Core_DAO_OpenID', 'test-username.civicrm.org', 'id', 'openid',
                                          'Database check for created OpenID.' );
        
        // Now call add() to modify an existing open-id record
        
        $params = array( 'id'               => $openId,
                         'contact_id'       => $contactId,
                         'is_bulkmail'      => 1,
                         'allowed_to_login' => 1 );
        
        CRM_Core_BAO_OpenID::add( $params );
        
        $allowedToLogin = $this->assertDBNotNull( 'CRM_Core_DAO_OpenID', $openId, 'allowed_to_login', 'id',
                                                  'Database check on updated OpenID record.' );
        $this->assertEqual( $allowedToLogin, 1, 'Verify allowed_to_login value is 1.');
        
        Contact::delete( $contactId );
    }

    /**
     * ifAllowedToLogin() method (set and reset allowed_to_login)
     */
    function testIfAllowedToLogin( )
    {
        $contactId = Contact::createIndividual( );
        
        $params = array('contact_id'       => $contactId, 
                        'location_type_id' => 1,
                        'openid'           => 'test-username.civicrm.org',
                        'is_primary'       => 1,
                        );
        
        require_once 'CRM/Core/BAO/OpenID.php';
        CRM_Core_BAO_OpenID::add( $params );
        
        $openId = $this->assertDBNotNull( 'CRM_Core_DAO_OpenID', 'test-username.civicrm.org', 'id', 'openid',
                                          'Database check for created OpenID.' );

        $allowedToLogin = CRM_Core_BAO_OpenID::isAllowedToLogin( 'test-username.civicrm.org' );
        $this->assertEqual( $allowedToLogin, false, 'Verify allowed_to_login value is 0.');


        // Now call add() to modify an existing open-id record
        
        $params = array( 'id'               => $openId,
                         'contact_id'       => $contactId,
                         'is_bulkmail'      => 1,
                         'allowed_to_login' => 1 );

        CRM_Core_BAO_OpenID::add( $params );
        
        $allowedToLogin = CRM_Core_BAO_OpenID::isAllowedToLogin( 'test-username.civicrm.org' );
        $this->assertEqual( $allowedToLogin, true, 'Verify allowed_to_login value is 1.');
        
        Contact::delete( $contactId );
    }

    /**
     * allOpenIDs() method - get all OpenIDs for the given contact
     */
    function testAllOpenIDs( )
    {
        $contactId = Contact::createIndividual( );
        
        // create first openid
        $params  = array('contact_id'       => $contactId, 
                         'location_type_id' => 1,
                         'openid'           => 'test-username1.civicrm.org',
                         'is_primary'       => 1,
                         'allowed_to_login' => 1
                         );
        
        require_once 'CRM/Core/BAO/OpenID.php';
        CRM_Core_BAO_OpenID::add( $params );
        
        $openId1 = $this->assertDBNotNull( 'CRM_Core_DAO_OpenID', 'test-username1.civicrm.org', 'id', 'openid',
                                           'Database check for created OpenID.' );
        
        // create second openid
        $params  = array('contact_id'       => $contactId, 
                         'location_type_id' => 1,
                         'openid'           => 'test-username2.civicrm.org'
                         );
        
        CRM_Core_BAO_OpenID::add( $params );

        $openId2 = $this->assertDBNotNull( 'CRM_Core_DAO_OpenID', 'test-username2.civicrm.org', 'id', 'openid',
                                           'Database check for created OpenID.' );

        // obtain all openids for the contact
        $openIds = CRM_Core_BAO_OpenID::allOpenIDs( $contactId );
        
        // check number of openids for the contact
        $this->assertEqual( count( $openIds ), 2, 'Checking number of returned open-ids.' );
        
        // check first openid values
        $this->assertEqual( 'test-username1.civicrm.org',  $openIds[$openId1]['openid'], 
                            'Confirm first openid value.' ); 
        $this->assertEqual( 1,  $openIds[$openId1]['is_primary'],       'Confirm is_primary field value.' ); 
        $this->assertEqual( 1,  $openIds[$openId1]['allowed_to_login'], 'Confirm allowed_to_login field value.' ); 

        // check second openid values
        $this->assertEqual( 'test-username2.civicrm.org',  $openIds[$openId2]['openid'], 
                            'Confirm second openid value.' ); 
        $this->assertEqual( 0,  $openIds[$openId2]['is_primary'], 'Confirm is_primary field value for second openid.' ); 
        $this->assertEqual( 0,  $openIds[$openId2]['allowed_to_login'], 'Confirm allowed_to_login field value for second openid.' ); 
        
        Contact::delete( $contactId );
    }
}
