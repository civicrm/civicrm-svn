<?php

require_once 'CiviTestCase.php';
require_once 'Contact.php';

class BAO_Core_Email extends CiviTestCase 
{
    function get_info( ) 
    {
        return array(
                     'name'        => 'Email BAOs',
                     'description' => 'Test all Core_BAO_Email methods.',
                     'group'       => 'CiviCRM BAO Tests',
                     );
    }
    
    function setUp( ) 
    {
        parent::setUp();
    }
    
    /**
     * add() method (create and update modes)
     */
    function testAdd( )
    {
        $contactId = Contact::createIndividual( );

        $params = array( );
        $params = array( 'email'            => 'jane.doe@example.com',
                         'is_primary'       => 1,
                         'location_type_id' => 1,
                         'contact_id'       => $contactId );
        
        require_once 'CRM/Core/BAO/Email.php';
        CRM_Core_BAO_Email::add( $params );
        
        $emailId = $this->assertDBNotNull( 'CRM_Core_DAO_Email', 'jane.doe@example.com' , 'id', 'email',
                                           'Database check for created email address.' );

        // Now call add() to modify an existing email address

        $params = array( );
        $params = array( 'id'           => $emailId,
                         'contact_id'   => $contactId,
                         'is_bulkmail'  => 1,
                         'on_hold'      => 1, );
        
        CRM_Core_BAO_Email::add( $params );
        
        $isBulkMail = $this->assertDBNotNull( 'CRM_Core_DAO_Email', $emailId, 'is_bulkmail', 'id',
                                              'Database check on updated email record.' );
        $this->assertEqual( $isBulkMail, 1, 'Verify bulkmail value is 1.');

        Contact::delete( $contactId );
    }

    /**
     * allEmails() method - get all emails for our contact, with primary email first
     */
    function testAllEmails( )
    {
        $contactParams = array ( 'first_name' => 'Alan',
                                 'last_name'  => 'Smith',
                                 'email-1'    => 'alan.smith1@example.com',
                                 'email-2'    => 'alan.smith2@example.com',
                                 'email-3'    => 'alan.smith3@example.com');

        $contactId = Contact::createIndividual( $contactParams );

        require_once 'CRM/Core/BAO/Email.php';
        $emails = CRM_Core_BAO_Email::allEmails( $contactId );

        $this->assertEqual( count( $emails ) , 3, 'Checking no of returned emails.' );
        
        $firstEmailValue = array_slice( $emails, 0, 1 );
        
        $this->assertEqual( 'alan.smith1@example.com',  $firstEmailValue[0]['email'], 'Confirm primary email address value.' ); 
        $this->assertEqual( 1,  $firstEmailValue[0]['is_primary'], 'Confirm first email address is primary.' ); 
        
        Contact::delete( $contactId );
    }
}
