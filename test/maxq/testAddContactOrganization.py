# Generated by MaxQ [com.bitmechanic.maxq.generator.JythonCodeGenerator]
from PyHttpTestCase import PyHttpTestCase
from com.bitmechanic.maxq import Config
from com.bitmechanic.maxq import DBUtil
import commonConst, commonAPI
global validatorPkg
if __name__ == 'main':
    validatorPkg = Config.getValidatorPkgName()
# Determine the validator for this testcase.
exec 'from '+validatorPkg+' import Validator'


# definition of test class
class testAddContactOrganization(PyHttpTestCase):
    def setUp(self):
        global db
        db = commonAPI.dbStart()
    
    def tearDown(self):
        commonAPI.dbStop(db)
    
    def runTest(self):
        self.msg('Test started')
        
        drupal_path = commonConst.DRUPAL_PATH
        
        commonAPI.login(self)
        
        params = [
            ('''ct''', '''Organization'''),
            ('''reset''', '''1'''),]
        url = "%s/civicrm/contact/add" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 6 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        params = [
            ('''set''', '''1'''),
            ('''path''', '''civicrm/server/stateCountry'''),]
        url = "%s/civicrm/server/stateCountry" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        params = [
            ('''set''', '''1'''),
            ('''path''', '''civicrm/server/stateCountry'''),]
        url = "%s/civicrm/server/stateCountry" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 7 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        params = [
            ('''_qf_default''', '''Edit:next'''),
            ('''organization_name''', '''Zope Organization'''),
            ('''legal_name''', '''Zope Pvt. ltd'''),
            ('''home_URL''', '''www.zope.com'''),
            ('''nick_name''', ''''''),
            ('''sic_code''', ''''''),
            ('''__privacy[do_not_phone]''', '''1'''),
            ('''privacy[do_not_phone]''', '''1'''),
            ('''privacy[do_not_email]''', ''''''),
            ('''privacy[do_not_mail]''', ''''''),
            ('''__privacy[do_not_trade]''', '''1'''),
            ('''privacy[do_not_trade]''', '''1'''),
            ('''preferred_communication_method''', '''Email'''),
            ('''location[1][location_type_id]''', '''2'''),
            ('''location[1][is_primary]''', '''1'''),
            ('''location[1][phone][1][phone_type]''', '''Fax'''),
            ('''location[1][phone][1][phone]''', '''67-5677832'''),
            ('''location[1][phone][2][phone_type]''', '''Phone'''),
            ('''location[1][phone][2][phone]''', '''57834556'''),
            ('''location[1][email][1][email]''', '''contact_us@zope.com'''),
            ('''location[1][email][2][email]''', '''zope@zope.com'''),
            ('''location[1][im][1][provider_id]''', '''4'''),
            ('''location[1][im][1][name]''', '''This is zope.com'''),
            ('''location[1][im][2][provider_id]''', '''5'''),
            ('''location[1][im][2][name]''', '''Welcome to zope.com'''),
            ('''location[1][address][street_address]''', '''123, Zope Garden Estates, Chandivali , Khirane road, Pune '''),
            ('''location[1][address][supplemental_address_1]''', ''''''),
            ('''location[1][address][supplemental_address_2]''', ''''''),
            ('''location[1][address][city]''', ''''''),
            ('''location[1][address][state_province_id]''', '''1200'''),
            ('''location[1][address][postal_code]''', ''''''),
            ('''location[1][address][postal_code_suffix]''', ''''''),
            ('''location[1][address][country_id]''', '''1101'''),
            ('''location[1][address][geo_code_1]''', ''''''),
            ('''location[1][address][geo_code_2]''', ''''''),
            ('''location[2][location_type_id]''', '''2'''),
            ('''location[2][phone][1][phone_type]''', ''''''),
            ('''location[2][phone][1][phone]''', ''''''),
            ('''location[2][phone][2][phone_type]''', ''''''),
            ('''location[2][phone][2][phone]''', ''''''),
            ('''location[2][phone][3][phone_type]''', ''''''),
            ('''location[2][phone][3][phone]''', ''''''),
            ('''location[2][email][1][email]''', ''''''),
            ('''location[2][email][2][email]''', ''''''),
            ('''location[2][email][3][email]''', ''''''),
            ('''location[2][im][1][provider_id]''', ''''''),
            ('''location[2][im][1][name]''', ''''''),
            ('''location[2][im][2][provider_id]''', ''''''),
            ('''location[2][im][2][name]''', ''''''),
            ('''location[2][im][3][provider_id]''', ''''''),
            ('''location[2][im][3][name]''', ''''''),
            ('''location[2][address][street_address]''', ''''''),
            ('''location[2][address][supplemental_address_1]''', ''''''),
            ('''location[2][address][supplemental_address_2]''', ''''''),
            ('''location[2][address][city]''', ''''''),
            ('''location[2][address][state_province_id]''', ''''''),
            ('''location[2][address][postal_code]''', ''''''),
            ('''location[2][address][postal_code_suffix]''', ''''''),
            ('''location[2][address][country_id]''', ''''''),
            ('''location[2][address][geo_code_1]''', ''''''),
            ('''location[2][address][geo_code_2]''', ''''''),
            ('''note''', '''Zope Companies Welcomes you'''),
            ('''_qf_Edit_next_view''', '''Save'''),]
        url = "%s/civicrm/contact/add" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "post", url, params)
        self.post(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 9 failed", 302, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        print "******************************************************************"
        print "Organization Contact \'%s\' Added Successfully" % params[1][1]
        print "******************************************************************"
        
        queryID = "select id from civicrm_contact where sort_name=\'%s\'" % params[1][1]
        cid = db.loadVal(queryID)
        
        CID = '''%s''' % cid
        params = [
           ('''reset''', '''1'''),
           ('''cid''', CID),]
        url = "%s/civicrm/contact/view" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 10 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        commonAPI.logout(self)
        self.msg("Test successfully complete")
    # ^^^ Insert new recordings here.  (Do not remove this line.)


# Code to load and run the test
if __name__ == 'main':
    test = testAddContactOrganization("testAddContactOrganization")
    test.Run()
