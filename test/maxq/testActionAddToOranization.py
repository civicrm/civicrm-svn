# Generated by MaxQ [com.bitmechanic.maxq.generator.JythonCodeGenerator]
from PyHttpTestCase import PyHttpTestCase
from com.bitmechanic.maxq import Config
from com.bitmechanic.maxq import DBUtil
import commonConst, commonAPI
global validatorPkg
if __name__ == 'main':
    validatorPkg = Config.getValidatorPkgName()
# Determine the validator for this testcase.
exec 'from '+validatorPkg+' import Validator'


# definition of test class
class testActionAddToOranization(PyHttpTestCase):
    def setUp(self):
        global db
        db = commonAPI.dbStart()
    
    def tearDown(self):
        commonAPI.dbStop(db)
        
    def runTest(self):
        self.msg('Test started')

        drupal_path = commonConst.DRUPAL_PATH

        commonAPI.login(self)

        
        params = [
            ('''reset''', '''1'''),]
        url = "%s/civicrm/contact/search/basic" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 5 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        
        
        params = [
            ('''_qf_default''', '''Search:refresh'''),
            ('''contact_type''', ''''''),
            ('''group''', ''''''),
            ('''tag''', ''''''),
            ('''sort_name''', ''''''),
            ('''_qf_Search_refresh''', '''Search'''),]
        url = "%s/civicrm/contact/search/basic" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "post", url, params)
        self.post(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 6 failed", 302, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        params = [
            ('''_qf_Search_display''', '''true'''),]
        
        url = "%s/civicrm/contact/search/basic" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 7 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
                       
        params = [
            ('''_qf_default''', '''Search:refresh'''),
            ('''contact_type''', ''''''),
            ('''group''', ''''''),
            ('''tag''', ''''''),
            ('''sort_name''', ''''''),
            ('''task''', '''1024'''),
            ('''_qf_Search_next_action''', '''Go'''),
            ('''radio_ts''', '''ts_sel'''),
            ('''crmPID''', '''1'''),
            ('''mark_x_78''', '''1'''),
            ('''crmPID_B''', '''1'''),]
        
        url = "%s/civicrm/contact/search/basic" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "post", url, params)
        self.post(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 8 failed", 302, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        params = [
            ('''_qf_AddToOrganization_display''', '''true'''),]
        url = "%s/civicrm/contact/search/basic" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 9 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
                
        params = [
            ('''_qf_default''', '''AddToOrganization:next'''),
            ('''name''', ''''''),
            ('''_qf_AddToOrganization_refresh''', '''Search'''),]
        url = "%s/civicrm/contact/search/basic" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "post", url, params)
        self.post(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 10 failed", 302, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        params = [
            ('''_qf_AddToOrganization_display''', '''true'''),]
        url = "%s/civicrm/contact/search/basic" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 11 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        
        params = [
            ('''_qf_default''', '''AddToOrganization:next'''),
            ('''name''', ''''''),
            ('''contact_check''', '''13'''),
            ('''_qf_AddToOrganization_next''', '''Add To Organization'''),]
        url = "%s/civicrm/contact/search/basic" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "post", url, params)
        self.post(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 12 failed", 302, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        params = [
            ('''_qf_Result_display''', '''true'''),]
        url = "%s/civicrm/contact/search/basic" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 13 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
                
        params = [
            ('''_qf_default''', '''Result:done'''),
            ('''_qf_Result_done''', '''Done'''),]
        url = "%s/civicrm/contact/search/basic" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "post", url, params)
        self.post(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 14 failed", 302, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        params = [
            ('''force''', '''1'''),]
        url = "%s/civicrm/contact/search" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 15 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        self.msg("Test successfully complete")
        

    # ^^^ Insert new recordings here.  (Do not remove this line.)


# Code to load and run the test
if __name__ == 'main':
    test = testActionAddToOranization("testActionAddToOranization")
    test.Run()
