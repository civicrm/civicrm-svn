# Generated by MaxQ [com.bitmechanic.maxq.generator.JythonCodeGenerator]
from PyHttpTestCase import PyHttpTestCase
from com.bitmechanic.maxq import Config
global validatorPkg
if __name__ == 'main':
    validatorPkg = Config.getValidatorPkgName()
# Determine the validator for this testcase.
exec 'from '+validatorPkg+' import Validator'


# definition of test class
class testEmailIndividualError(PyHttpTestCase):
    def runTest(self):
        self.msg('Test started')

        drupal_path = "http://localhost/drupal"
        self.msg("Testing URL: %s" % self.replaceURL('''%s/''') % drupal_path)
        url = "%s/" % drupal_path
        params = None
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 1 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)

        params = [
            ('''edit[destination]''', '''node'''),
            ('''edit[name]''', self.userInput('Enter Drupal UserName')),
            ('''edit[pass]''', self.userInput('Enter Drupal Password')),
            ('''op''', '''Log in'''),]
        self.msg("Testing URL: %s" % self.replaceURL('''%s/user/login?edit[destination]=node&edit[name]=manishzope&edit[pass]=manish&op=Log in''') % drupal_path)
        url = "%s/user/login" % drupal_path
        Validator.validateRequest(self, self.getMethod(), "post", url, params)
        self.post(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 2 failed", 302, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        self.msg("Testing URL: %s" % self.replaceURL('''%s/node''') % drupal_path)
        url = "%s/node" % drupal_path
        params = None
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 3 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)

        params = [
            ('''c_type''', '''Individual'''),
            ('''reset''', '''1'''),]
        self.msg("Testing URL: %s" % self.replaceURL('''%s/civicrm/contact/addI?c_type=Individual&reset=1''') % drupal_path )
        url = "%s/civicrm/contact/addI" % drupal_path
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 4 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        # self.msg("Testing URL: %s" % self.replaceURL('''http://localhost/favicon.ico'''))
        # url = "http://localhost/favicon.ico"
        # params = None
        # Validator.validateRequest(self, self.getMethod(), "get", url, params)
        # self.get(url, params)
        # self.msg("Response code: %s" % self.getResponseCode())
        # self.assertEquals("Assert number 5 failed", 404, self.getResponseCode())
        # Validator.validateResponse(self, self.getMethod(), url, params)
        
        params = [
            ('''prefix''', ''''''),
            ('''first_name''', ''''''),
            ('''last_name''', ''''''),
            ('''suffix''', ''''''),
            ('''greeting_type''', '''Formal'''),
            ('''job_title''', ''''''),
            ('''preferred_communication_method''', ''''''),
            ('''location[1][location_type_id]''', '''1'''),
            ('''location[1][is_primary]''', '''1'''),
            ('''location[1][phone][1][phone_type]''', ''''''),
            ('''location[1][phone][1][phone]''', ''''''),
            ('''location[1][phone][2][phone_type]''', ''''''),
            ('''location[1][phone][2][phone]''', ''''''),
            ('''location[1][email][1][email]''', '''man.com'''),
            ('''location[1][email][2][email]''', ''''''),
            ('''location[1][im][1][provider_id]''', ''''''),
            ('''location[1][im][1][name]''', ''''''),
            ('''location[1][im][2][provider_id]''', ''''''),
            ('''location[1][im][2][name]''', ''''''),
            ('''location[1][address][street_address]''', ''''''),
            ('''location[1][address][supplemental_address_1]''', ''''''),
            ('''location[1][address][supplemental_address_2]''', ''''''),
            ('''location[1][address][city]''', ''''''),
            ('''location[1][address][state_province_id]''', ''''''),
            ('''location[1][address][postal_code]''', ''''''),
            ('''location[1][address][country_id]''', ''''''),
            ('''location[2][location_type_id]''', '''2'''),
            ('''location[2][phone][1][phone_type]''', ''''''),
            ('''location[2][phone][1][phone]''', ''''''),
            ('''location[2][phone][2][phone_type]''', ''''''),
            ('''location[2][phone][2][phone]''', ''''''),
            ('''location[2][email][1][email]''', ''''''),
            ('''location[2][email][2][email]''', ''''''),
            ('''location[2][im][1][provider_id]''', ''''''),
            ('''location[2][im][1][name]''', ''''''),
            ('''location[2][im][2][provider_id]''', ''''''),
            ('''location[2][im][2][name]''', ''''''),
            ('''location[2][address][street_address]''', ''''''),
            ('''location[2][address][supplemental_address_1]''', ''''''),
            ('''location[2][address][supplemental_address_2]''', ''''''),
            ('''location[2][address][city]''', ''''''),
            ('''location[2][address][state_province_id]''', ''''''),
            ('''location[2][address][postal_code]''', ''''''),
            ('''location[2][address][country_id]''', ''''''),
            ('''birth_date[d]''', ''''''),
            ('''birth_date[M]''', ''''''),
            ('''birth_date[Y]''', ''''''),
            ('''note''', ''''''),
            ('''_qf_Edit_next''', '''Save'''),]
        self.msg("Testing URL: %s" % self.replaceURL('''%s/civicrm/contact/addI?prefix=&first_name=&last_name=&suffix=&greeting_type=Formal&job_title=&preferred_communication_method=&location[1][location_type_id]=1&location[1][is_primary]=1&location[1][phone][1][phone_type]=&location[1][phone][1][phone]=&location[1][phone][2][phone_type]=&location[1][phone][2][phone]=&location[1][email][1][email]=man.com&location[1][email][2][email]=&location[1][im][1][provider_id]=&location[1][im][1][name]=&location[1][im][2][provider_id]=&location[1][im][2][name]=&location[1][address][street_address]=&location[1][address][supplemental_address_1]=&location[1][address][supplemental_address_2]=&location[1][address][city]=&location[1][address][state_province_id]=&location[1][address][postal_code]=&location[1][address][country_id]=&location[2][location_type_id]=2&location[2][phone][1][phone_type]=&location[2][phone][1][phone]=&location[2][phone][2][phone_type]=&location[2][phone][2][phone]=&location[2][email][1][email]=&location[2][email][2][email]=&location[2][im][1][provider_id]=&location[2][im][1][name]=&location[2][im][2][provider_id]=&location[2][im][2][name]=&location[2][address][street_address]=&location[2][address][supplemental_address_1]=&location[2][address][supplemental_address_2]=&location[2][address][city]=&location[2][address][state_province_id]=&location[2][address][postal_code]=&location[2][address][country_id]=&birth_date[d]=&birth_date[M]=&birth_date[Y]=&note=&_qf_Edit_next=Save''') % drupal_path)
        url = "%s/civicrm/contact/addI" % drupal_path
        Validator.validateRequest(self, self.getMethod(), "post", url, params)
        self.post(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 6 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        # self.msg("Testing URL: %s" % self.replaceURL('''http://localhost/favicon.ico'''))
        # url = "http://localhost/favicon.ico"
        # params = None
        # Validator.validateRequest(self, self.getMethod(), "get", url, params)
        # self.get(url, params)
        # self.msg("Response code: %s" % self.getResponseCode())
        # self.assertEquals("Assert number 7 failed", 404, self.getResponseCode())
        # Validator.validateResponse(self, self.getMethod(), url, params)
        

    # ^^^ Insert new recordings here.  (Do not remove this line.)


# Code to load and run the test
if __name__ == 'main':
    test = testEmailIndividualError("testEmailIndividualError")
    test.Run()
