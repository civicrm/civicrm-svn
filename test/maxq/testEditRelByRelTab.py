# Generated by MaxQ [com.bitmechanic.maxq.generator.JythonCodeGenerator]
from PyHttpTestCase import PyHttpTestCase
from com.bitmechanic.maxq import Config
from com.bitmechanic.maxq import DBUtil
import commonConst, commonAPI
global validatorPkg
if __name__ == 'main':
    validatorPkg = Config.getValidatorPkgName()
# Determine the validator for this testcase.
exec 'from '+validatorPkg+' import Validator'


# definition of test class
class testEditRelByRelTab(PyHttpTestCase):
    def setUp(self):
        global db
        db = commonAPI.dbStart()
    
    def tearDown(self):
        commonAPI.dbStop(db)
    
    def runTest(self):
        self.msg('Test started')

        drupal_path = commonConst.DRUPAL_PATH

        commonAPI.login(self)

        queryRID    = 'select id from crm_relationship order by RAND() limit 1'
        relationID  = db.loadVal(queryRID)
        queryRA     = 'select contact_id_a from crm_relationship where id=%s' % relationID
        queryRB     = 'select contact_id_b from crm_relationship where id=%s' % relationID
        queryRTID   = 'select relationship_type_id from crm_relationship where id=%s' % relationID
        relationA   = db.loadVal(queryRA)
        relationB   = db.loadVal(queryRB)
        relationTID = db.loadVal(queryRTID)

        queryCA     = 'select sort_name from crm_contact where id=%s' % relationA
        queryCB     = 'select sort_name from crm_contact where id=%s' % relationB
        contactA    = db.loadVal(queryCA)
        contactB    = db.loadVal(queryCB)
        
        queryRAB    = 'select name_a_b from crm_relationship_type where id=%s' % relationTID
        relationAB  = db.loadVal(queryRAB)

        RID = '''%s''' % relationID 
        params = [
            ('''action''', '''update'''),
            ('''rid''', RID),
            ('''rtype''', '''b_a'''),]
        #self.msg("Testing URL: %s" % self.replaceURL('''%s/civicrm/contact/view/rel?action=update&rid=129&rtype=b_a''') % drupal_path)
        url = "%s/civicrm/contact/view/rel" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 5 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        #self.msg("Testing URL: %s" % self.replaceURL('''http://localhost/favicon.ico'''))
        #url = "http://localhost/favicon.ico"
        #params = None
        #Validator.validateRequest(self, self.getMethod(), "get", url, params)
        #self.get(url, params)
        #self.msg("Response code: %s" % self.getResponseCode())
        #self.assertEquals("Assert number 6 failed", 404, self.getResponseCode())
        #Validator.validateResponse(self, self.getMethod(), url, params)
        
        params = [
            ('''_qf_default''', '''Relationship:next'''),
            ('''relationship_type_id''', '''7_b_a'''),
            ('''start_date[d]''', '''14'''),
            ('''start_date[M]''', '''10'''),
            ('''start_date[Y]''', '''1998'''),
            ('''end_date[d]''', '''18'''),
            ('''end_date[M]''', '''12'''),
            ('''end_date[Y]''', '''2022'''),
            ('''_qf_Relationship_next''', '''Save Relationship'''),]
        #self.msg("Testing URL: %s" % self.replaceURL('''%s/civicrm/contact/view/rel?_qf_default=Relationship:next&relationship_type_id=7_b_a&start_date[d]=14&start_date[M]=10&start_date[Y]=1998&end_date[d]=18&end_date[M]=12&end_date[Y]=2022&_qf_Relationship_next=Save Relationship''') % drupal_path)
        url = "%s/civicrm/contact/view/rel" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "post", url, params)
        self.post(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 7 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        params = [
            ('''action''', '''browse'''),]
        #self.msg("Testing URL: %s" % self.replaceURL('''%s/civicrm/contact/view/rel?action=browse''') % drupal_path)
        url = "%s/civicrm/contact/view/rel" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 8 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)

        print ("**************************************************************************************")
        print "Relationship \" \'%s\' %s \'%s\' \" is Edited Successfully" % (contactA, relationAB, contactB)
        print ("**************************************************************************************")
        
        #self.msg("Testing URL: %s" % self.replaceURL('''http://localhost/favicon.ico'''))
        #url = "http://localhost/favicon.ico"
        #self.msg("Testing URL: %s" % url)
        #params = None
        #Validator.validateRequest(self, self.getMethod(), "get", url, params)
        #self.get(url, params)
        #self.msg("Response code: %s" % self.getResponseCode())
        #self.assertEquals("Assert number 9 failed", 404, self.getResponseCode())
        #Validator.validateResponse(self, self.getMethod(), url, params)
        
        self.msg('Test successfully complete.')
    # ^^^ Insert new recordings here.  (Do not remove this line.)


# Code to load and run the test
if __name__ == 'main':
    test = testEditRelByRelTab("testEditRelByRelTab")
    test.Run()
