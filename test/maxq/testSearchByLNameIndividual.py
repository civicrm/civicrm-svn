# Generated by MaxQ [com.bitmechanic.maxq.generator.JythonCodeGenerator]
from PyHttpTestCase import PyHttpTestCase
from com.bitmechanic.maxq import Config
from com.bitmechanic.maxq import DBUtil
import commonConst, commonAPI
global validatorPkg
if __name__ == 'main':
    validatorPkg = Config.getValidatorPkgName()
# Determine the validator for this testcase.
exec 'from '+validatorPkg+' import Validator'


# definition of test class
class testSearchByLNameIndividual(PyHttpTestCase):
    def setUp(self):
        global db
        db = commonAPI.dbStart()
    
    def tearDown(self):
        commonAPI.dbStop(db)
    
    def runTest(self):
        self.msg('Test started')

        drupal_path = commonConst.DRUPAL_PATH

        commonAPI.login(self)

        params = [
            ('''reset''', '''1'''),]
        #self.msg("Testing URL: %s" % self.replaceURL('''%s/civicrm/contact/search?reset=1''') % drupal_path)
        url = "%s/civicrm/contact/search" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 5 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        #self.msg("Testing URL: %s" % self.replaceURL('''http://localhost/favicon.ico'''))
        #url = "http://localhost/favicon.ico"
        #params = None
        #Validator.validateRequest(self, self.getMethod(), "get", url, params)
        #self.get(url, params)
        #self.msg("Response code: %s" % self.getResponseCode())
        #self.assertEquals("Assert number 6 failed", 404, self.getResponseCode())
        #Validator.validateResponse(self, self.getMethod(), url, params)
        
        params = [
            ('''_qf_default''', '''Search:refresh'''),
            ('''contact_type''', '''Individual'''),
            ('''group''', ''''''),
            ('''tag''', ''''''),
            ('''sort_name''', '''zope'''),
            ('''_qf_Search_refresh''', '''Search'''),
            ('''task''', ''''''),
            ('''radio_ts''', '''ts_sel'''),]
        url = "%s/civicrm/contact/search" % drupal_path
        self.msg("Testing URL %s" % url)
        Validator.validateRequest(self, self.getMethod(), "post", url, params)
        self.post(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 7 failed", 302, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)

        name    = '%s' % params[4][1]
        contact = '%s' % params[1][1]
        group   = '%s' % params[2][1]
        tag     = '%s' % params[3][1]
               
        query   = 'SELECT count(DISTINCT crm_contact.id) FROM crm_contact \
        LEFT JOIN crm_location ON (crm_contact.id = crm_location.contact_id AND crm_location.is_primary = 1) \
        LEFT JOIN crm_address ON crm_location.id = crm_address.location_id \
        LEFT JOIN crm_phone ON (crm_location.id = crm_phone.location_id AND crm_phone.is_primary = 1) \
        LEFT JOIN crm_email ON (crm_location.id = crm_email.location_id AND crm_email.is_primary = 1) \
        LEFT JOIN crm_state_province ON crm_address.state_province_id = crm_state_province.id \
        LEFT JOIN crm_country ON crm_address.country_id = crm_country.id \
        LEFT JOIN crm_group_contact ON crm_contact.id = crm_group_contact.contact_id \
        WHERE (crm_contact.sort_name LIKE \'%%%s%%\') AND crm_contact.contact_type=\'%s\' AND  1 ' % (name, contact)
        
        noOfContact = db.loadVal(query)
        if noOfContact == '1' :
            string = "Found %s contact" % noOfContact
        else :
            string = "Found %s contacts" % noOfContact
        
        params = [
            ('''_qf_Search_display''', '''true'''),]
        #self.msg("Testing URL: %s" % self.replaceURL('''%s/civicrm/contact/search?_qf_Search_display=true''') % drupal_path)
        url = "%s/civicrm/contact/search" % drupal_path
        self.msg("Testing URL %s" % url)
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 8 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)

        print ("*********************************************************************************")
        print ("The Citeria for search is ")
        self.msg ("%s : %s" % ("Contact Type", contact))
        self.msg ("%s : %s" % ("Group       ", group))
        self.msg ("%s : %s" % ("Tag         ", tag))
        self.msg ("%s : %s" % ("Sort Name   ", name))
        print ("*********************************************************************************")
        
        if self.responseContains(string) :
            print ("*********************************************************************************")
            self.msg ("Search \"%s\"" % string)
            print ("*********************************************************************************")
        
        elif noOfContact == '0' :
            print ("*********************************************************************************")
            self.msg("The Response is \"%s\"" % string )
            print ("*********************************************************************************")            
        
        else :
            print ("*********************************************************************************")
            self.msg("The Response does not match with the result from the database ")
            print ("*********************************************************************************")            

    # ^^^ Insert new recordings here.  (Do not remove this line.)


# Code to load and run the test
if __name__ == 'main':
    test = testSearchByLNameIndividual("testSearchByLNameIndividual")
    test.Run()
