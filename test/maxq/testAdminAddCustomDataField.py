# Generated by MaxQ [com.bitmechanic.maxq.generator.JythonCodeGenerator]
from PyHttpTestCase import PyHttpTestCase
from com.bitmechanic.maxq import Config
from com.bitmechanic.maxq import DBUtil
import commonConst, commonAPI
global validatorPkg
if __name__ == 'main':
    validatorPkg = Config.getValidatorPkgName()
# Determine the validator for this testcase.
exec 'from '+validatorPkg+' import Validator'


# definition of test class
class testAdminAddCustomDataFieldO(PyHttpTestCase):
    def setUp(self):
        global db
        db = commonAPI.dbStart()
    
    def tearDown(self):
        commonAPI.dbStop(db)
    
    def runTest(self):
        self.msg('Test started')
        
        drupal_path = commonConst.DRUPAL_PATH
        
        commonAPI.login(self)
        
        params = [
            ('''reset''', '''1'''),]
        url = "%s/civicrm/admin" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 6 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        groupName     = 'Test Group'
        queryID       = 'select id from civicrm_custom_group where title like \'%%%s%%\'' % groupName
        customDataNum = db.loadVal(queryID)
        
        params = [
            ('''reset''', '''1'''),]
        url = "%s/civicrm/admin/custom/group" % drupal_path
        self.msg("Testing URL: %s" % url)
        params = None
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 7 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        if customDataNum :
            GID = '''%s''' % customDataNum 
            params = [
                ('''reset''', '''1'''),
                ('''action''', '''browse'''),
                ('''gid''', GID),]
            url = "%s/civicrm/admin/custom/group/field" % drupal_path
            self.msg("Testing URL: %s" % url)
            Validator.validateRequest(self, self.getMethod(), "get", url, params)
            self.get(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 8 failed", 200, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
            
            params = [
                ('''action''', '''add'''),
                ('''reset''', '''1'''),
                ('''gid''', GID),]
            url = "%s/civicrm/admin/custom/group/field" % drupal_path
            self.msg("Testing URL: %s" % url)
            Validator.validateRequest(self, self.getMethod(), "get", url, params)
            self.get(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 9 failed", 200, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
            
            params = [
                ('''_qf_default''', '''Field:next'''),
                ('''label''', '''Test field 1'''),
                ('''data_type[0]''', '''1'''),
                ('''data_type[1]''', '''Select'''),
                ('''option_label[1]''', '''Label 1'''),
                ('''option_value[1]''', '''23'''),
                ('''option_weight[1]''', '''1'''),
                ('''option_status[1]''', '''1'''),
                ('''option_label[2]''', '''Label 2'''),
                ('''option_value[2]''', '''24'''),
                ('''option_weight[2]''', '''2'''),
                ('''option_status[2]''', '''1'''),
                ('''option_label[3]''', '''Label 3'''),
                ('''option_value[3]''', '''25'''),
                ('''option_weight[3]''', '''3'''),
                ('''option_status[3]''', '''1'''),
                ('''option_label[4]''', '''Label 4'''),
                ('''option_value[4]''', '''26'''),
                ('''option_weight[4]''', '''4'''),
                ('''option_status[4]''', '''1'''),
                ('''option_label[5]''', ''''''),
                ('''option_value[5]''', ''''''),
                ('''option_weight[5]''', ''''''),
                ('''option_status[5]''', '''1'''),
                ('''option_label[6]''', ''''''),
                ('''option_value[6]''', ''''''),
                ('''option_weight[6]''', ''''''),
                ('''option_status[6]''', '''1'''),
                ('''option_label[7]''', ''''''),
                ('''option_value[7]''', ''''''),
                ('''option_weight[7]''', ''''''),
                ('''option_status[7]''', '''1'''),
                ('''option_label[8]''', ''''''),
                ('''option_value[8]''', ''''''),
                ('''option_weight[8]''', ''''''),
                ('''option_status[8]''', '''1'''),
                ('''option_label[9]''', ''''''),
                ('''option_value[9]''', ''''''),
                ('''option_weight[9]''', ''''''),
                ('''option_status[9]''', '''1'''),
                ('''option_label[10]''', ''''''),
                ('''option_value[10]''', ''''''),
                ('''option_weight[10]''', ''''''),
                ('''option_status[10]''', '''1'''),
                ('''option_label[11]''', ''''''),
                ('''option_value[11]''', ''''''),
                ('''option_weight[11]''', ''''''),
                ('''option_status[11]''', '''1'''),
                ('''weight''', '''1'''),
                ('''default_value''', ''''''),
                ('''help_post''', ''''''),
                ('''is_required''', '''1'''),
                ('''is_searchable''', '''1'''),
                ('''is_active''', '''1'''),
                ('''_qf_Field_next''', '''Save'''),]
            url = "%s/civicrm/admin/custom/group/field" % drupal_path
            self.msg("Testing URL: %s" % url)
            
            name      = params[1][1] 
            queryCFID = 'select id from civicrm_custom_field where label=\'%s\'' % name
            cfid      = db.loadVal(queryCFID)
            
            if cfid :
                Validator.validateRequest(self, self.getMethod(), "post", url, params)
                self.post(url, params)
                self.msg("Response code: %s" % self.getResponseCode())
                self.assertEquals("Assert number 10 failed", 200, self.getResponseCode())
                Validator.validateResponse(self, self.getMethod(), url, params)
                print "****************************************************************"
                print "Custom Group Field \'%s\' already exists." % name
                print "****************************************************************"
            else :
                Validator.validateRequest(self, self.getMethod(), "post", url, params)
                self.post(url, params)
                self.msg("Response code: %s" % self.getResponseCode())
                self.assertEquals("Assert number 10 failed", 302, self.getResponseCode())
                Validator.validateResponse(self, self.getMethod(), url, params)
                print "****************************************************************"
                print "Custom Group Field \'%s\' Added." % name
                print "****************************************************************"
            
            params = [
                ('''reset''', '''1'''),
                ('''action''', '''browse'''),
                ('''gid''', GID),]
            url = "%s/civicrm/admin/custom/group/field" % drupal_path
            self.msg("Testing URL: %s" % url)
            Validator.validateRequest(self, self.getMethod(), "get", url, params)
            self.get(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 11 failed", 200, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
        else :
            print "****************************************************************"
            print "Custom Group \'%s\' not found." % groupName
            print "****************************************************************"
        commonAPI.logout(self)
        self.msg('Test successfully complete.')
    # ^^^ Insert new recordings here.  (Do not remove this line.)


# Code to load and run the test
if __name__ == 'main':
    test = testAdminAddCustomDataFieldO("testAdminAddCustomDataFieldO")
    test.Run()
