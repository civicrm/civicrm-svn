# Generated by MaxQ [com.bitmechanic.maxq.generator.JythonCodeGenerator]
from PyHttpTestCase import PyHttpTestCase
from com.bitmechanic.maxq import Config
from com.bitmechanic.maxq import DBUtil
import commonConst, commonAPI
global validatorPkg
if __name__ == 'main':
    validatorPkg = Config.getValidatorPkgName()
# Determine the validator for this testcase.
exec 'from '+validatorPkg+' import Validator'


# definition of test class
class testAdminAddCustomDataField(PyHttpTestCase):
    def setUp(self):
        global db
        db = commonAPI.dbStart()
    
    def tearDown(self):
        commonAPI.dbStop(db)
    
    def runTest(self):
        self.msg('Test started')
        
        drupal_path = commonConst.DRUPAL_PATH
        
        commonAPI.login(self)
        
        params = [
            ('''reset''', '''1'''),]
        url = "%s/civicrm/admin" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 6 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        params = [
            ('''reset''', '''1'''),]
        url = "%s/civicrm/admin/custom/group" % drupal_path
        self.msg("Testing URL: %s" % url)
        params = None
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 7 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        name      = 'Test Field 1'
        queryCFID = 'select id from civicrm_custom_field where label like \'%%%s%%\'' % name
        queryGID  = 'select custom_group_id from civicrm_custom_field where label like \'%%%s%%\'' % name
        
        gid       = db.loadVal(queryGID)
        cfid      = db.loadVal(queryCFID)
        
        if gid :
            GID       = '''%s''' % gid
            params = [
                ('''reset''', '''1'''),
                ('''action''', '''browse'''),
                ('''gid''', GID),]
            url = "%s/civicrm/admin/custom/group/field" % drupal_path
            self.msg("Testing URL: %s" % url)
            Validator.validateRequest(self, self.getMethod(), "get", url, params)
            self.get(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 8 failed", 200, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
            
            if cfid :
                CFID   = '''%s''' % cfid
                params = [
                    ('''action''', '''preview'''),
                    ('''reset''', '''1'''),
                    ('''gid''', GID),
                    ('''id''', CFID),]
                url = "%s/civicrm/admin/custom/group/field" % drupal_path
                self.msg("Testing URL: %s" % url)
                Validator.validateRequest(self, self.getMethod(), "get", url, params)
                self.get(url, params)
                self.msg("Response code: %s" % self.getResponseCode())
                self.assertEquals("Assert number 9 failed", 200, self.getResponseCode())
                Validator.validateResponse(self, self.getMethod(), url, params)
                
                params = [
                    ('''_qf_default''', '''Preview:cancel'''),
                    ('''0_9_Test_field_1''', '''23'''),
                    ('''_qf_Preview_cancel''', '''Done with Preview'''),]
                url = "%s/civicrm/admin/custom/group/field" % drupal_path
                Validator.validateRequest(self, self.getMethod(), "post", url, params)
                self.post(url, params)
                self.msg("Response code: %s" % self.getResponseCode())
                self.assertEquals("Assert number 10 failed", 302, self.getResponseCode())
                Validator.validateResponse(self, self.getMethod(), url, params)
                
                params = [
                    ('''reset''', '''1'''),
                    ('''action''', '''browse'''),
                    ('''gid''', GID),]
                url = "%s/civicrm/admin/custom/group/field" % drupal_path
                self.msg("Testing URL: %s" % url)
                Validator.validateRequest(self, self.getMethod(), "get", url, params)
                self.get(url, params)
                self.msg("Response code: %s" % self.getResponseCode())
                self.assertEquals("Assert number 11 failed", 200, self.getResponseCode())
                Validator.validateResponse(self, self.getMethod(), url, params)
                print "****************************************************************"
                print "Custom Group Field \'%s\' successfully Previewed." % name
                print "****************************************************************"
            else :
                print "****************************************************************"
                print "Custom Group Field \'%s\' not found." % name
                print "****************************************************************"
        else :
            print "****************************************************************"
            print "Required Custom Group not found."
            print "****************************************************************"
        commonAPI.logout(self)
        self.msg('Test successfully complete.')
    # ^^^ Insert new recordings here.  (Do not remove this line.)


# Code to load and run the test
if __name__ == 'main':
    test = testAdminAddCustomDataField("testAdminAddCustomDataField")
    test.Run()
