# Generated by MaxQ [com.bitmechanic.maxq.generator.JythonCodeGenerator]
from PyHttpTestCase import PyHttpTestCase
from com.bitmechanic.maxq import Config
from com.bitmechanic.maxq import DBUtil
import commonConst, commonAPI
global validatorPkg
if __name__ == 'main':
    validatorPkg = Config.getValidatorPkgName()
# Determine the validator for this testcase.
exec 'from '+validatorPkg+' import Validator'


# definition of test class
class testAdminEditGender(PyHttpTestCase):
    def setUp(self):
        global db
        db = commonAPI.dbStart()
    
    def tearDown(self):
        commonAPI.dbStop(db)
    
    def runTest(self):
        self.msg('Test started')
        
        drupal_path = commonConst.DRUPAL_PATH
        
        commonAPI.login(self)
        
        params = [
            ('''reset''', '''1'''),]
        url = "%s/civicrm/admin" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 7 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        url = "%s/civicrm/admin/gender" % drupal_path
        self.msg("Testing URL: %s" % url)
        params = None
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 9 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        name            = '\'New Gender\''
        newName         = 'New Gender..Edit'
        query1          = 'select id from civicrm_gender where name=%s' % name
        query2          = 'select id from civicrm_gender where name=\'%s\'' % newName
        genderID        = db.loadVal(query1)
        updatedGenderID = db.loadVal(query2)
        
        if genderID :
            if not updatedGenderID :
                GID     = '''%s''' % genderID 
                params = [
                    ('''action''', '''update'''),
                    ('''id''', GID),]
                url = "%s/civicrm/admin/gender"  % drupal_path
                self.msg("Testing URL: %s" % url)
                Validator.validateRequest(self, self.getMethod(), "get", url, params)
                self.get(url, params)
                self.msg("Response code: %s" % self.getResponseCode())
                self.assertEquals("Assert number 11 failed", 200, self.getResponseCode())
                Validator.validateResponse(self, self.getMethod(), url, params)
                
                EDIT   = '''%s''' % newName
                params = [
                    ('''_qf_default''', '''Gender:next'''),
                    ('''name''',EDIT ),
                    ('''weight''', '''6'''),
                    ('''is_active''', '''1'''),
                    ('''_qf_Gender_next''', '''Save'''),]
                url = "%s/civicrm/admin/gender" % drupal_path
                self.msg("Testing URL: %s" % url)
                Validator.validateRequest(self, self.getMethod(), "post", url, params)
                self.post(url, params)
                self.msg("Response code: %s" % self.getResponseCode())
                self.assertEquals("Assert number 13 failed", 302, self.getResponseCode())
                Validator.validateResponse(self, self.getMethod(), url, params)
                
                print "*************************************************************************"
                print "Gender %s Updated Successfully" % name
                print "*************************************************************************"
                params = [
                    ('''reset''', '''1'''),
                    ('''action''', '''browse'''),]
                url = "%s/civicrm/admin/gender" % drupal_path
                self.msg("Testing URL: %s" % url)
                Validator.validateRequest(self, self.getMethod(), "get", url, params)
                self.get(url, params)
                self.msg("Response code: %s" % self.getResponseCode())
                self.assertEquals("Assert number 14 failed", 200, self.getResponseCode())
                Validator.validateResponse(self, self.getMethod(), url, params)
            else :
                print "*************************************************************************"
                print "Gender %s Already Exists" % newName
                print "*************************************************************************"
        else :
            print "*************************************************************************"
            print "There is no Gender Named %s" % name
            print "*************************************************************************"
        
        commonAPI.logout(self)
        self.msg('Test successfully complete.')
    # ^^^ Insert new recordings here.  (Do not remove this line.)


# Code to load and run the test
if __name__ == 'main':
    test = testAdminEditGender("testAdminEditGender")
    test.Run()
