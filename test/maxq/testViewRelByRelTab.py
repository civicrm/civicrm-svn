# Generated by MaxQ [com.bitmechanic.maxq.generator.JythonCodeGenerator]
from PyHttpTestCase import PyHttpTestCase
from com.bitmechanic.maxq import Config
from com.bitmechanic.maxq import DBUtil
import commonConst, commonAPI
global validatorPkg
if __name__ == 'main':
    validatorPkg = Config.getValidatorPkgName()
# Determine the validator for this testcase.
exec 'from '+validatorPkg+' import Validator'


# definition of test class
class testViewRelByRelTab(PyHttpTestCase):
    def setUp(self):
        global db
        db = commonAPI.dbStart()
    
    def tearDown(self):
        commonAPI.dbStop(db)
    
    def runTest(self):
        self.msg('Test started')

        drupal_path = commonConst.DRUPAL_PATH

        commonAPI.login(self)
        
        nameI      = 'Zope, Manish'
        nameH      = 'Zope House'
        
        queryCA    = 'select id from civicrm_contact where sort_name=\'%s\' and contact_type=\'Individual\'' % nameI
        contactIID = db.loadVal(queryCA)
        queryCB    = 'select id from civicrm_contact where sort_name=\'%s\' and contact_type=\'Household\'' % nameH
        contactHID = db.loadVal(queryCB)
        
        if contactIID :
            CID = '''%s''' % contactIID
            params = [
                ('''reset''', '''1'''),
                ('''cid''', CID),]
            url = "%s/civicrm/contact/view" % drupal_path
            self.msg("Testign URL: %s" % url)
            Validator.validateRequest(self, self.getMethod(), "get", url, params)
            self.get(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 5 failed", 200, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
            
            url = "%s/civicrm/contact/view/rel" % drupal_path
            self.msg("Testing URL: %s" % url)
            params = None
            Validator.validateRequest(self, self.getMethod(), "get", url, params)
            self.get(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 6 failed", 200, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
            
            queryRID  = 'select id from civicrm_relationship where contact_id_a=%s and contact_id_b=%s' % (contactIID, contactHID)
            relID      = db.loadVal(queryRID)
            
            if relID :
                RID = '''%s''' % relID
                params = [
                    ('''action''', '''view'''),
                    ('''rid''', RID),
                    ('''rtype''', '''b_a'''),]
                url = "%s/civicrm/contact/view/rel" % drupal_path
                self.msg("Testing URL: %s" % url)
                Validator.validateRequest(self, self.getMethod(), "get", url, params)
                self.get(url, params)
                self.msg("Response code: %s" % self.getResponseCode())
                self.assertEquals("Assert number 7 failed", 200, self.getResponseCode())
                Validator.validateResponse(self, self.getMethod(), url, params)

                queryRTID  = 'select relationship_type_id from civicrm_relationship where contact_id_a=%s' % contactIID
                relTID      = db.loadVal(queryRTID)
                
                queryRA      = 'select name_a_b from civicrm_relationship_type where id=%s' % relTID
                queryRB      = 'select name_b_a from civicrm_relationship_type where id=%s' % relTID
                
                relationA    = db.loadVal(queryRA)
                relationB    = db.loadVal(queryRB)
                
                if self.responseContains(relationA) and self.responseContains(nameH) :
                    print ("************************************************************************************")
                    print ("Page Response Shows the Relationship as : ")
                    print ("------------------------------------------------------------------------------------")
                    print ("\'" + nameI + "\' -- " + relationA + " -- \'" + nameH + "\'")
                    print ("------------------------------------------------------------------------------------")
                    print ("************************************************************************************")
                    print ("\n")
                    print ("************************************************************************************")
                    print ("Check for the same Relationship through second contact's view : ")
                    print ("------------------------------------------------------------------------------------")
                    print ("\'" + nameH + "\' -- " + relationB + " -- \'" + nameI + "\'")
                    print ("------------------------------------------------------------------------------------")
                    print ("************************************************************************************")
                else :
                    print ("************************************************************************************")
                    print ("Database Values and Response by the Test Script \"Do Not Match\"")
                    print ("************************************************************************************")
            else :
                print ("**************************************************************************************")
                print "No Relationship between \'%s\' and \'%s\' Exists." % (nameI, nameH)
                print ("**************************************************************************************")
            
            params = [
                ('''action''', '''browse'''),]
            url = "%s/civicrm/contact/view/rel" % drupal_path
            self.msg("Testing URL: %s" % url)
            Validator.validateRequest(self, self.getMethod(), "get", url, params)
            self.get(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 8 failed", 200, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
        else :
            print ("**************************************************************************************")
            print " Individual \'%s\' do not Exists" % nameI
            print ("**************************************************************************************")
        
        commonAPI.logout(self)    
        self.msg('Test successfully complete.')
    # ^^^ Insert new recordings here.  (Do not remove this line.)


# Code to load and run the test
if __name__ == 'main':
    test = testViewRelByRelTab("testViewRelByRelTab")
    test.Run()
