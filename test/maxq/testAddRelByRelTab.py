# Generated by MaxQ [com.bitmechanic.maxq.generator.JythonCodeGenerator]
from PyHttpTestCase import PyHttpTestCase
from com.bitmechanic.maxq import Config
from com.bitmechanic.maxq import DBUtil
import commonConst, commonAPI
global validatorPkg
if __name__ == 'main':
    validatorPkg = Config.getValidatorPkgName()
# Determine the validator for this testcase.
exec 'from '+validatorPkg+' import Validator'


# definition of test class
class testAddRelByRelTab(PyHttpTestCase):
    def setUp(self):
        global db
        db = commonAPI.dbStart()
    
    def tearDown(self):
        commonAPI.dbStop(db)
    
    def runTest(self):
        self.msg('Test started')

        drupal_path = commonConst.DRUPAL_PATH
        
        commonAPI.login(self)
        
        params = [
            ('''_qf_default''', '''Search:refresh'''),
            ('''contact_type''', '''Individual'''),
            ('''group''', ''''''),
            ('''tag''', ''''''),
            ('''sort_name''', '''Zope, Manish'''),
            ('''_qf_Search_refresh''', '''Search'''),
            ('''task''', ''''''),
            ('''radio_ts''', '''ts_sel'''),]
        url = "%s/civicrm/contact/search" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "post", url, params)
        self.post(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 5 failed", 302, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)

        queryCA    = 'select id from crm_contact where sort_name like \'%%%s%%\' and contact_type=\'Individual\'' % params[4][1]
        queryCB    = 'select id from crm_contact where sort_name like \'%%Zope House%%\' and contact_type=\'Household\''
        contactA   = db.loadVal(queryCA)
        contactB   = db.loadVal(queryCB)

        if contactA :
            if contactB :
                queryNameA = 'select sort_name from crm_contact where id=%s' % contactA
                queryNameB = 'select sort_name from crm_contact where id=%s' % contactB
                
                nameCA     = db.loadVal(queryNameA)
                nameCB     = db.loadVal(queryNameB)
                
                params = [
                    ('''_qf_Search_display''', '''true'''),]
                url = "%s/civicrm/contact/search" % drupal_path
                self.msg("Testing URL: %s" % url)
                Validator.validateRequest(self, self.getMethod(), "get", url, params)
                self.get(url, params)
                self.msg("Response code: %s" % self.getResponseCode())
                self.assertEquals("Assert number 6 failed", 200, self.getResponseCode())
                Validator.validateResponse(self, self.getMethod(), url, params)
                
                contactID = '''%s''' % contactA
                params = [
                    ('''reset''', '''1'''),
                    ('''cid''', contactID),]
                url = "%s/civicrm/contact/view" % drupal_path
                self.msg("Testing URL: %s" % url)
                Validator.validateRequest(self, self.getMethod(), "get", url, params)
                self.get(url, params)
                self.msg("Response code: %s" % self.getResponseCode())
                self.assertEquals("Assert number 7 failed", 200, self.getResponseCode())
                Validator.validateResponse(self, self.getMethod(), url, params)
                
                url = "%s/civicrm/contact/view/rel" % drupal_path
                self.msg("Testing URL: %s" % url)
                params = None
                Validator.validateRequest(self, self.getMethod(), "get", url, params)
                self.get(url, params)
                self.msg("Response code: %s" % self.getResponseCode())
                self.assertEquals("Assert number 8 failed", 200, self.getResponseCode())
                Validator.validateResponse(self, self.getMethod(), url, params)
                
                params = [
                    ('''cid''', contactID),
                    ('''action''', '''add'''),
                    ('''reset''', '''1'''),]
                url = "%s/civicrm/contact/view/rel" % drupal_path
                self.msg("Testing URL: %s" % url)
                Validator.validateRequest(self, self.getMethod(), "get", url, params)
                self.get(url, params)
                self.msg("Response code: %s" % self.getResponseCode())
                self.assertEquals("Assert number 9 failed", 200, self.getResponseCode())
                Validator.validateResponse(self, self.getMethod(), url, params)
                
                params = [
                    ('''_qf_default''', '''Relationship:next'''),
                    ('''relationship_type_id''', '''7_a_b'''),
                    ('''name''', ''''''),
                    ('''_qf_Relationship_refresh''', '''Search'''),]
                url = "%s/civicrm/contact/view/rel" % drupal_path
                self.msg("Testing URL: %s" % url)
                Validator.validateRequest(self, self.getMethod(), "post", url, params)
                self.post(url, params)
                self.msg("Response code: %s" % self.getResponseCode())
                self.assertEquals("Assert number 11 failed", 302, self.getResponseCode())
                Validator.validateResponse(self, self.getMethod(), url, params)
                
                params = [
                    ('''_qf_Relationship_display''', '''true'''),]
                url = "%s/civicrm/contact/view/rel" % drupal_path
                self.msg("Testing URL: %s" % url)
                Validator.validateRequest(self, self.getMethod(), "get", url, params)
                self.get(url, params)
                self.msg("Response code: %s" % self.getResponseCode())
                self.assertEquals("Assert number 12 failed", 200, self.getResponseCode())
                Validator.validateResponse(self, self.getMethod(), url, params)
                
                contactCheck = '''contact_check[%s]''' % int(contactB)
                params = [
                    ('''_qf_default''', '''Relationship:next'''),
                    ('''relationship_type_id''', '''7_a_b'''),
                    ('''name''', ''''''),
                    (contactCheck, '''1'''),
                    ('''start_date[d]''', ''''''),
                    ('''start_date[M]''', ''''''),
                    ('''start_date[Y]''', ''''''),
                    ('''end_date[d]''', ''''''),
                    ('''end_date[M]''', ''''''),
                    ('''end_date[Y]''', ''''''),
                    ('''_qf_Relationship_next''', '''Save Relationship'''),]
                url = "%s/civicrm/contact/view/rel" % drupal_path
                self.msg("Testing URL: %s" % url)
                Validator.validateRequest(self, self.getMethod(), "post", url, params)
                self.post(url, params)
                self.msg("Response code: %s" % self.getResponseCode())
                self.assertEquals("Assert number 14 failed", 302, self.getResponseCode())
                Validator.validateResponse(self, self.getMethod(), url, params)
                
                params = [
                    ('''action''', '''browse'''),]
                url = "%s/civicrm/contact/view/rel" % drupal_path
                self.msg("Testing URL: %s" % url)
                Validator.validateRequest(self, self.getMethod(), "get", url, params)
                self.get(url, params)
                self.msg("Response code: %s" % self.getResponseCode())
                self.assertEquals("Assert number 15 failed", 200, self.getResponseCode())
                Validator.validateResponse(self, self.getMethod(), url, params)
            
                print ("**************************************************************************************")
                print "Relationship \" \'%s\' Household Member of \'%s\' \" is Added Successfully" % (nameCA, nameCB)
                print ("**************************************************************************************")
            else :
                print ("**************************************************************************************")
                print " Household \'Zope House\' do not Exists"
                print ("**************************************************************************************")
        else :
            print ("**************************************************************************************")
            print " Individual \'Zope, Manish\' do not Exists"
            print ("**************************************************************************************")
        
        self.msg('Test successfully complete.')
    # ^^^ Insert new recordings here.  (Do not remove this line.)


# Code to load and run the test
if __name__ == 'main':
    test = testAddRelByRelTab("testAddRelByRelTab")
    test.Run()
