# Generated by MaxQ [com.bitmechanic.maxq.generator.JythonCodeGenerator]
from PyHttpTestCase import PyHttpTestCase
from com.bitmechanic.maxq import Config
from com.bitmechanic.maxq import DBUtil
import commonConst, commonAPI
global validatorPkg
if __name__ == 'main':
    validatorPkg = Config.getValidatorPkgName()
# Determine the validator for this testcase.
exec 'from '+validatorPkg+' import Validator'


# definition of test class
class testEditCustomDataInline(PyHttpTestCase):
    def setUp(self):
        global db
        db = commonAPI.dbStart()
    
    def tearDown(self):
        commonAPI.dbStop(db)
    
    def runTest(self):
        self.msg('Test started')
        
        drupal_path = commonConst.DRUPAL_PATH
        
        commonAPI.login(self)
        
        name    = 'Zope, Manish'
        queryID = 'select id from civicrm_contact where sort_name=\'%s\'' % name
        
        cid     = db.loadVal(queryID)

        if cid :
            CID = '''%s''' % cid
            params = [
                ('''_qf_default''', '''Search:refresh'''),
                ('''contact_type''', ''''''),
                ('''group''', ''''''),
                ('''tag''', ''''''),
                ('''sort_name''', ''''''),
                ('''_qf_Search_refresh''', '''Search'''),]
            url = "%s/civicrm/contact/search/basic" % drupal_path
            self.msg("Testing URL: %s" % url)
            Validator.validateRequest(self, self.getMethod(), "post", url, params)
            self.post(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 6 failed", 302, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
            
            params = [
                ('''_qf_Search_display''', '''true'''),]
            url = "%s/civicrm/contact/search/basic" % drupal_path
            self.msg("Testing URL: %s" % url)
            Validator.validateRequest(self, self.getMethod(), "get", url, params)
            self.get(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 7 failed", 200, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
            
            params = [
                ('''q''', '''civicrm/contact/search/basic'''),
                ('''force''', '''1'''),
                ('''sortByCharacter''', '''Z'''),]
            url = "%s/civicrm/contact/search/basic" % drupal_path
            self.msg("Testing URL: %s" % url)
            Validator.validateRequest(self, self.getMethod(), "get", url, params)
            self.get(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 8 failed", 200, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
            
            params = [
                ('''reset''', '''1'''),
                ('''cid''', CID),]
            url = "%s/civicrm/contact/view" % drupal_path
            self.msg("Testing URL: %s" % url)
            Validator.validateRequest(self, self.getMethod(), "get", url, params)
            self.get(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 9 failed", 200, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
            
            queryID = 'select min(id) from civicrm_custom_group where style=\'inline\''
            gid     = db.loadVal(queryID)
            
            if gid :
                params = [
                    ('''reset''', '''1'''),
                    ('''gid''', '''0'''),
                    ('''cid''', CID),]
                url = "%s/civicrm/contact/view/cd" % drupal_path
                self.msg("Testing URL: %s" % url)
                Validator.validateRequest(self, self.getMethod(), "get", url, params)
                self.get(url, params)
                self.msg("Response code: %s" % self.getResponseCode())
                self.assertEquals("Assert number 10 failed", 200, self.getResponseCode())
                Validator.validateResponse(self, self.getMethod(), url, params)
                
                params = [
                    ('''cid''', CID),
                    ('''gid''', '''0'''),
                    ('''action''', '''update'''),
                    ('''reset''', '''1'''),]
                url = "%s/civicrm/contact/view/cd" % drupal_path
                self.msg("Testing URL: %s" % url)
                Validator.validateRequest(self, self.getMethod(), "get", url, params)
                self.get(url, params)
                self.msg("Response code: %s" % self.getResponseCode())
                self.assertEquals("Assert number 11 failed", 200, self.getResponseCode())
                Validator.validateResponse(self, self.getMethod(), url, params)
                
                gname      = 'Test Group'
                flabel     = 'Test field 1'
                queryGID   = 'select id from civicrm_custom_group where label=\'%s\'' % gname
                gid        = db.loadVal(queryID)
                queryFID   = 'select id from civicrm_custom_field where label=\'%s\' and custom_group_id=\'%s\'' % (flabel, gid)
                queryFNAME = 'select name from civicrm_custom_field where label=\'%s\' and custom_group_id=\'%s\'' % (flabel, gid)
                fid        = db.loadVal(queryFID)
                fname      = db.loadVal(queryFNAME)
                
                if gid and fid :
                    FNAME      = '''%s_%s_%s''' % (gid, fid, fname)
                    
                    params = [
                        ('''_qf_default''', '''CustomData:next'''),
                        (FNAME, '''26'''),
                        ('''_qf_CustomData_next''', '''Save'''),]
                    url = "%s/civicrm/contact/view/cd" % drupal_path
                    self.msg("Testing URL: %s" % url)
                    Validator.validateRequest(self, self.getMethod(), "post", url, params)
                    self.post(url, params)
                    self.msg("Response code: %s" % self.getResponseCode())
                    self.assertEquals("Assert number 12 failed", 302, self.getResponseCode())
                    Validator.validateResponse(self, self.getMethod(), url, params)
                else :
                    print "****************************************************************"
                    print "Field \'%s\' not found in \'%s\' Group." % (flabel, gname)
                    print "****************************************************************"
                params = [
                    ('''action''', '''browse'''),
                    ('''gid''', '''0'''),]
                url = "%s/civicrm/contact/view/cd" % drupal_path
                self.msg("Testing URL: %s" % url)
                Validator.validateRequest(self, self.getMethod(), "get", url, params)
                self.get(url, params)
                self.msg("Response code: %s" % self.getResponseCode())
                self.assertEquals("Assert number 13 failed", 200, self.getResponseCode())
                Validator.validateResponse(self, self.getMethod(), url, params)
            else :
                print "****************************************************************"
                print "No Inline Group Found."
                print "****************************************************************"
        else :
            print "****************************************************************"
            print "Individual Contact \'%s\' not found." % name
            print "****************************************************************"
        

    # ^^^ Insert new recordings here.  (Do not remove this line.)


# Code to load and run the test
if __name__ == 'main':
    test = testEditCustomDataInline("testEditCustomDataInline")
    test.Run()
