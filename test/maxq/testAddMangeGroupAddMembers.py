# Generated by MaxQ [com.bitmechanic.maxq.generator.JythonCodeGenerator]
from PyHttpTestCase import PyHttpTestCase
from com.bitmechanic.maxq import Config
from com.bitmechanic.maxq import DBUtil
import commonConst, commonAPI
global validatorPkg
if __name__ == 'main':
    validatorPkg = Config.getValidatorPkgName()
# Determine the validator for this testcase.
exec 'from '+validatorPkg+' import Validator'


# definition of test class
class testManageGroupAddMembers(PyHttpTestCase):
    def setUp(self):
        global db
        db = commonAPI.dbStart()
    
    def tearDown(self):
        commonAPI.dbStop(db)
    
    def runTest(self):
        self.msg('Test started')
        
        drupal_path = commonConst.DRUPAL_PATH
        
        commonAPI.login(self)
        
        params = [
            ('''reset''', '''1'''),]
        url = "%s/civicrm/group" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 6 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        params = [
            ('''reset''', '''1'''),]
        url = "%s/civicrm/group/add" % drupal_path
        self.msg("Testing URL: %s" % url)
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 7 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)

        params = [
            ('''_qf_default''', '''Edit:next'''),
            ('''title''', '''Test Group'''),
            ('''description''', '''This is Test Group '''),
            ('''_qf_Edit_next''', '''Continue'''),]
        url = "%s/civicrm/group/add" % drupal_path
        self.msg("Testing URL: %s" % url)
        
        name    = 'Test Group'
        queryID = 'select id from civicrm_group where name=\'%s\'' % name
        qid     = db.loadVal(queryID)
        
        Validator.validateRequest(self, self.getMethod(), "post", url, params)
        self.post(url, params)
        
        if qid :
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 8 failed", 200, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
            print "****************************************************************"
            print "Group \'%s\' not found." % name
            print "****************************************************************"
        else :
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 9 failed", 302, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
            qid = db.loadVal(queryID)
            QID = '''%s''' % qid
            print "****************************************************************"
            print "Group \'%s\' successfully Added." % name
            print "****************************************************************"
            
            params = [
                ('''_qf_Search_display''', '''true'''),]
            url = "%s/civicrm/group/add" % drupal_path
            self.msg("Testing URL: %s" % url)
            Validator.validateRequest(self, self.getMethod(), "get", url, params)
            self.get(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 10 failed", 200, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
            
            params = [
                ('''task''', '''1'''),
                ('''_qf_default''', '''Search:refresh'''),
                ('''contact_type''', ''''''),
                ('''group''', ''''''),
                ('''tag''', ''''''),
                ('''sort_name''', ''''''),
                ('''_qf_Search_refresh''', '''Search'''),]
            url = "%s/civicrm/group/add" % drupal_path
            self.msg("Testing URL: %s" % url)
            Validator.validateRequest(self, self.getMethod(), "post", url, params)
            self.post(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 11 failed", 302, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
            
            params = [
                ('''_qf_Search_display''', '''true'''),]
            url = "%s/civicrm/group/add" % drupal_path
            self.msg("Testing URL: %s" % url)
            Validator.validateRequest(self, self.getMethod(), "get", url, params)
            self.get(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 25 failed", 200, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
            
            params = [
                ('''task''', '''1'''),
                ('''_qf_default''', '''Search:refresh'''),
                ('''contact_type''', ''''''),
                ('''group''', ''''''),
                ('''tag''', ''''''),
                ('''sort_name''', ''''''),
                ('''_qf_Search_next_action''', '''Add Contacts to Test Group'''),
                ('''radio_ts''', '''ts_sel'''),
                ('''crmPID''', '''1'''),
                ('''mark_x_42''', '''1'''),
                ('''mark_x_8''', '''1'''),
                ('''mark_x_9''', '''1'''),
                ('''mark_x_63''', '''1'''),
                ('''mark_x_82''', '''1'''),
                ('''mark_x_54''', '''1'''),
                ('''mark_x_35''', '''1'''),
                ('''crmPID_B''', '''1'''),]
            url = "%s/civicrm/group/add" % drupal_path
            self.msg("Testing URL: %s" % url)
            Validator.validateRequest(self, self.getMethod(), "post", url, params)
            self.post(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 13 failed", 302, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
        
            params = [
                ('''_qf_AddToGroup_display''', '''true'''),]
            url = "%s/civicrm/group/add" % drupal_path
            self.msg("Testing URL: %s" % url)
            Validator.validateRequest(self, self.getMethod(), "get", url, params)
            self.get(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 14 failed", 200, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
            
            params = [
                ('''_qf_default''', '''AddToGroup:next'''),
                ('''group_id''', QID),
                ('''_qf_AddToGroup_next''', '''Add To Group'''),]
            url = "%s/civicrm/group/add" % drupal_path
            self.msg("Testing URL: %s" % url)
            Validator.validateRequest(self, self.getMethod(), "post", url, params)
            self.post(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 15 failed", 302, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
            
            params = [
                ('''_qf_Result_display''', '''true'''),]
            url = "%s/civicrm/group/add" % drupal_path
            self.msg("Testing URL: %s" % url)
            Validator.validateRequest(self, self.getMethod(), "get", url, params)
            self.get(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 16 failed", 200, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
            
            params = [
                ('''_qf_default''', '''Result:done'''),
                ('''_qf_Result_done''', '''Done'''),]
            url = "%s/civicrm/group/add" % drupal_path
            self.msg("Testing URL: %s" % url)
            Validator.validateRequest(self, self.getMethod(), "post", url, params)
            self.post(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 17 failed", 302, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
            
            params = [
                ('''reset''', '''1'''),
                ('''force''', '''1'''),
                ('''context''', '''smog'''),
                ('''gid''', QID),]
            url = "%s/civicrm/group/search" % drupal_path
            self.msg("Testing URL: %s" % url)
            Validator.validateRequest(self, self.getMethod(), "get", url, params)
            self.get(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 18 failed", 200, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
        
        commonAPI.logout(self)
        self.msg('Test successfully complete.')
    # ^^^ Insert new recordings here.  (Do not remove this line.)


# Code to load and run the test
if __name__ == 'main':
    test = testManageGroupAddMembers("testMangeGroup")
    test.Run()
