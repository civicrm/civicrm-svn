<?php
class FilterModuleTestCase extends DrupalTestCase {
  function get_info() {
    return array(
      'name' => t('Filter administration functionality'),
      'description' => t('Thoroughly test the administrative interface of the filter module.'),
      'group' => t('Filter Tests'),
    );
  }

  function setUp() {
    parent::setUp();
  }

  function tearDown() {
    parent::tearDown();
  }

  function test_filter() {
    $version = VERSION;
    $version_five =  ($version[0] == 5);
    $version_seven = ($version[0] == 7);

    // version specific changes
    $first_filter = 0; // url filter
    $second_filter = ($version_five ? 2 : 1); // line filter

    // Create users.
    $admin_user = $this->drupalCreateUserRolePerm(array('administer filters'));
    $web_user = $this->drupalCreateUserRolePerm(array('create page content'));

    $this->drupalLoginUser($admin_user);

    list($filtered, $full) = $this->check_filter_formats();

    // Change default filter.
    $edit = array();
    $edit['default'] = $full;
    $this->drupalPost('admin/settings/filters', $edit, $version_seven ? 'Save changes' : 'Set default format');
    $this->assertText(t('Default format updated.'), 'Default filter updated successfully.');

    $this->assertNoUnwantedRaw('admin/settings/filters/delete/'. $full, 'Delete link not found.');

    // Add an additional tag.
    $edit = array();
    $edit['allowed_html_1'] = '<a> <em> <strong> <cite> <code> <ul> <ol> <li> <dl> <dt> <dd>'.' <quote>'; // Adding <quote> tag.
    $this->drupalPost('admin/settings/filters/'. $filtered .'/configure', $edit, 'Save configuration');
    $this->assertText(t('The configuration options have been saved.'), 'Allowed HTML tag added.');

    $this->assertWantedRaw(htmlentities($edit['allowed_html_1']), 'Tag displayed.');

    $result = db_fetch_object(db_query('SELECT * FROM {cache_filter}'));
    $this->assertFalse($result, 'Cache cleared.');

    // Reorder filters.
    $edit = array();
    $edit['weights[filter/'. $second_filter .']'] = 1;
    $edit['weights[filter/'. $first_filter .']'] = 2;
    $this->drupalPost('admin/settings/filters/'. $filtered .'/order', $edit, 'Save configuration');
    $this->assertText(t('The filter ordering has been saved.'), 'Order saved successfully.');
    
    $result = db_query('SELECT * FROM {filters} WHERE format = %d ORDER BY weight ASC', $filtered);
    $filters = array();
    while ($filter = db_fetch_object($result)) {
      if ($filter->delta == $second_filter || $filter->delta == $first_filter) {
        $filters[] = $filter;
      }
    }
    $this->assertTrue(($filters[0]->delta == $second_filter && $filters[1]->delta == $first_filter), 'Order confirmed.');

    // Add filter.
    $edit = array();
    $edit['name'] = $this->randomName();
    $edit['roles[2]'] = TRUE;
    $edit['filters[filter/'. $second_filter .']'] = TRUE;
    $edit['filters[filter/'. $first_filter .']'] = TRUE;
    $this->drupalPost('admin/settings/filters/add', $edit, 'Save configuration');
    $this->assertWantedRaw(t('Added input format %format.', array('%format' => $edit['name'])), 'New filter created.');

    $format = $this->get_filter($edit['name']);
    $this->assertNotNull($format, 'Format found in database.');

    if ($format !== NULL) {
      if ($version_five) {
        $this->drupalGet('admin/settings/filters/'. $format->format);
      }

      $this->assert_checkbox('roles\[2\]', 'Role found.');
      $this->assert_checkbox('filters\[filter\/'. $second_filter .'\]', 'Line break filter found.');
      $this->assert_checkbox('filters\[filter\/'. $first_filter .'\]', 'Url filter found.');

      // Delete new filter.
      $this->drupalPost('admin/settings/filters/delete/'. $format->format, array(), 'Delete');
      $this->assertWantedRaw(t('Deleted input format %format.', array('%format' => $edit['name'])), 'Format successfully deleted.');
    }

    // Change default filter back.
    $edit = array();
    $edit['default'] = $filtered;
    $this->drupalPost('admin/settings/filters', $edit, $version_seven ? 'Save changes' : 'Set default format');
    $this->assertText(t('Default format updated.'), 'Default filter updated successfully.');

    $this->assertNoUnwantedRaw('admin/settings/filters/delete/'. $filtered, 'Delete link not found.');

    // Allow authenticated users on full HTML.
    $edit = array();
    $edit['roles[2]'] = TRUE;
    $this->drupalPost('admin/settings/filters/'. $full, $edit, 'Save configuration');
    $this->assertText(t('The input format settings have been updated.'), 'Full HTML format successfully updated.');

    // Switch user.
    $this->drupalGet('logout');
    $this->drupalLoginUser($web_user);

    $this->drupalGet('node/add/page');
    $this->assert_format($full, 'Full HTML filter accessible.');

    // Use filtered HTML and see if it removes tags that arn't allowed.
    $body = $this->randomName();
    $extra_text = 'text';

    $edit = array();
    $edit['title'] = $this->randomName();
    $edit['body'] = $body .'<random>'. $extra_text .'</random>';
    $edit['format'] = $filtered;
    $this->drupalPost('node/add/page', $edit, ($version_five ? 'Submit' : 'Save'));
    $message = ($version_five ? t('Your %post has been created.', array('%post' => 'Page')) : t('Page %title has been created.', array('%title' => $edit['title'])));
    $this->assertWantedRaw($message, 'Filtered node created.');

    $node = node_load(array('title' => $edit['title']));
    $this->assertTrue($node, 'Node found in database.');

    $this->drupalGet('node/'. $node->nid);
    $this->assertText($body . $extra_text, 'Filter removed invalid tag.');

    // Switch user.
    $this->drupalGet('logout');
    $this->drupalLoginUser($admin_user);

    // Clean up.
    // Allowed tags
    $edit = array();
    $edit['allowed_html_1'] = '<a> <em> <strong> <cite> <code> <ul> <ol> <li> <dl> <dt> <dd>';
    $this->drupalPost('admin/settings/filters/'. $filtered .'/configure', $edit, 'Save configuration');
    $this->assertText(t('The configuration options have been saved.'), 'Changes reverted.');

    // Full HTML
    $edit = array();
    $edit['roles[2]'] = FALSE;
    $this->drupalPost('admin/settings/filters/'. $full, $edit, 'Save configuration');
    $this->assertText(t('The input format settings have been updated.'), 'Full HTML format successfully reverted.');

    // Filter order
    $edit = array();
    $edit['weights[filter/'. $second_filter .']'] = 2;
    $edit['weights[filter/'. $first_filter .']'] = 1;
    $this->drupalPost('admin/settings/filters/'. $filtered .'/order', $edit, 'Save configuration');
    $this->assertText(t('The filter ordering has been saved.'), 'Order successfully reverted.');
  }

  /**
   * Query the database to get the two basic formats.
   * 
   * @return Array Array containing filtered and full filter ids.
   */
  function check_filter_formats() {
    $result = db_query('SELECT format, name FROM {filter_formats}');

    $filtered = -1;
    $full = -1;
    while ($format = db_fetch_object($result)) {
      if ($format->name == 'Filtered HTML') {
        $filtered = $format->format;
      }
      else if ($format->name == 'Full HTML') {
        $full = $format->format;
      }
    }

    return array($filtered, $full);
  }

  /**
   * Assert checkbox with specified name is checked on the page.
   */
  function assert_checkbox($name, $message) {
    $this->assertWantedPattern('/name="'. $name .'"(.*?)checked="checked"/', $this->drupalGetContent(), $message);
  }

  /**
   * Assert format with specified id is on the page.
   */
  function assert_format($id, $message) {
    $this->assertWantedPattern('/name="format"(.*?)value="'. $id .'"/', $this->drupalGetContent(), $message);
  }

  /**
   * Get filter by name.
   */
  function get_filter($name) {
    return db_fetch_object(db_query("SELECT * FROM {filter_formats} WHERE name = '%s'", $name));
  }
}
