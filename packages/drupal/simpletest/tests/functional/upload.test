<?php
// $Id: upload.test,v 1.4 2008/03/16 23:30:55 boombatower Exp $

class upload_module_test_case extends DrupalTestCase {
  /**
   * Implementation of get_info().
   */
  function get_info() {
    return array(
      'name' => t('Upload functionality'),
      'description' => t('Check content uploaded to nodes.'),
      'group' => t('Upload Tests'),
    );
  }

  function setUp() {
    parent::setUp();

    $this->drupalModuleEnable('upload');
  }

  /**
   * Create node; upload files to node; and edit, and delete uploads.
   */
  function test_node_upload() {
    $admin_user = $this->drupalCreateUserRolePerm(array('administer site configuration'));
    $web_user = $this->drupalCreateUserRolePerm(array('access content', 'edit any page content', 'upload files', 'view uploaded files'));

    $this->drupalLoginUser($admin_user);

    // Setup upload settings.
    $edit = array();
    $edit['upload_list_default'] = '1'; // Yes.
    $edit['upload_extensions_default'] = 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp';
    $edit['upload_uploadsize_default'] = '1';
    $edit['upload_usersize_default'] = '1';
    $this->drupalPost('admin/settings/uploads', $edit, 'Save configuration');
    $this->assertText('The configuration options have been saved.', 'Upload setting saved.');

    $this->drupalGet('logout');
    $this->drupalLoginUser($web_user);

    // Create a node and attempt to attach files.
    $node = $this->drupalCreateNode();
    $files = array('README.txt', 'INSTALL.txt');

    $this->upload_file($node, $files[0]);
    $this->upload_file($node, $files[1]);

    // Check to see that uploaded file is listed and actually accessible.
    $this->assertText($files[0], $files[0] .' found on node.');
    $this->assertText($files[1], $files[1] .' found on node.');

    $this->check_uploaded_file($files[0]);
    $this->check_uploaded_file($files[1]);

    // Fetch db record and use fid to rename and delete file.
    $upload = db_fetch_object(db_query('SELECT fid, description FROM {upload} WHERE nid = %d', array($node->nid)));
    if ($upload) {
      // Rename file.
      $edit = array();
      $edit['files['. $upload->fid .'][description]'] = $new_name = substr($upload->description, 1);
      $this->drupalPost('node/'. $node->nid .'/edit', $edit, 'Save');
      $this->assertWantedRaw(t('Page %title has been updated.', array('%title' => $node->title)), 'File renamed successfully.');

      $this->assertText($new_name, $new_name .' found on node.');
      $this->assertNoText($upload->description, $upload->description .' not found on node.');

      // Delete a file.
      $edit = array();
      $edit['files['. $upload->fid .'][remove]'] = TRUE;
      $this->drupalPost('node/'. $node->nid .'/edit', $edit, 'Save');
      $this->assertWantedRaw(t('Page %title has been updated.', array('%title' => $node->title)), 'File deleted successfully.');

      $this->assertNoText($new_name, $new_name .' not found on node.');
      $this->drupalGet(file_directory_path() .'/'. $upload->description);
      $this->assertResponse(array(404), 'Uploaded '. $upload->description .' is not accessible.');
    }
    else {
      $this->fail('File upload record not found in database.');
    }
  }

  /**
   * Upload file to specified node.
   *
   * @param object $node Node object.
   * @param string $filename Name of file to upload.
   */
  function upload_file($node, $filename) {
    $edit = array();
    $edit['files[upload]'] = $this->get_file_path($filename);
    $this->drupalPost('node/'. $node->nid .'/edit', $edit, 'Save');
    $this->assertWantedRaw(t('Page %title has been updated.', array('%title' => $node->title)), 'File attached successfully.');
  }

  /**
   * Check that uploaded file is accessible and verify the contents against the original.
   *
   * @param string $filename Name of file to verifiy.
   */
  function check_uploaded_file($filename) {
    $file = $this->get_file_path($filename);
    $this->drupalGet(file_directory_path() .'/'. $filename);
    $this->assertResponse(array(200), 'Uploaded '. $filename .' is accessible.');
    $this->assertEqual(file_get_contents($file), $this->drupalGetContent(), 'Uploaded contents of '. $filename .' verified.');
  }

  /**
   * Get canonicalized absolute path to file located in the SimpleTest module.
   *
   * @param string $filename Name of file to get path for.
   * @return string Absolute path.
   */
  function get_file_path($filename) {
    return realpath(drupal_get_path('module', 'simpletest') .'/'. $filename);
  }
}

class UploadPictureTests extends DrupalTestCase {
  function get_info() {
    return array(
      'name' => 'Upload user picture',
      'description' => 'Assure that dimension check, extension check and image scaling work as designed.',
      'group' => 'Upload Tests'
    );
  }

  /*
   * Test if directories specified in settings exist in filesystem
   */
  function testDirectories() {
    // test if filepath is proper
    $file_dir = file_directory_path();
    $picture_dir = variable_get('user_picture_path', 'pictures');
    $file_check = file_check_directory($file_dir, FILE_CREATE_DIRECTORY, 'file_directory_path');
    $picture_path = $file_dir .'/'.$picture_dir;

    $pic_check = file_check_directory($picture_path, FILE_CREATE_DIRECTORY, 'user_picture_path');
    // check directories
    //$this->assertTrue($file_check,"The directory $file_dir doesn't exist or cannot be created.");
    //$this->assertTrue($pic_check,"The directory $picture_path doesn't exist or cannot be created.");
    $this->_directory_test = is_writable($picture_path);
    $this->assertTrue($this->_directory_test, "The directory $picture_path doesn't exist or is not writable. Further tests won't be made.");
  }

  function testNoPicture() {
    $old_pic_set = variable_get('user_pictures', 0);
    variable_set('user_pictures', 1);

    /* Prepare a user to do the stuff */
    $user = $this->drupalCreateUserRolePerm(array('access content'));
    $this->drupalLoginUser($user);

    // not a image
    $img_path = realpath(drupal_get_path('module', 'simpletest'). "/tests/functional/upload.test");
    $edit = array('files[picture_upload]' => $img_path);
    $this->drupalPost('user/'.$user->uid.'/edit', $edit, 'Save' );
    $this->assertWantedRaw(t('The selected file %file could not be uploaded. Only JPEG, PNG and GIF images are allowed.', array('%file' => 'upload.test')), 'The uploaded file was not an image.');
    variable_set('user_pictures', $old_pic_set);

    // do we have to check users roles?
    // delete test user and roles

  }

  /*
   * Do one test if ImageGDToolkit is installed
   */

  /*
   * Do the test:
   *  GD Toolkit is installed
   *  Picture has invalid dimension
   *
   * results: The image should be uploaded because ImageGDToolkit resizes the picture
   */
  function testWithGDinvalidDimension() {
    if ($this->_directory_Test)
      if (image_get_toolkit()) {

        // PREPARE:
        $old_pic_set = variable_get('user_pictures', 0);
        variable_set('user_pictures', 1);

        /* Prepare a user to do the stuff */
        $user = $this->drupalCreateUserRolePerm(array('access content'));
        $this->drupalLoginUser($user);

        // changing actual setting;
        $old_dim = variable_get('user_picture_dimensions', '85x85');
        $old_size = variable_get('user_picture_file_size', '30');
        $img_path = realpath("modules/tests/pictureTesting.jpg");
        $info = image_get_info($img_path);

        // set new variables;
        $test_size = floor(filesize($img_path) / 1000) + 1;
        $test_dim = ($info['width'] - 10) . 'x' . ($info['height'] - 10);
        variable_set('user_picture_dimensions', $test_dim);
        variable_set('user_picture_file_size', $test_size);

        // TEST:
        $edit = array('picture' => $img_path);
        $this->drupalPost('user/'.$user->uid.'/edit', $edit, 'Save' );
        $file_dir = variable_get('file_directory_path', 'files');
        $picture_dir = variable_get('user_picture_path', 'pictures');
        $pic_path = $file_dir .'/'.$picture_dir .'/picture-'.$user->uid.'.jpg';

        // get full url to the user's image
        $picture = file_create_url($pic_path);

        // check if image is displayed in user's profile page
        $content = $this->_browser->getContent();
        $this->assertTrue(strpos($content,$picture), "Image is displayed in user's profile page");

        // check if file is located in proper directory
        $this->assertTrue(is_file($pic_path), "File is located in proper directory");

        // RESTORING:
        variable_set('user_picture_file_size', $old_size);
        variable_set('user_picture_dimensions', $old_dim);

        variable_set('user_pictures', $old_pic_set);
      }

  }

  /*
   * Do the test:
   *  GD Toolkit is installed
   *  Picture has invalid size
   *
   * results: The image should be uploaded because ImageGDToolkit resizes the picture
   */

  function testWithGDinvalidSize() {
    if ($this->_directory_Test)
      if (image_get_toolkit()) {
        // PREPARE:
        $old_pic_set = variable_get('user_pictures', 0);
        variable_set('user_pictures', 1);

        /* Prepare a user to do the stuff */
        $user = $this->drupalCreateUserRolePerm(array('access content'));
        $this->drupalLoginUser($user);

        // changing actual setting;
        $old_dim = variable_get('user_picture_dimensions', '85x85');
        $old_size = variable_get('user_picture_file_size', '30');
        $img_path = realpath("modules/tests/pictureTesting.jpg");
        $info = image_get_info($img_path);
        // set new variables;

        $test_dim = ($info['width'] + 10) . 'x' . ($info['height'] + 10);
        $test_size = floor(filesize($img_path) / 1000) - 1;
        variable_set('user_picture_dimensions', $test_dim);
        variable_set('user_picture_file_size', $test_size);

        // TEST:
        $edit = array('picture' => $img_path);
        $this->drupalPost('user/'.$user->uid.'/edit', $edit, 'Save' );
        $file_dir = variable_get('file_directory_path', 'files');
        $picture_dir = variable_get('user_picture_path', 'pictures');
        $pic_path = $file_dir .'/'.$picture_dir .'/picture-'.$user->uid.'.jpg';

        // get full url to the user's image
        $picture = file_create_url($pic_path);

        // check if image is displayed in user's profile page
        $content = $this->_browser->getContent();
        $this->assertTrue(strpos($content,$picture), "Image is displayed in user's profile page");

        // check if file is located in proper directory
        $this->assertTrue(is_file($pic_path), "File is located in proper directory");

        // RESTORING:
        variable_set('user_picture_file_size', $old_size);
        variable_set('user_picture_dimensions', $old_dim);

        variable_set('user_pictures', $old_pic_set);
      }
  }

  /*
   * Do the test:
   *  GD Toolkit is not installed
   *  Picture has invalid size
   *
   * results: The image shouldn't be uploaded
   */
   function testWithoutGDinvalidDimension() {
    if ($this->_directory_test)
      if (!image_get_toolkit()) {
        // PREPARE:
        $old_pic_set = variable_get('user_pictures', 0);
        variable_set('user_pictures', 1);

        /* Prepare a user to do the stuff */
        $user = $this->drupalCreateUserRolePerm(array('access content'));
        $this->drupalLoginUser($user);

        // changing actual setting;
        $old_dim = variable_get('user_picture_dimensions', '85x85');
        $old_size = variable_get('user_picture_file_size', '30');
        $img_path = realpath("modules/tests/pictureTesting.jpg");
        $info = image_get_info($img_path);
        // set new variables;
        $test_size = floor(filesize($img_path) / 1000) + 1;
        $test_dim = ($info['width'] - 10) . 'x' . ($info['height'] - 10);
        variable_set('user_picture_dimensions', $test_dim);
        variable_set('user_picture_file_size', $test_size);

        // TEST:
        $edit = array('picture' => $img_path);
        $this->drupalPost('user/'.$user->uid.'/edit', $edit, 'Save' );
        $text = t('The uploaded image is too large; the maximum dimensions are %dimensions pixels.', array('%dimensions' => variable_get('user_picture_dimensions', '85x85')));
        $this->assertWantedText($text, 'Checking response on invalid image (dimensions).');

        // check if file is not uploaded
        $file_dir = variable_get('file_directory_path', 'files');
        $picture_dir = variable_get('user_picture_path', 'pictures');
        $pic_path = $file_dir .'/'.$picture_dir .'/picture-'.$user->uid.'.jpg';
        $this->assertFalse(is_file($pic_path), "File is not uploaded");

        // restore variables;
        variable_set('user_picture_file_size', $old_size);
        variable_set('user_picture_dimensions', $old_dim);

        variable_set('user_pictures', $old_pic_set);
      }
   }

  /*
   * Do the test:
   *  GD Toolkit is not installed
   *  Picture has invalid size
   *
   * results: The image shouldn't be uploaded
   */
   function testWithoutGDinvalidSize() {
    if ($this->_directory_test)
      if (!image_get_toolkit()) {
        // PREPARE:
        $old_pic_set = variable_get('user_pictures', 0);
        variable_set('user_pictures', 1);

        /* Prepare a user to do the stuff */
        $user = $this->drupalCreateUserRolePerm(array('access content'));
        $this->drupalLoginUser($user);

        // changing actual setting;
        $old_dim = variable_get('user_picture_dimensions', '85x85');
        $old_size = variable_get('user_picture_file_size', '30');
        $img_path = realpath("modules/tests/pictureTesting.jpg");
        $info = image_get_info($img_path);
        // invalid size
        // restore one and set another
        $test_dim = ($info['width'] + 10) . 'x' . ($info['height'] + 10);
        $test_size = floor(filesize($img_path) / 1000) - 1;
        variable_set('user_picture_dimensions', $test_dim);
        variable_set('user_picture_file_size', $test_size);

        $edit = array('picture' => $img_path);
        $this->drupalPost('user/'.$user->uid.'/edit', $edit, 'Save' );
        $text = t('The uploaded image is too large; the maximum file size is %size kB.', array('%size' => variable_get('user_picture_file_size', '30')));
        $this->assertWantedText($text, 'Checking response on invalid image size.');

        // check if file is not uploaded
        $file_dir = variable_get('file_directory_path', 'files');
        $picture_dir = variable_get('user_picture_path', 'pictures');
        $pic_path = $file_dir .'/'.$picture_dir .'/picture-'.$user->uid.'.jpg';
        $this->assertFalse(is_file($pic_path), "File is not uploaded");
        // restore variables;
        variable_set('user_picture_file_size', $old_size);
        variable_set('user_picture_dimensions', $old_dim);

        variable_set('user_pictures', $old_pic_set);
      }
  }

  /*
   * Do the test:
   *  Picture is valid (proper size and dimension)
   *
   * results: The image should be uploaded
   */
  function testPictureIsValid() {
    if ($this->_directory_test) {
      // PREPARE:
      $old_pic_set = variable_get('user_pictures', 0);
      variable_set('user_pictures', 1);

      /* Prepare a user to do the stuff */
      $user = $this->drupalCreateUserRolePerm(array('access content'));
      $this->drupalLoginUser($user);

      // changing actual setting;
      $old_dim = variable_get('user_picture_dimensions', '85x85');
      $old_size = variable_get('user_picture_file_size', '30');
      $img_path = realpath(drupal_get_path('module', 'simpletest'). "/tests/pictureTesting.jpg");
      $info = image_get_info($img_path);

      // valid size & dimensions
      // restore one and set another
      $test_dim = ($info['width'] + 10) . 'x' . ($info['height'] + 10);
      $test_size = floor(filesize($img_path) / 1000) + 1;
      variable_set('user_picture_dimensions', $test_dim);
      variable_set('user_picture_file_size', $test_size);

      // TEST:
      $edit = array('files[picture_upload]' => $img_path);
      $this->drupalPost('user/'.$user->uid.'/edit', $edit, 'Save' );
      $picture_dir = variable_get('user_picture_path', 'pictures');
      $pic_path = file_directory_path() .'/'.$picture_dir .'/picture-'.$user->uid.'.jpg';

      // get full url to the user's image
      $picture = file_create_url($pic_path);

      // check if image is displayed in user's profile page
      $content = $this->drupalGetContent();

      $this->assertTrue(strpos($content, $picture), "Image is displayed in user's profile page");

      // check if file is located in proper directory
      $this->assertTrue(is_file($pic_path), "File is located in proper directory");

      // RESTORING:
      variable_set('user_picture_file_size', $old_size);
      variable_set('user_picture_dimensions', $old_dim);

      variable_set('user_pictures', $old_pic_set);

      // DELETING UPLOADED PIC
      file_delete($pic_path);  
    }
  }
}

?>
